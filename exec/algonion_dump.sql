-- MySQL dump 10.13  Distrib 8.0.34, for Win64 (x86_64)
--
-- Host: algonion.store    Database: algo
-- ------------------------------------------------------
-- Server version	8.0.36-0ubuntu0.20.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `algo_group`
--

DROP TABLE IF EXISTS `algo_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `algo_group` (
  `group_id` int NOT NULL AUTO_INCREMENT,
  `classification` varchar(255) DEFAULT NULL,
  `problem_id` int DEFAULT NULL,
  PRIMARY KEY (`group_id`),
  KEY `FKghhxhhr6gca9cn31urwtkjq04` (`problem_id`),
  CONSTRAINT `FKghhxhhr6gca9cn31urwtkjq04` FOREIGN KEY (`problem_id`) REFERENCES `problem` (`problem_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4031 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `algo_group`
--

LOCK TABLES `algo_group` WRITE;
/*!40000 ALTER TABLE `algo_group` DISABLE KEYS */;
INSERT INTO `algo_group` VALUES (1,'구현',1),(2,'사칙연산',1),(3,'수학',1),(4,'구현',2),(5,'사칙연산',2),(6,'수학',2),(7,'많은 조건 분기',3),(8,'기하학',3),(9,'수학',3),(10,'다이나믹 프로그래밍',4),(11,'기하학',5),(12,'수학',5),(13,'방향 비순환 그래프',6),(14,'다이나믹 프로그래밍',6),(15,'그래프 이론',6),(16,'위상 정렬',6),(17,'다이나믹 프로그래밍',7),(18,'브루트포스 알고리즘',8),(19,'수학',8),(20,'구현',9),(21,'사칙연산',9),(22,'수학',9),(23,'구현',10),(24,'수학',10),(25,'조합론',11),(26,'다이나믹 프로그래밍',11),(27,'수학',11),(28,'수학',12),(29,'그래프 이론',13),(30,'그래프 탐색',13),(31,'너비 우선 탐색',13),(32,'깊이 우선 탐색',13),(33,'정규 표현식',14),(34,'문자열',14),(35,'비트마스킹',15),(36,'다이나믹 프로그래밍',15),(37,'최대 유량',15),(38,'비트필드를 이용한 다이나믹 프로그래밍',15),(39,'정렬',16),(40,'수학',17),(41,'정수론',17),(42,'소수 판정',17),(43,'에라토스테네스의 체',17),(44,'이분 매칭',18),(45,'수학',18),(46,'정수론',18),(47,'소수 판정',18),(48,'에라토스테네스의 체',18),(49,'브루트포스 알고리즘',19),(50,'수학',20),(51,'다이나믹 프로그래밍',21),(52,'자료 구조',22),(53,'덱',22),(54,'구현',23),(55,'수학',23),(56,'조합론',24),(57,'다이나믹 프로그래밍',24),(58,'수학',24),(59,'수학',25),(60,'브루트포스 알고리즘',26),(61,'그리디 알고리즘',27),(62,'수학',27),(63,'정렬',27),(64,'브루트포스 알고리즘',28),(65,'기하학',28),(66,'수학',28),(67,'다이나믹 프로그래밍',29),(68,'누적 합',29),(69,'비트마스킹',30),(70,'다이나믹 프로그래밍',30),(71,'비트필드를 이용한 다이나믹 프로그래밍',30),(72,'분할 정복',31),(73,'구현',31),(74,'재귀',31),(75,'최대 유량',32),(76,'구현',33),(77,'문자열',33),(78,'유클리드 호제법',34),(79,'그래프 이론',34),(80,'그래프 탐색',34),(81,'수학',34),(82,'정수론',34),(83,'애드 혹',35),(84,'브루트포스 알고리즘',35),(85,'너비 우선 탐색',36),(86,'비트마스킹',36),(87,'브루트포스 알고리즘',36),(88,'그래프 이론',36),(89,'그래프 탐색',36),(90,'임의 정밀도 / 큰 수 연산',37),(91,'그리디 알고리즘',37),(92,'구현',37),(93,'수학',37),(94,'문자열',37),(95,'수학',38),(96,'정수론',38),(97,'백트래킹',39),(98,'브루트포스 알고리즘',39),(99,'너비 우선 탐색',40),(100,'그래프 이론',40),(101,'그래프 탐색',40),(102,'비트마스킹',41),(103,'다이나믹 프로그래밍',41),(104,'비트필드를 이용한 다이나믹 프로그래밍',41),(105,'그리디 알고리즘',41),(106,'그리디 알고리즘',42),(107,'수학',42),(108,'다이나믹 프로그래밍',43),(109,'문자열',43),(110,'자료 구조',44),(111,'분리 집합',44),(112,'그래프 이론',44),(113,'그래프 탐색',44),(114,'비트마스킹',45),(115,'중간에서 만나기',45),(116,'그래프 이론',46),(117,'그리디 알고리즘',46),(118,'최소 스패닝 트리',46),(119,'기하학',47),(120,'구현',47),(121,'선분 교차 판정',47),(122,'스위핑',47),(123,'브루트포스 알고리즘',48),(124,'그리디 알고리즘',48),(125,'다이나믹 프로그래밍',49),(126,'누적 합',49),(127,'그리디 알고리즘',50),(128,'수학',50),(129,'그래프 이론',51),(130,'파싱',51),(131,'문자열',51),(132,'브루트포스 알고리즘',52),(133,'구현',52),(134,'비트마스킹',53),(135,'그리디 알고리즘',53),(136,'수학',53),(137,'브루트포스 알고리즘',54),(138,'다이나믹 프로그래밍',54),(139,'비트마스킹',55),(140,'다이나믹 프로그래밍',55),(141,'비트필드를 이용한 다이나믹 프로그래밍',55),(142,'문자열',55),(143,'구현',56),(144,'재귀',56),(145,'시뮬레이션',56),(146,'이분 탐색',57),(147,'다이나믹 프로그래밍',57),(148,'브루트포스 알고리즘',58),(149,'수학',58),(150,'브루트포스 알고리즘',59),(151,'플로이드–워셜',59),(152,'그래프 이론',59),(153,'그래프 탐색',59),(154,'최단 경로',59),(155,'브루트포스 알고리즘',60),(156,'수학',60),(157,'정렬',60),(158,'자료 구조',61),(159,'수학',61),(160,'우선순위 큐',61),(161,'정렬',61),(162,'브루트포스 알고리즘',62),(163,'볼록 껍질',62),(164,'기하학',62),(165,'백트래킹',63),(166,'비트마스킹',63),(167,'브루트포스 알고리즘',63),(168,'구현',64),(169,'시뮬레이션',64),(170,'기하학',65),(171,'수학',65),(172,'피타고라스 정리',65),(173,'브루트포스 알고리즘',66),(174,'수학',66),(175,'다이나믹 프로그래밍',67),(176,'그리디 알고리즘',67),(177,'고속 푸리에 변환',68),(178,'수학',68),(179,'깊이 우선 탐색',69),(180,'그래프 이론',69),(181,'그래프 탐색',69),(182,'트리',69),(183,'애드 혹',70),(184,'많은 조건 분기',70),(185,'기하학',70),(186,'최대 유량',71),(187,'최대 유량 최소 컷 정리',71),(188,'그리디 알고리즘',72),(189,'이분 탐색',73),(190,'수학',73),(191,'오일러 경로',74),(192,'그래프 이론',74),(193,'수학',74),(194,'분할 정복',75),(195,'재귀',75),(196,'브루트포스 알고리즘',76),(197,'수학',76),(198,'구현',77),(199,'볼록 껍질',78),(200,'기하학',78),(201,'선분 교차 판정',78),(202,'볼록 다각형 내부의 점 판정',78),(203,'다각형의 넓이',78),(204,'브루트포스 알고리즘',79),(205,'수학',79),(206,'브루트포스 알고리즘',80),(207,'그리디 알고리즘',81),(208,'수학',82),(209,'다이나믹 프로그래밍',83),(210,'그리디 알고리즘',83),(211,'그리디 알고리즘',84),(212,'정렬',84),(213,'그리디 알고리즘',85),(214,'구현',85),(215,'기하학',86),(216,'수학',86),(217,'비트마스킹',87),(218,'다이나믹 프로그래밍',87),(219,'비트필드를 이용한 다이나믹 프로그래밍',87),(220,'삼분 탐색',88),(221,'자료 구조',89),(222,'그리디 알고리즘',89),(223,'우선순위 큐',89),(224,'구현',90),(225,'수학',90),(226,'확률론',90),(227,'브루트포스 알고리즘',91),(228,'구현',92),(229,'시뮬레이션',92),(230,'그리디 알고리즘',93),(231,'정렬',93),(232,'브루트포스 알고리즘',94),(233,'중간에서 만나기',94),(234,'비트마스킹',95),(235,'수학',95),(236,'수학',96),(237,'정수론',96),(238,'소수 판정',96),(239,'에라토스테네스의 체',96),(240,'브루트포스 알고리즘',97),(241,'브루트포스 알고리즘',98),(242,'KMP',98),(243,'문자열',98),(244,'비트마스킹',99),(245,'다이나믹 프로그래밍',99),(246,'비트필드를 이용한 다이나믹 프로그래밍',99),(247,'다이나믹 프로그래밍',100),(248,'구현',101),(249,'문자열',101),(250,'브루트포스 알고리즘',102),(251,'그리디 알고리즘',102),(252,'비트마스킹',103),(253,'다이나믹 프로그래밍',103),(254,'비트필드를 이용한 다이나믹 프로그래밍',103),(255,'깊이 우선 탐색',104),(256,'다이나믹 프로그래밍',104),(257,'그래프 이론',104),(258,'그래프 탐색',104),(259,'많은 조건 분기',105),(260,'구현',105),(261,'문자열',105),(262,'그리디 알고리즘',106),(263,'수학',106),(264,'다이나믹 프로그래밍',107),(265,'배낭 문제',107),(266,'브루트포스 알고리즘',108),(267,'방향 비순환 그래프',109),(268,'자료 구조',109),(269,'그래프 이론',109),(270,'해시를 사용한 집합과 맵',109),(271,'강한 연결 요소',109),(272,'위상 정렬',109),(273,'너비 우선 탐색',110),(274,'깊이 우선 탐색',110),(275,'그래프 이론',110),(276,'그래프 탐색',110),(277,'구현',110),(278,'구현',111),(279,'수학',111),(280,'브루트포스 알고리즘',112),(281,'많은 조건 분기',112),(282,'구현',112),(283,'수학',112),(284,'구현',113),(285,'수학',113),(286,'정수론',113),(287,'너비 우선 탐색',114),(288,'그래프 이론',114),(289,'그래프 탐색',114),(290,'구현',114),(291,'시뮬레이션',114),(292,'이분 탐색',115),(293,'그리디 알고리즘',115),(294,'매개 변수 탐색',115),(295,'그래프 이론',116),(296,'그래프 이론',117),(297,'그리디 알고리즘',117),(298,'구현',118),(299,'수학',118),(300,'기하학',119),(301,'구현',119),(302,'정렬',119),(303,'스위핑',119),(304,'깊이 우선 탐색',120),(305,'그래프 이론',120),(306,'그래프 탐색',120),(307,'브루트포스 알고리즘',121),(308,'문자열',121),(309,'다이나믹 프로그래밍',122),(310,'배낭 문제',122),(311,'수학',122),(312,'너비 우선 탐색',123),(313,'많은 조건 분기',123),(314,'그래프 이론',123),(315,'그래프 탐색',123),(316,'수학',123),(317,'분할 정복을 이용한 거듭제곱',124),(318,'수학',124),(319,'수학',125),(320,'정수론',125),(321,'소수 판정',125),(322,'에라토스테네스의 체',125),(323,'많은 조건 분기',126),(324,'그리디 알고리즘',126),(325,'수학',126),(326,'다이나믹 프로그래밍',127),(327,'최대 유량',128),(328,'최대 유량 최소 컷 정리',128),(329,'백트래킹',129),(330,'수학',129),(331,'그리디 알고리즘',130),(332,'정렬',130),(333,'너비 우선 탐색',131),(334,'기하학',131),(335,'그래프 이론',131),(336,'그래프 탐색',131),(337,'선분 교차 판정',131),(338,'깊이 우선 탐색',132),(339,'다이나믹 프로그래밍',132),(340,'그래프 이론',132),(341,'그래프 탐색',132),(342,'그리디 알고리즘',133),(343,'백트래킹',134),(344,'재귀',134),(345,'브루트포스 알고리즘',135),(346,'다이나믹 프로그래밍',135),(347,'구현',135),(348,'다이나믹 프로그래밍',136),(349,'트리에서의 다이나믹 프로그래밍',136),(350,'그리디 알고리즘',136),(351,'정렬',136),(352,'트리',136),(353,'다이나믹 프로그래밍',137),(354,'다이나믹 프로그래밍',138),(355,'구현',139),(356,'비트마스킹',140),(357,'다이나믹 프로그래밍',140),(358,'비트필드를 이용한 다이나믹 프로그래밍',140),(359,'그리디 알고리즘',141),(360,'구현',141),(361,'수학',141),(362,'그리디 알고리즘',142),(363,'정렬',142),(364,'문자열',142),(365,'기하학',143),(366,'방향 비순환 그래프',144),(367,'그래프 이론',144),(368,'그리디 알고리즘',144),(369,'강한 연결 요소',144),(370,'정렬',144),(371,'위상 정렬',144),(372,'다이나믹 프로그래밍',145),(373,'커넥션 프로파일을 이용한 다이나믹 프로그래밍',145),(374,'브루트포스 알고리즘',146),(375,'조합론',147),(376,'다이나믹 프로그래밍',147),(377,'수학',147),(378,'조합론',148),(379,'기하학',148),(380,'수학',148),(381,'구현',149),(382,'문자열',149),(383,'다이나믹 프로그래밍',150),(384,'자료 구조',151),(385,'그리디 알고리즘',151),(386,'우선순위 큐',151),(387,'많은 조건 분기',152),(388,'볼록 껍질',152),(389,'기하학',152),(390,'3차원 기하학',152),(391,'다각형의 넓이',152),(392,'구현',153),(393,'문자열',153),(394,'수학',154),(395,'정수론',154),(396,'소수 판정',154),(397,'에라토스테네스의 체',154),(398,'그래프 이론',155),(399,'그래프 탐색',155),(400,'애드 혹',156),(401,'다이나믹 프로그래밍',156),(402,'자료 구조',157),(403,'덱',157),(404,'그리디 알고리즘',157),(405,'삼분 탐색',157),(406,'구현',158),(407,'문자열',158),(408,'자료 구조',159),(409,'구현',159),(410,'큐',159),(411,'구현',160),(412,'문자열',160),(413,'분할 정복을 이용한 거듭제곱',161),(414,'수학',161),(415,'자료 구조',162),(416,'그리디 알고리즘',162),(417,'느리게 갱신되는 세그먼트 트리',162),(418,'세그먼트 트리',162),(419,'데이크스트라',163),(420,'다이나믹 프로그래밍',163),(421,'그래프 이론',163),(422,'최단 경로',163),(423,'다이나믹 프로그래밍',164),(424,'휴리스틱',164),(425,'구현',164),(426,'문자열',164),(427,'애드 혹',165),(428,'백트래킹',165),(429,'그리디 알고리즘',165),(430,'자료 구조',166),(431,'깊이 우선 탐색',166),(432,'그래프 이론',166),(433,'그래프 탐색',166),(434,'파싱',166),(435,'런타임 전의 전처리',166),(436,'문자열',166),(437,'트리',166),(438,'트라이',166),(439,'이분 탐색',167),(440,'깊이 우선 탐색',168),(441,'그래프 이론',168),(442,'그래프 탐색',168),(443,'트리',168),(444,'자료 구조',169),(445,'세그먼트 트리',169),(446,'자료 구조',170),(447,'기하학',170),(448,'그리디 알고리즘',170),(449,'스택',170),(450,'선인장',171),(451,'깊이 우선 탐색',171),(452,'그래프 이론',171),(453,'그래프 탐색',171),(454,'다이나믹 프로그래밍',172),(455,'구현',174),(456,'시뮬레이션',174),(457,'백트래킹',175),(458,'브루트포스 알고리즘',175),(459,'너비 우선 탐색',176),(460,'그래프 이론',176),(461,'그래프 탐색',176),(462,'비트마스킹',177),(463,'다이나믹 프로그래밍',177),(464,'비트필드를 이용한 다이나믹 프로그래밍',177),(465,'많은 조건 분기',178),(466,'기하학',178),(467,'수학',178),(468,'스위핑',178),(469,'오일러 경로',179),(470,'그래프 이론',179),(471,'다이나믹 프로그래밍',180),(472,'수학',180),(473,'재귀',180),(474,'이중 연결 요소',181),(475,'선인장',181),(476,'자료 구조',181),(477,'다이나믹 프로그래밍',181),(478,'트리에서의 다이나믹 프로그래밍',181),(479,'그래프 이론',181),(480,'트리',181),(481,'정렬',182),(482,'문자열',182),(483,'백트래킹',183),(484,'브루트포스 알고리즘',183),(485,'수학',184),(486,'정렬',184),(487,'브루트포스 알고리즘',185),(488,'자료 구조',185),(489,'해시를 사용한 집합과 맵',185),(490,'누적 합',185),(491,'그래프 이론',186),(492,'최소 스패닝 트리',186),(493,'많은 조건 분기',187),(494,'그리디 알고리즘',187),(495,'정렬',187),(496,'해 구성하기',188),(497,'분할 정복',188),(498,'수학',188),(499,'유클리드 호제법',189),(500,'수학',189),(501,'정수론',189),(502,'백트래킹',190),(503,'브루트포스 알고리즘',190),(504,'깊이 우선 탐색',190),(505,'그래프 이론',190),(506,'그래프 탐색',190),(507,'많은 조건 분기',191),(508,'기하학',191),(509,'선분 교차 판정',191),(510,'너비 우선 탐색',192),(511,'자료 구조',192),(512,'다이나믹 프로그래밍',192),(513,'게임 이론',192),(514,'그래프 이론',192),(515,'그래프 탐색',192),(516,'해시를 사용한 집합과 맵',192),(517,'트리를 사용한 집합과 맵',192),(518,'비트마스킹',193),(519,'수학',193),(520,'구현',194),(521,'수학',194),(522,'너비 우선 탐색',195),(523,'비트마스킹',195),(524,'그래프 이론',195),(525,'그래프 탐색',195),(526,'브루트포스 알고리즘',196),(527,'구현',196),(528,'임의 정밀도 / 큰 수 연산',197),(529,'미적분학',197),(530,'수학',197),(531,'수치해석',197),(532,'최소 스패닝 트리',198),(533,'그래프 이론',198),(534,'브루트포스 알고리즘',199),(535,'기하학',199),(536,'수학',199),(537,'깊이 우선 탐색',200),(538,'오일러 경로',200),(539,'그래프 이론',200),(540,'그래프 탐색',200),(541,'이분 탐색',201),(542,'브루트포스 알고리즘',201),(543,'다이나믹 프로그래밍',201),(544,'그리디 알고리즘',201),(545,'매개 변수 탐색',201),(546,'누적 합',201),(547,'해 구성하기',202),(548,'그리디 알고리즘',202),(549,'자료 구조',203),(550,'그리디 알고리즘',203),(551,'우선순위 큐',203),(552,'정렬',203),(553,'다이나믹 프로그래밍',204),(554,'수학',204),(555,'확률론',204),(556,'다이나믹 프로그래밍',205),(557,'문자열',205),(558,'구현',206),(559,'브루트포스 알고리즘',207),(560,'수학',207),(561,'백트래킹',208),(562,'브루트포스 알고리즘',208),(563,'구현',208),(564,'이분 탐색',209),(565,'중간에서 만나기',209),(566,'다이나믹 프로그래밍',210),(567,'최대 유량',211),(568,'최대 유량 최소 컷 정리',211),(569,'다이나믹 프로그래밍',212),(570,'자릿수를 이용한 다이나믹 프로그래밍',212),(571,'수학',212),(572,'정수론',212),(573,'구현',213),(574,'수학',213),(575,'문자열',213),(576,'그리디 알고리즘',214),(577,'구현',214),(578,'문자열',214),(579,'브루트포스 알고리즘',215),(580,'수학',215),(581,'정수론',215),(582,'수학',216),(583,'정수론',216),(584,'자료 구조',217),(585,'분리 집합',217),(586,'링크/컷 트리',217),(587,'트리',217),(588,'2-sat',218),(589,'그래프 이론',218),(590,'강한 연결 요소',218),(591,'값 / 좌표 압축',219),(592,'자료 구조',219),(593,'기하학',219),(594,'구현',219),(595,'스위핑',219),(596,'벨만–포드',220),(597,'그래프 이론',220),(598,'그래프 탐색',220),(599,'최단 경로',220),(600,'값 / 좌표 압축',221),(601,'데이크스트라',221),(602,'그래프 이론',221),(603,'그래프 탐색',221),(604,'최단 경로',221),(605,'자료 구조',222),(606,'분할 정복',222),(607,'기하학',222),(608,'3차원 기하학',222),(609,'스위핑',222),(610,'수학',223),(611,'정수론',223),(612,'수학',225),(613,'정수론',225),(614,'구현',226),(615,'수학',226),(616,'문자열',226),(617,'다이나믹 프로그래밍',227),(618,'그리디 알고리즘',227),(619,'배낭 문제',227),(620,'정렬',227),(621,'너비 우선 탐색',228),(622,'그래프 이론',228),(623,'그래프 탐색',228),(624,'수학',228),(625,'자료 구조',229),(626,'다이나믹 프로그래밍',229),(627,'트리에서의 다이나믹 프로그래밍',229),(628,'해시를 사용한 집합과 맵',229),(629,'배낭 문제',229),(630,'트리',229),(631,'다이나믹 프로그래밍',230),(632,'수학',230),(633,'런타임 전의 전처리',230),(634,'다이나믹 프로그래밍',231),(635,'문자열',231),(636,'다이나믹 프로그래밍',232),(637,'배낭 문제',232),(638,'애드 혹',233),(639,'브루트포스 알고리즘',233),(640,'그래프 이론',233),(641,'그래프 탐색',233),(642,'브루트포스 알고리즘',234),(643,'구현',234),(644,'조합론',235),(645,'다이나믹 프로그래밍',235),(646,'수학',235),(647,'구현',236),(648,'문자열',236),(649,'구현',237),(650,'데이크스트라',239),(651,'그래프 이론',239),(652,'최단 경로',239),(653,'브루트포스 알고리즘',240),(654,'너비 우선 탐색',241),(655,'깊이 우선 탐색',241),(656,'그래프 이론',241),(657,'그래프 탐색',241),(658,'트리',241),(659,'수학',242),(660,'정수론',242),(661,'소수 판정',242),(662,'수학',243),(663,'다이나믹 프로그래밍',244),(664,'문자열',244),(665,'구현',245),(666,'시뮬레이션',245),(667,'너비 우선 탐색',246),(668,'깊이 우선 탐색',246),(669,'그래프 이론',246),(670,'그래프 탐색',246),(671,'그리디 알고리즘',247),(672,'정렬',247),(673,'임의 정밀도 / 큰 수 연산',248),(674,'사칙연산',248),(675,'수학',248),(676,'백트래킹',249),(677,'브루트포스 알고리즘',249),(678,'다이나믹 프로그래밍',250),(679,'분할 정복을 이용한 거듭제곱',250),(680,'수학',250),(681,'자료 구조',251),(682,'구현',251),(683,'연결 리스트',251),(684,'우선순위 큐',251),(685,'브루트포스 알고리즘',252),(686,'구현',252),(687,'정렬',252),(688,'문자열',252),(689,'사칙연산',253),(690,'구현',253),(691,'수학',253),(692,'이분 탐색',254),(693,'자료 구조',254),(694,'정렬',254),(695,'두 포인터',254),(696,'브루트포스 알고리즘',255),(697,'문자열',255),(698,'데이크스트라',256),(699,'기하학',256),(700,'그래프 이론',256),(701,'구현',256),(702,'선분 교차 판정',256),(703,'파싱',256),(704,'최단 경로',256),(705,'문자열',256),(706,'조합론',257),(707,'다이나믹 프로그래밍',257),(708,'수학',257),(709,'0-1 너비 우선 탐색',258),(710,'데이크스트라',258),(711,'다이나믹 프로그래밍',258),(712,'그래프 이론',258),(713,'그리디 알고리즘',258),(714,'수학',258),(715,'최단 경로',258),(716,'최대 유량',259),(717,'최소 비용 최대 유량',259),(718,'구현',260),(719,'문자열',260),(720,'그래프 이론',261),(721,'그래프 탐색',261),(722,'너비 우선 탐색',261),(723,'깊이 우선 탐색',261),(724,'0-1 너비 우선 탐색',262),(725,'데이크스트라',262),(726,'그래프 이론',262),(727,'그래프 탐색',262),(728,'최단 경로',262),(729,'구현',263),(730,'그리디 알고리즘',264),(731,'정렬',264),(732,'구현',265),(733,'문자열',265),(734,'임의 정밀도 / 큰 수 연산',266),(735,'비트마스킹',266),(736,'다이나믹 프로그래밍',266),(737,'비트필드를 이용한 다이나믹 프로그래밍',266),(738,'기하학',267),(739,'선분 교차 판정',267),(740,'스위핑',267),(741,'사칙연산',268),(742,'수학',268),(743,'구현',269),(744,'자료 구조',270),(745,'해시를 사용한 집합과 맵',270),(746,'트리를 사용한 집합과 맵',270),(747,'자료 구조',271),(748,'해시를 사용한 집합과 맵',271),(749,'구현',271),(750,'보이어–무어 다수결 투표',271),(751,'임의 정밀도 / 큰 수 연산',272),(752,'사칙연산',272),(753,'수학',272),(754,'다이나믹 프로그래밍',273),(755,'트리에서의 다이나믹 프로그래밍',273),(756,'트리',273),(757,'자료 구조',274),(758,'누적 합',274),(759,'세그먼트 트리',274),(760,'세그먼트 트리',276),(761,'자료 구조',276),(762,'구현',277),(763,'정렬',277),(764,'데이크스트라',278),(765,'그래프 이론',278),(766,'최단 경로',278),(767,'비트마스킹',279),(768,'수학',279),(769,'재귀',279),(770,'조합론',280),(771,'다이나믹 프로그래밍',280),(772,'배낭 문제',280),(773,'수학',280),(774,'자료 구조',281),(775,'세그먼트 트리',281),(776,'쌍대성',282),(777,'최대 유량',282),(778,'헝가리안',282),(779,'선형 계획법',282),(780,'최소 비용 최대 유량',282),(781,'자료 구조',283),(782,'다이나믹 프로그래밍',283),(783,'해싱',283),(784,'해시를 사용한 집합과 맵',283),(785,'구현',284),(786,'문자열',284),(787,'사칙연산',285),(788,'구현',285),(789,'수학',285),(790,'비트마스킹',286),(791,'브루트포스 알고리즘',286),(792,'그리디 알고리즘',286),(793,'조합론',287),(794,'수학',287),(795,'임의 정밀도 / 큰 수 연산',288),(796,'사칙연산',288),(797,'많은 조건 분기',288),(798,'구현',288),(799,'수학',288),(800,'파싱',288),(801,'문자열',288),(802,'기하학',289),(803,'반평면 교집합',289),(804,'다각형의 넓이',289),(805,'보로노이 다이어그램',289),(806,'다이나믹 프로그래밍',290),(807,'트리에서의 다이나믹 프로그래밍',290),(808,'수학',290),(809,'트리',290),(810,'브루트포스 알고리즘',291),(811,'그리디 알고리즘',291),(812,'구현',291),(813,'시뮬레이션',291),(814,'많은 조건 분기',292),(815,'구현',292),(816,'구현',293),(817,'수학',293),(818,'깊이 우선 탐색',294),(819,'다이나믹 프로그래밍',294),(820,'그래프 이론',294),(821,'그래프 탐색',294),(822,'배낭 문제',294),(823,'위상 정렬',294),(824,'방향 비순환 그래프',294),(825,'자료 구조',295),(826,'그리디 알고리즘',295),(827,'우선순위 큐',295),(828,'정렬',295),(829,'문자열',295),(830,'구현',297),(831,'정렬',297),(832,'문자열',297),(833,'피타고라스 정리',298),(834,'기하학',298),(835,'이분 매칭',299),(836,'데이크스트라',300),(837,'그래프 이론',300),(838,'최단 경로',300),(839,'이분 탐색',301),(840,'매개 변수 탐색',301),(841,'다이나믹 프로그래밍',302),(842,'자료 구조',303),(843,'해시를 사용한 집합과 맵',303),(844,'정렬',303),(845,'문자열',303),(846,'너비 우선 탐색',304),(847,'깊이 우선 탐색',304),(848,'그래프 이론',304),(849,'그래프 탐색',304),(850,'브루트포스 알고리즘',305),(851,'그래프 이론',305),(852,'그래프 탐색',305),(853,'KMP',306),(854,'문자열',306),(855,'자료 구조',307),(856,'세그먼트 트리',307),(857,'슬라이딩 윈도우',307),(858,'애드 혹',308),(859,'구현',308),(860,'수학',308),(861,'구현',309),(862,'다이나믹 프로그래밍',310),(863,'볼록 껍질',311),(864,'기하학',311),(865,'회전하는 캘리퍼스',311),(866,'비트마스킹',312),(867,'다이나믹 프로그래밍',312),(868,'비트필드를 이용한 다이나믹 프로그래밍',312),(869,'수학',313),(870,'브루트포스 알고리즘',314),(871,'수학',314),(872,'정수론',314),(873,'런타임 전의 전처리',314),(874,'소수 판정',314),(875,'에라토스테네스의 체',314),(876,'비트마스킹',315),(877,'데이크스트라',315),(878,'다이나믹 프로그래밍',315),(879,'비트필드를 이용한 다이나믹 프로그래밍',315),(880,'그래프 이론',315),(881,'최단 경로',315),(882,'다이나믹 프로그래밍',316),(883,'구현',317),(884,'문자열',317),(885,'브루트포스 알고리즘',319),(886,'많은 조건 분기',319),(887,'구현',319),(888,'런타임 전의 전처리',319),(889,'브루트포스 알고리즘',320),(890,'기하학',320),(891,'스위핑',320),(892,'이분 탐색',321),(893,'자료 구조',321),(894,'세그먼트 트리',321),(895,'비트마스킹',322),(896,'수학',322),(897,'수학',323),(898,'정수론',323),(899,'비둘기집 원리',323),(900,'다이나믹 프로그래밍',324),(901,'너비 우선 탐색',325),(902,'깊이 우선 탐색',325),(903,'그래프 이론',325),(904,'그래프 탐색',325),(905,'너비 우선 탐색',326),(906,'그래프 이론',326),(907,'그래프 탐색',326),(908,'너비 우선 탐색',327),(909,'자료 구조',327),(910,'그래프 이론',327),(911,'그래프 탐색',327),(912,'해시를 사용한 집합과 맵',327),(913,'트리를 사용한 집합과 맵',327),(914,'조합론',328),(915,'다이나믹 프로그래밍',328),(916,'수학',328),(917,'백트래킹',329),(918,'구현',330),(919,'구현',331),(920,'시뮬레이션',331),(921,'브루트포스 알고리즘',332),(922,'구현',333),(923,'시뮬레이션',333),(924,'많은 조건 분기',334),(925,'구현',334),(926,'문자열',334),(927,'중국인의 나머지 정리',335),(928,'이산 로그',335),(929,'고속 푸리에 변환',335),(930,'수학',335),(931,'뫼비우스 반전 공식',335),(932,'정수론',335),(933,'다이나믹 프로그래밍',336),(934,'누적 합',336),(935,'구현',337),(936,'정렬',337),(937,'두 포인터',337),(938,'많은 조건 분기',338),(939,'수학',338),(940,'그리디 알고리즘',339),(941,'구현',340),(942,'파싱',340),(943,'문자열',340),(944,'구현',341),(945,'수학',341),(946,'백트래킹',342),(947,'브루트포스 알고리즘',342),(948,'수학',342),(949,'그리디 알고리즘',343),(950,'구현',343),(951,'조합론',344),(952,'다이나믹 프로그래밍',344),(953,'수학',344),(954,'확률론',344),(955,'임의 정밀도 / 큰 수 연산',345),(956,'다이나믹 프로그래밍',346),(957,'그래프 이론',346),(958,'강한 연결 요소',346),(959,'구현',347),(960,'시뮬레이션',347),(961,'너비 우선 탐색',348),(962,'이분 탐색',348),(963,'이분 매칭',348),(964,'그래프 이론',348),(965,'그래프 탐색',348),(966,'사칙연산',350),(967,'수학',350),(968,'자료 구조',351),(969,'다이나믹 프로그래밍',351),(970,'해시를 사용한 집합과 맵',351),(971,'백트래킹',352),(972,'그리디 알고리즘',352),(973,'미적분학',353),(974,'수학',353),(975,'자료 구조',354),(976,'다이나믹 프로그래밍',354),(977,'해시를 사용한 집합과 맵',354),(978,'깊이 우선 탐색',355),(979,'그래프 이론',355),(980,'그래프 탐색',355),(981,'수학',355),(982,'사칙연산',356),(983,'브루트포스 알고리즘',356),(984,'구현',356),(985,'수학',356),(986,'문자열',356),(987,'구현',357),(988,'문자열',357),(989,'기하학',358),(990,'브루트포스 알고리즘',359),(991,'조합론',359),(992,'수학',359),(993,'확률론',359),(994,'구현',360),(995,'브루트포스 알고리즘',361),(996,'문자열',361),(997,'구현',362),(998,'시뮬레이션',362),(999,'수학',364),(1000,'이분 탐색',365),(1001,'가장 긴 증가하는 부분 수열: O(n log n)',365),(1002,'브루트포스 알고리즘',366),(1003,'구현',366),(1004,'그래프 이론',368),(1005,'최소 스패닝 트리',368),(1006,'다이나믹 프로그래밍',369),(1007,'그리디 알고리즘',369),(1008,'수학',369),(1009,'자료 구조',370),(1010,'깊이 우선 탐색',370),(1011,'데이크스트라',370),(1012,'분리 집합',370),(1013,'그래프 이론',370),(1014,'그래프 탐색',370),(1015,'우선순위 큐',370),(1016,'작은 집합에서 큰 집합으로 합치는 테크닉',370),(1017,'최단 경로',370),(1018,'구현',371),(1019,'문자열',371),(1020,'비트마스킹',372),(1021,'다이나믹 프로그래밍',372),(1022,'비트필드를 이용한 다이나믹 프로그래밍',372),(1023,'문자열',372),(1024,'수학',373),(1025,'문자열',373),(1026,'자료 구조',374),(1027,'그리디 알고리즘',374),(1028,'우선순위 큐',374),(1029,'정렬',374),(1030,'너비 우선 탐색',375),(1031,'자료 구조',375),(1032,'깊이 우선 탐색',375),(1033,'그래프 이론',375),(1034,'그래프 탐색',375),(1035,'해시를 사용한 집합과 맵',375),(1036,'문자열',375),(1037,'이분 탐색',376),(1038,'자료 구조',376),(1039,'깊이 우선 탐색',376),(1040,'그래프 이론',376),(1041,'그래프 탐색',376),(1042,'세그먼트 트리',376),(1043,'정렬',377),(1044,'자료 구조',379),(1045,'그리디 알고리즘',379),(1046,'우선순위 큐',379),(1047,'정렬',379),(1048,'구현',380),(1049,'문자열',380),(1050,'구현',382),(1051,'너비 우선 탐색',383),(1052,'그래프 이론',383),(1053,'그래프 탐색',383),(1054,'구현',383),(1055,'분할 정복',384),(1056,'고속 푸리에 변환',384),(1057,'수학',384),(1058,'깊이 우선 탐색',386),(1059,'그래프 이론',386),(1060,'그래프 탐색',386),(1061,'구현',386),(1062,'너비 우선 탐색',387),(1063,'플로이드–워셜',387),(1064,'그래프 이론',387),(1065,'그래프 탐색',387),(1066,'최단 경로',387),(1067,'비트마스킹',388),(1068,'많은 조건 분기',388),(1069,'다이나믹 프로그래밍',388),(1070,'비트필드를 이용한 다이나믹 프로그래밍',388),(1071,'구현',388),(1072,'애드 혹',389),(1073,'자료 구조',389),(1074,'정렬',389),(1075,'스택',389),(1076,'구현',390),(1077,'브루트포스 알고리즘',391),(1078,'수학',391),(1079,'정수론',391),(1080,'조합론',392),(1081,'자료 구조',392),(1082,'해시를 사용한 집합과 맵',392),(1083,'수학',392),(1084,'문자열',392),(1085,'자료 구조',393),(1086,'느리게 갱신되는 세그먼트 트리',393),(1087,'세그먼트 트리',393),(1088,'이분 탐색',394),(1089,'자료 구조',394),(1090,'분리 집합',394),(1091,'그래프 이론',394),(1092,'최소 공통 조상',394),(1093,'최소 스패닝 트리',394),(1094,'병렬 이분 탐색',394),(1095,'트리',394),(1096,'다이나믹 프로그래밍',396),(1097,'그리디 알고리즘',396),(1098,'애드 혹',397),(1099,'수학',397),(1100,'정수론',397),(1101,'너비 우선 탐색',398),(1102,'데이크스트라',398),(1103,'그래프 이론',398),(1104,'그래프 탐색',398),(1105,'구현',398),(1106,'최단 경로',398),(1107,'애드 혹',399),(1108,'브루트포스 알고리즘',399),(1109,'수학',399),(1110,'런타임 전의 전처리',399),(1111,'애드 혹',400),(1112,'해 구성하기',400),(1113,'수학',400),(1114,'브루트포스 알고리즘',401),(1115,'수학',401),(1116,'확률론',401),(1117,'백트래킹',402),(1118,'브루트포스 알고리즘',402),(1119,'깊이 우선 탐색',402),(1120,'그래프 이론',402),(1121,'그래프 탐색',402),(1122,'수학',402),(1123,'확률론',402),(1124,'자료 구조',403),(1125,'연결 리스트',403),(1126,'스택',403),(1127,'수학',404),(1128,'사칙연산',405),(1129,'구현',405),(1130,'수학',405),(1131,'브루트포스 알고리즘',406),(1132,'비트마스킹',407),(1133,'다이나믹 프로그래밍',407),(1134,'비트필드를 이용한 다이나믹 프로그래밍',407),(1135,'포함 배제의 원리',407),(1136,'브루트포스 알고리즘',408),(1137,'구현',408),(1138,'문자열',408),(1139,'방향 비순환 그래프',409),(1140,'그래프 이론',409),(1141,'위상 정렬',409),(1142,'조합론',410),(1143,'다이나믹 프로그래밍',410),(1144,'수학',410),(1145,'그래프 이론',411),(1146,'최소 스패닝 트리',411),(1147,'문자열',411),(1148,'다이나믹 프로그래밍',412),(1149,'배낭 문제',412),(1150,'수학',412),(1151,'정수론',412),(1152,'소수 판정',412),(1153,'에라토스테네스의 체',412),(1154,'다이나믹 프로그래밍',413),(1155,'자료 구조',414),(1156,'그리디 알고리즘',414),(1157,'구현',414),(1158,'우선순위 큐',414),(1159,'시뮬레이션',414),(1160,'브루트포스 알고리즘',415),(1161,'수학',415),(1162,'정수론',415),(1163,'소수 판정',415),(1164,'에라토스테네스의 체',415),(1165,'애드 혹',416),(1166,'많은 조건 분기',416),(1167,'수학',416),(1168,'최대 유량',417),(1169,'최대 유량 최소 컷 정리',417),(1170,'브루트포스 알고리즘',418),(1171,'구현',418),(1172,'그리디 알고리즘',419),(1173,'정렬',419),(1174,'다이나믹 프로그래밍',420),(1175,'수학',421),(1176,'이분 탐색',422),(1177,'삼분 탐색',422),(1178,'자료 구조',423),(1179,'그리디 알고리즘',423),(1180,'정렬',423),(1181,'트리를 사용한 집합과 맵',423),(1182,'정렬',424),(1183,'문자열',424),(1184,'비트 집합',426),(1185,'브루트포스 알고리즘',426),(1186,'너비 우선 탐색',427),(1187,'기하학',427),(1188,'그래프 이론',427),(1189,'그래프 탐색',427),(1190,'수학',427),(1191,'정렬',428),(1192,'방향 비순환 그래프',429),(1193,'자료 구조',429),(1194,'그래프 이론',429),(1195,'우선순위 큐',429),(1196,'위상 정렬',429),(1197,'그리디 알고리즘',430),(1198,'수학',430),(1199,'두 포인터',430),(1200,'사칙연산',431),(1201,'구현',431),(1202,'수학',431),(1203,'기하학',432),(1204,'3차원 기하학',432),(1205,'수학',432),(1206,'브루트포스 알고리즘',433),(1207,'그리디 알고리즘',434),(1208,'수학',434),(1209,'브루트포스 알고리즘',435),(1210,'기하학',435),(1211,'그리디 알고리즘',436),(1212,'문자열',436),(1213,'브루트포스 알고리즘',437),(1214,'구현',437),(1215,'유클리드 호제법',438),(1216,'포함 배제의 원리',438),(1217,'수학',438),(1218,'정수론',438),(1219,'다이나믹 프로그래밍',439),(1220,'백트래킹',440),(1221,'브루트포스 알고리즘',440),(1222,'이분 매칭',441),(1223,'데이크스트라',442),(1224,'그래프 이론',442),(1225,'최단 경로',442),(1226,'데이크스트라',443),(1227,'다이나믹 프로그래밍',443),(1228,'그래프 이론',443),(1229,'최단 경로',443),(1230,'그리디 알고리즘',445),(1231,'수학',445),(1232,'정렬',445),(1233,'그리디 알고리즘',446),(1234,'정렬',446),(1235,'이분 탐색',447),(1236,'중간에서 만나기',447),(1237,'브루트포스 알고리즘',448),(1238,'많은 조건 분기',448),(1239,'누적 합',448),(1240,'구현',450),(1241,'그리디 알고리즘',452),(1242,'수학',453),(1243,'정수론',453),(1244,'소수 판정',453),(1245,'에라토스테네스의 체',453),(1246,'수학',454),(1247,'많은 조건 분기',456),(1248,'수학',456),(1249,'이분 탐색',457),(1250,'브루트포스 알고리즘',457),(1251,'누적 합',457),(1252,'그리디 알고리즘',458),(1253,'정렬',458),(1254,'다이나믹 프로그래밍',459),(1255,'누적 합',459),(1256,'다이나믹 프로그래밍',460),(1257,'자료 구조',461),(1258,'덱',461),(1259,'그리디 알고리즘',461),(1260,'자료 구조',463),(1261,'분리 집합',463),(1262,'그래프 이론',463),(1263,'그래프 탐색',463),(1264,'구현',463),(1265,'그리디 알고리즘',464),(1266,'백트래킹',466),(1267,'브루트포스 알고리즘',466),(1268,'다이나믹 프로그래밍',467),(1269,'그리디 알고리즘',467),(1270,'깊이 우선 탐색',468),(1271,'다이나믹 프로그래밍',468),(1272,'그래프 이론',468),(1273,'그래프 탐색',468),(1274,'강한 연결 요소',468),(1275,'너비 우선 탐색',470),(1276,'비트마스킹',470),(1277,'그래프 이론',470),(1278,'그래프 탐색',470),(1279,'그리디 알고리즘',471),(1280,'문자열',471),(1281,'구현',472),(1282,'브루트포스 알고리즘',473),(1283,'수학',473),(1284,'정수론',473),(1285,'이분 탐색',474),(1286,'매개 변수 탐색',474),(1287,'비트마스킹',476),(1288,'다이나믹 프로그래밍',476),(1289,'비트필드를 이용한 다이나믹 프로그래밍',476),(1290,'비트마스킹',477),(1291,'다이나믹 프로그래밍',477),(1292,'비트필드를 이용한 다이나믹 프로그래밍',477),(1293,'백트래킹',478),(1294,'백트래킹',479),(1295,'다이나믹 프로그래밍',479),(1296,'그리디 알고리즘',479),(1297,'수학',481),(1298,'두 포인터',481),(1299,'기하학',482),(1300,'정렬',482),(1301,'데이크스트라',483),(1302,'플로이드–워셜',483),(1303,'그래프 이론',483),(1304,'최단 경로',483),(1305,'브루트포스 알고리즘',484),(1306,'애드 혹',485),(1307,'많은 조건 분기',485),(1308,'다이나믹 프로그래밍',486),(1309,'그리디 알고리즘',486),(1310,'정렬',486),(1311,'브루트포스 알고리즘',487),(1312,'수학',487),(1313,'구현',488),(1314,'시뮬레이션',488),(1315,'조합론',489),(1316,'다이나믹 프로그래밍',489),(1317,'분할 정복을 이용한 거듭제곱',489),(1318,'수학',489),(1319,'모듈로 곱셈 역원',489),(1320,'정수론',489),(1321,'분할 정복',490),(1322,'그리디 알고리즘',490),(1323,'수학',490),(1324,'많은 조건 분기',491),(1325,'유클리드 호제법',491),(1326,'수학',491),(1327,'정수론',491),(1328,'다이나믹 프로그래밍',492),(1329,'백트래킹',494),(1330,'비트마스킹',494),(1331,'브루트포스 알고리즘',494),(1332,'조합론',494),(1333,'수학',494),(1334,'KMP',495),(1335,'문자열',495),(1336,'너비 우선 탐색',496),(1337,'자료 구조',496),(1338,'다이나믹 프로그래밍',496),(1339,'그래프 이론',496),(1340,'그래프 탐색',496),(1341,'해시를 사용한 집합과 맵',496),(1342,'문자열',496),(1343,'트리를 사용한 집합과 맵',496),(1344,'수학',497),(1345,'자료 구조',498),(1346,'해시를 사용한 집합과 맵',498),(1347,'파싱',498),(1348,'문자열',498),(1349,'트리를 사용한 집합과 맵',498),(1350,'백트래킹',499),(1351,'브루트포스 알고리즘',500),(1352,'데이크스트라',501),(1353,'그래프 이론',501),(1354,'최단 경로',501),(1355,'비트마스킹',502),(1356,'브루트포스 알고리즘',502),(1357,'그리디 알고리즘',502),(1358,'그래프 이론',503),(1359,'강한 연결 요소',503),(1360,'플로이드–워셜',504),(1361,'그래프 이론',504),(1362,'최단 경로',504),(1363,'이분 탐색',505),(1364,'그리디 알고리즘',505),(1365,'매개 변수 탐색',505),(1366,'다이나믹 프로그래밍',506),(1367,'브루트포스 알고리즘',507),(1368,'조합론',507),(1369,'기하학',507),(1370,'수학',507),(1371,'그리디 알고리즘',508),(1372,'브루트포스 알고리즘',509),(1373,'그리디 알고리즘',509),(1374,'문자열',509),(1375,'다이나믹 프로그래밍',510),(1376,'다이나믹 프로그래밍',511),(1377,'브루트포스 알고리즘',512),(1378,'그리디 알고리즘',512),(1379,'구현',512),(1380,'문자열',512),(1381,'방향 비순환 그래프',513),(1382,'다이나믹 프로그래밍',513),(1383,'그래프 이론',513),(1384,'위상 정렬',513),(1385,'자료 구조',514),(1386,'분할 정복',514),(1387,'세그먼트 트리',514),(1388,'정렬',514),(1389,'이분 매칭',515),(1390,'그리디 알고리즘',515),(1391,'다이나믹 프로그래밍',516),(1392,'게임 이론',516),(1393,'문자열',516),(1394,'깊이 우선 탐색',517),(1395,'다이나믹 프로그래밍',517),(1396,'그래프 이론',517),(1397,'그래프 탐색',517),(1398,'다이나믹 프로그래밍',518),(1399,'수학',518),(1400,'확률론',518),(1401,'브루트포스 알고리즘',519),(1402,'슬라이딩 윈도우',519),(1403,'브루트포스 알고리즘',520),(1404,'그래프 이론',520),(1405,'구현',521),(1406,'정렬',521),(1407,'너비 우선 탐색',522),(1408,'자료 구조',522),(1409,'그래프 이론',522),(1410,'그래프 탐색',522),(1411,'해시를 사용한 집합과 맵',522),(1412,'브루트포스 알고리즘',523),(1413,'구현',523),(1414,'수학',523),(1415,'브루트포스 알고리즘',524),(1416,'너비 우선 탐색',525),(1417,'다이나믹 프로그래밍',525),(1418,'그래프 이론',525),(1419,'그래프 탐색',525),(1420,'다이나믹 프로그래밍',526),(1421,'분할 정복을 이용한 거듭제곱',526),(1422,'수학',526),(1423,'백트래킹',527),(1424,'다이나믹 프로그래밍',527),(1425,'그리디 알고리즘',527),(1426,'구현',528),(1427,'시뮬레이션',528),(1428,'많은 조건 분기',529),(1429,'그리디 알고리즘',529),(1430,'분할 정복을 이용한 거듭제곱',530),(1431,'그래프 이론',530),(1432,'수학',530),(1433,'다이나믹 프로그래밍',531),(1434,'브루트포스 알고리즘',532),(1435,'다이나믹 프로그래밍',532),(1436,'배낭 문제',532),(1437,'최대 유량',533),(1438,'데이크스트라',534),(1439,'그래프 이론',534),(1440,'최단 경로',534),(1441,'조합론',535),(1442,'다이나믹 프로그래밍',535),(1443,'가우스 소거법',535),(1444,'선형대수학',535),(1445,'수학',535),(1446,'자료 구조',536),(1447,'트리',536),(1448,'트리를 사용한 집합과 맵',536),(1449,'수학',537),(1450,'그리디 알고리즘',538),(1451,'수학',538),(1452,'파싱',538),(1453,'문자열',538),(1454,'게임 이론',539),(1455,'스프라그–그런디 정리',539),(1456,'브루트포스 알고리즘',540),(1457,'문자열',540),(1458,'브루트포스 알고리즘',541),(1459,'자료 구조',541),(1460,'해시를 사용한 집합과 맵',541),(1461,'구현',541),(1462,'문자열',541),(1463,'해 구성하기',542),(1464,'그리디 알고리즘',542),(1465,'사칙연산',543),(1466,'수학',543),(1467,'구현',544),(1468,'시뮬레이션',544),(1469,'브루트포스 알고리즘',545),(1470,'그리디 알고리즘',545),(1471,'정렬',545),(1472,'브루트포스 알고리즘',546),(1473,'누적 합',546),(1474,'수학',547),(1475,'구현',547),(1476,'구현',548),(1477,'수학',548),(1478,'파싱',548),(1479,'시뮬레이션',548),(1480,'문자열',548),(1481,'백트래킹',549),(1482,'브루트포스 알고리즘',549),(1483,'순열 사이클 분할',549),(1484,'백트래킹',550),(1485,'구현',550),(1486,'조합론',551),(1487,'수학',551),(1488,'브루트포스 알고리즘',552),(1489,'다이나믹 프로그래밍',552),(1490,'수학',552),(1491,'정수론',552),(1492,'소수 판정',552),(1493,'가우스 소거법',553),(1494,'선형대수학',553),(1495,'수학',553),(1496,'이분 탐색',554),(1497,'포함 배제의 원리',554),(1498,'수학',554),(1499,'정수론',554),(1500,'자료 구조',555),(1501,'분리 집합',555),(1502,'기하학',555),(1503,'그래프 이론',555),(1504,'그래프 탐색',555),(1505,'선분 교차 판정',555),(1506,'너비 우선 탐색',556),(1507,'비트마스킹',556),(1508,'그래프 이론',556),(1509,'그래프 탐색',556),(1510,'애드 혹',557),(1511,'임의 정밀도 / 큰 수 연산',557),(1512,'이분 탐색',558),(1513,'매개 변수 탐색',558),(1514,'비트마스킹',559),(1515,'다이나믹 프로그래밍',559),(1516,'비트필드를 이용한 다이나믹 프로그래밍',559),(1517,'다이나믹 프로그래밍',560),(1518,'수학',561),(1519,'정수론',561),(1520,'유클리드 호제법',562),(1521,'수학',562),(1522,'정수론',562),(1523,'브루트포스 알고리즘',563),(1524,'구현',565),(1525,'수학',565),(1526,'많은 조건 분기',566),(1527,'기하학',566),(1528,'구현',566),(1529,'애드 혹',567),(1530,'구현',567),(1531,'수학',567),(1532,'중국인의 나머지 정리',568),(1533,'수학',568),(1534,'정수론',568),(1535,'이분 탐색',569),(1536,'자료 구조',569),(1537,'세그먼트 트리',569),(1538,'다이나믹 프로그래밍',570),(1539,'재귀',570),(1540,'이분 매칭',571),(1541,'이분 매칭',572),(1542,'브루트포스 알고리즘',573),(1543,'그리디 알고리즘',573),(1544,'정렬',573),(1545,'다이나믹 프로그래밍',574),(1546,'매개 변수 탐색',575),(1547,'너비 우선 탐색',577),(1548,'그래프 이론',577),(1549,'그래프 탐색',577),(1550,'구현',577),(1551,'많은 조건 분기',578),(1552,'다이나믹 프로그래밍',579),(1553,'구현',579),(1554,'배낭 문제',579),(1555,'0-1 너비 우선 탐색',581),(1556,'데이크스트라',581),(1557,'그래프 이론',581),(1558,'그래프 탐색',581),(1559,'최단 경로',581),(1560,'최대 유량',582),(1561,'최소 비용 최대 유량',582),(1562,'단절점과 단절선',583),(1563,'그래프 이론',583),(1564,'그래프 탐색',583),(1565,'그리디 알고리즘',584),(1566,'분할 정복',585),(1567,'다이나믹 프로그래밍',585),(1568,'재귀',585),(1569,'이분 탐색',587),(1570,'브루트포스 알고리즘',587),(1571,'수학',587),(1572,'오일러 경로',588),(1573,'그래프 이론',588),(1574,'구현',589),(1575,'시뮬레이션',589),(1576,'슬라이딩 윈도우',590),(1577,'문자열',590),(1578,'백트래킹',591),(1579,'다이나믹 프로그래밍',591),(1580,'깊이 우선 탐색',592),(1581,'그래프 이론',592),(1582,'그래프 탐색',592),(1583,'트리',592),(1584,'사칙연산',595),(1585,'수학',595),(1586,'정렬',596),(1587,'문자열',596),(1588,'너비 우선 탐색',597),(1589,'그래프 이론',597),(1590,'그래프 탐색',597),(1591,'애드 혹',598),(1592,'백트래킹',598),(1593,'그래프 이론',598),(1594,'그래프 탐색',598),(1595,'플로이드–워셜',599),(1596,'그래프 이론',599),(1597,'최단 경로',599),(1598,'비트마스킹',600),(1599,'다이나믹 프로그래밍',600),(1600,'비트필드를 이용한 다이나믹 프로그래밍',600),(1601,'게임 이론',600),(1602,'스프라그–그런디 정리',600),(1603,'기하학',601),(1604,'선분 교차 판정',601),(1605,'해싱',602),(1606,'라빈–카프',602),(1607,'문자열',602),(1608,'접미사 배열과 LCP 배열',602),(1609,'애드 혹',603),(1610,'많은 조건 분기',603),(1611,'수학',603),(1612,'다이나믹 프로그래밍',604),(1613,'수학',604),(1614,'그래프 이론',605),(1615,'강한 연결 요소',605),(1616,'위상 정렬',605),(1617,'방향 비순환 그래프',605),(1618,'브루트포스 알고리즘',606),(1619,'누적 합',606),(1620,'해 구성하기',608),(1621,'그래프 이론',608),(1622,'수학',609),(1623,'정수론',609),(1624,'플로이드–워셜',610),(1625,'그래프 이론',610),(1626,'최단 경로',610),(1627,'사칙연산',611),(1628,'많은 조건 분기',611),(1629,'구현',611),(1630,'수학',611),(1631,'자료 구조',612),(1632,'세그먼트 트리',612),(1633,'정렬',612),(1634,'오일러 경로',613),(1635,'그래프 이론',613),(1636,'값 / 좌표 압축',614),(1637,'구현',614),(1638,'스위핑',614),(1639,'이분 탐색',615),(1640,'브루트포스 알고리즘',615),(1641,'구현',615),(1642,'매개 변수 탐색',615),(1643,'브루트포스 알고리즘',616),(1644,'기하학',616),(1645,'자료 구조',617),(1646,'해시를 사용한 집합과 맵',617),(1647,'다이나믹 프로그래밍',618),(1648,'정렬',619),(1649,'문자열',619),(1650,'다이나믹 프로그래밍',620),(1651,'트리에서의 다이나믹 프로그래밍',620),(1652,'트리',620),(1653,'그리디 알고리즘',621),(1654,'정렬',621),(1655,'애드 혹',622),(1656,'브루트포스 알고리즘',622),(1657,'구현',622),(1658,'시뮬레이션',622),(1659,'자료 구조',623),(1660,'그래프 이론',623),(1661,'최소 공통 조상',623),(1662,'최소 스패닝 트리',623),(1663,'희소 배열',623),(1664,'트리',623),(1665,'게임 이론',624),(1666,'스프라그–그런디 정리',624),(1667,'다이나믹 프로그래밍',625),(1668,'그리디 알고리즘',625),(1669,'분할 정복을 이용한 거듭제곱',626),(1670,'수학',626),(1671,'수학',627),(1672,'정수론',627),(1673,'소수 판정',627),(1674,'에라토스테네스의 체',627),(1675,'조합론',628),(1676,'구현',628),(1677,'수학',628),(1678,'재귀',628),(1679,'구현',629),(1680,'수학',629),(1681,'정렬',629),(1682,'다이나믹 프로그래밍',630),(1683,'분할 정복',631),(1684,'트리',631),(1685,'트리 동형 사상',631),(1686,'애드 혹',632),(1687,'해 구성하기',632),(1688,'애드 혹',633),(1689,'그리디 알고리즘',633),(1690,'이분 탐색',634),(1691,'매개 변수 탐색',634),(1692,'다이나믹 프로그래밍',635),(1693,'브루트포스 알고리즘',636),(1694,'구현',636),(1695,'애드 혹',637),(1696,'조합론',639),(1697,'자료 구조',639),(1698,'분리 집합',639),(1699,'수학',639),(1700,'구현',640),(1701,'기댓값의 선형성',640),(1702,'수학',640),(1703,'확률론',640),(1704,'수학',641),(1705,'정수론',641),(1706,'소수 판정',641),(1707,'에라토스테네스의 체',641),(1708,'두 포인터',641),(1709,'다이나믹 프로그래밍',643),(1710,'재귀',643),(1711,'트리',643),(1712,'그래프 이론',644),(1713,'최소 스패닝 트리',644),(1714,'비트마스킹',645),(1715,'다이나믹 프로그래밍',645),(1716,'비트필드를 이용한 다이나믹 프로그래밍',645),(1717,'방향 비순환 그래프',646),(1718,'다이나믹 프로그래밍',646),(1719,'그래프 이론',646),(1720,'위상 정렬',646),(1721,'최대 유량',647),(1722,'최소 비용 최대 유량',647),(1723,'구현',649),(1724,'문자열',649),(1725,'비트마스킹',650),(1726,'브루트포스 알고리즘',650),(1727,'구현',650),(1728,'이분 탐색',651),(1729,'매개 변수 탐색',651),(1730,'자료 구조',652),(1731,'우선순위 큐',652),(1732,'기하학',653),(1733,'비트마스킹',654),(1734,'다이나믹 프로그래밍',654),(1735,'비트필드를 이용한 다이나믹 프로그래밍',654),(1736,'최대 유량',655),(1737,'다이나믹 프로그래밍',656),(1738,'그리디 알고리즘',656),(1739,'누적 합',656),(1740,'다이나믹 프로그래밍',657),(1741,'브루트포스 알고리즘',658),(1742,'정렬',658),(1743,'자료 구조',659),(1744,'재귀',659),(1745,'스택',659),(1746,'다이나믹 프로그래밍',660),(1747,'브루트포스 알고리즘',661),(1748,'다이나믹 프로그래밍',661),(1749,'구현',661),(1750,'수학',662),(1751,'정렬',662),(1752,'스위핑',662),(1753,'자료 구조',663),(1754,'다이나믹 프로그래밍',663),(1755,'세그먼트 트리',663),(1756,'스위핑',663),(1757,'자료 구조',664),(1758,'데이크스트라',664),(1759,'그래프 이론',664),(1760,'트리를 사용한 집합과 맵',664),(1761,'최단 경로',664),(1762,'구현',665),(1763,'수학',666),(1764,'조합론',667),(1765,'다이나믹 프로그래밍',667),(1766,'수학',667),(1767,'이분 매칭',668),(1768,'구현',669),(1769,'시뮬레이션',669),(1770,'문자열',669),(1771,'구현',670),(1772,'수학',670),(1773,'자료 구조',672),(1774,'다차원 세그먼트 트리',672),(1775,'세그먼트 트리',672),(1776,'수학',673),(1777,'다이나믹 프로그래밍',674),(1778,'수학',675),(1779,'정렬',675),(1780,'너비 우선 탐색',676),(1781,'다이나믹 프로그래밍',676),(1782,'그래프 이론',676),(1783,'그래프 탐색',676),(1784,'구현',677),(1785,'시뮬레이션',677),(1786,'브루트포스 알고리즘',678),(1787,'구현',678),(1788,'너비 우선 탐색',679),(1789,'그래프 이론',679),(1790,'그래프 탐색',679),(1791,'유클리드 호제법',681),(1792,'수학',681),(1793,'정수론',681),(1794,'다이나믹 프로그래밍',682),(1795,'그리디 알고리즘',682),(1796,'수학',682),(1797,'너비 우선 탐색',683),(1798,'기하학',683),(1799,'그래프 이론',683),(1800,'그래프 탐색',683),(1801,'브루트포스 알고리즘',684),(1802,'누적 합',684),(1803,'기하학',685),(1804,'선분 교차 판정',685),(1805,'오목 다각형 내부의 점 판정',685),(1806,'그리디 알고리즘',686),(1807,'정렬',686),(1808,'스위핑',686),(1809,'해 구성하기',687),(1810,'자료 구조',687),(1811,'수학',687),(1812,'순열 사이클 분할',687),(1813,'희소 배열',687),(1814,'다이나믹 프로그래밍',688),(1815,'비트마스킹',689),(1816,'다이나믹 프로그래밍',689),(1817,'비트필드를 이용한 다이나믹 프로그래밍',689),(1818,'다이나믹 프로그래밍',690),(1819,'트리에서의 다이나믹 프로그래밍',690),(1820,'트리',690),(1821,'구현',691),(1822,'다이나믹 프로그래밍',692),(1823,'너비 우선 탐색',694),(1824,'그래프 이론',694),(1825,'그래프 탐색',694),(1826,'다이나믹 프로그래밍',696),(1827,'수학',696),(1828,'그리디 알고리즘',697),(1829,'KMP',698),(1830,'문자열',698),(1831,'데이크스트라',699),(1832,'그래프 이론',699),(1833,'최단 경로',699),(1834,'사칙연산',700),(1835,'구현',700),(1836,'수학',700),(1837,'비트마스킹',701),(1838,'브루트포스 알고리즘',701),(1839,'구현',703),(1840,'파싱',703),(1841,'정렬',703),(1842,'문자열',703),(1843,'너비 우선 탐색',704),(1844,'이분 그래프',704),(1845,'깊이 우선 탐색',704),(1846,'그래프 이론',704),(1847,'그래프 탐색',704),(1848,'볼록 껍질',705),(1849,'기하학',705),(1850,'애드 혹',706),(1851,'기하학',706),(1852,'구현',706),(1853,'피타고라스 정리',706),(1854,'구현',707),(1855,'파싱',707),(1856,'문자열',707),(1857,'브루트포스 알고리즘',708),(1858,'기하학',708),(1859,'피타고라스 정리',708),(1860,'수학',709),(1861,'사칙연산',709),(1862,'구현',710),(1863,'시뮬레이션',710),(1864,'자료 구조',711),(1865,'그리디 알고리즘',711),(1866,'우선순위 큐',711),(1867,'많은 조건 분기',712),(1868,'수학',712),(1869,'자료 구조',713),(1870,'분리 집합',713),(1871,'구현',714),(1872,'문자열',714),(1873,'데이크스트라',715),(1874,'플로이드–워셜',715),(1875,'그래프 이론',715),(1876,'최단 경로',715),(1877,'조합론',716),(1878,'다이나믹 프로그래밍',716),(1879,'수학',716),(1880,'백트래킹',717),(1881,'브루트포스 알고리즘',717),(1882,'구현',717),(1883,'조합론',718),(1884,'구현',718),(1885,'수학',718),(1886,'이분 탐색',719),(1887,'브루트포스 알고리즘',719),(1888,'정렬',719),(1889,'너비 우선 탐색',720),(1890,'그래프 이론',720),(1891,'그래프 탐색',720),(1892,'자료 구조',721),(1893,'분할 정복',721),(1894,'세그먼트 트리',721),(1895,'스택',721),(1896,'너비 우선 탐색',722),(1897,'그래프 이론',722),(1898,'그래프 탐색',722),(1899,'다이나믹 프로그래밍',723),(1900,'그리디 알고리즘',723),(1901,'정렬',723),(1902,'이분 탐색',724),(1903,'브루트포스 알고리즘',724),(1904,'자료 구조',724),(1905,'수학',724),(1906,'백트래킹',725),(1907,'브루트포스 알고리즘',725),(1908,'구현',726),(1909,'시뮬레이션',726),(1910,'사칙연산',727),(1911,'수학',727),(1912,'자료 구조',728),(1913,'기하학',728),(1914,'선분 교차 판정',728),(1915,'정렬',728),(1916,'트리를 사용한 집합과 맵',728),(1917,'깊이 우선 탐색',729),(1918,'그래프 이론',729),(1919,'그래프 탐색',729),(1920,'단절점과 단절선',730),(1921,'그래프 이론',730),(1922,'최소 공통 조상',730),(1923,'트리',730),(1924,'유클리드 호제법',731),(1925,'수학',731),(1926,'정수론',731),(1927,'그리디 알고리즘',732),(1928,'다이나믹 프로그래밍',733),(1929,'벨만–포드',734),(1930,'그래프 이론',734),(1931,'최단 경로',734),(1932,'2-sat',735),(1933,'그래프 이론',735),(1934,'강한 연결 요소',735),(1935,'비트마스킹',736),(1936,'수학',736),(1937,'자료 구조',737),(1938,'분리 집합',737),(1939,'그래프 이론',737),(1940,'그래프 탐색',737),(1941,'비트마스킹',738),(1942,'조합론',738),(1943,'다이나믹 프로그래밍',738),(1944,'비트필드를 이용한 다이나믹 프로그래밍',738),(1945,'그래프 이론',738),(1946,'그래프 탐색',738),(1947,'수학',738),(1948,'너비 우선 탐색',739),(1949,'깊이 우선 탐색',739),(1950,'그래프 이론',739),(1951,'그래프 탐색',739),(1952,'많은 조건 분기',740),(1953,'그리디 알고리즘',740),(1954,'정렬',740),(1955,'이분 탐색',741),(1956,'최대 유량',741),(1957,'플로이드–워셜',741),(1958,'그래프 이론',741),(1959,'최단 경로',741),(1960,'다이나믹 프로그래밍',742),(1961,'분할 정복을 이용한 거듭제곱',742),(1962,'수학',742),(1963,'브루트포스 알고리즘',743),(1964,'수학',743),(1965,'정수론',743),(1966,'소수 판정',743),(1967,'에라토스테네스의 체',743),(1968,'구현',744),(1969,'수학',744),(1970,'브루트포스 알고리즘',745),(1971,'다이나믹 프로그래밍',745),(1972,'누적 합',745),(1973,'다이나믹 프로그래밍',746),(1974,'유클리드 호제법',746),(1975,'배낭 문제',746),(1976,'수학',746),(1977,'정수론',746),(1978,'비트마스킹',747),(1979,'다이나믹 프로그래밍',747),(1980,'해싱',747),(1981,'다이나믹 프로그래밍',748),(1982,'정렬',748),(1983,'데이크스트라',749),(1984,'그래프 이론',749),(1985,'최단 경로',749),(1986,'비트마스킹',750),(1987,'조합론',750),(1988,'다이나믹 프로그래밍',750),(1989,'비트필드를 이용한 다이나믹 프로그래밍',750),(1990,'수학',750),(1991,'정렬',751),(1992,'문자열',751),(1993,'구현',752),(1994,'다이나믹 프로그래밍',753),(1995,'그리디 알고리즘',754),(1996,'정렬',754),(1997,'백트래킹',755),(1998,'브루트포스 알고리즘',755),(1999,'조합론',755),(2000,'수학',755),(2001,'이분 매칭',756),(2002,'최소 공통 조상',757),(2003,'트리',757),(2004,'이분 탐색',758),(2005,'그래프 이론',758),(2006,'평면 그래프',758),(2007,'작은 집합에서 큰 집합으로 합치는 테크닉',758),(2008,'자료 구조',759),(2009,'분리 집합',759),(2010,'다이나믹 프로그래밍',759),(2011,'트리에서의 다이나믹 프로그래밍',759),(2012,'그리디 알고리즘',759),(2013,'트리',759),(2014,'자료 구조',760),(2015,'해시를 사용한 집합과 맵',760),(2016,'정렬',760),(2017,'문자열',760),(2018,'자료 구조',761),(2019,'분리 집합',761),(2020,'그래프 이론',761),(2021,'그래프 탐색',761),(2022,'방향 비순환 그래프',762),(2023,'자료 구조',762),(2024,'그래프 이론',762),(2025,'우선순위 큐',762),(2026,'위상 정렬',762),(2027,'조합론',763),(2028,'다이나믹 프로그래밍',763),(2029,'수학',763),(2030,'기하학',764),(2031,'구현',765),(2032,'수학',765),(2033,'문자열',765),(2034,'많은 조건 분기',766),(2035,'수학',766),(2036,'밀러–라빈 소수 판별법',766),(2037,'정수론',766),(2038,'폴라드 로',766),(2039,'소수 판정',766),(2040,'자료 구조',767),(2041,'분리 집합',767),(2042,'스택',767),(2043,'다이나믹 프로그래밍',768),(2044,'트리에서의 다이나믹 프로그래밍',768),(2045,'배낭 문제',768),(2046,'트리',768),(2047,'브루트포스 알고리즘',769),(2048,'구현',769),(2049,'수학',769),(2050,'그래프 이론',770),(2051,'최소 스패닝 트리',770),(2052,'브루트포스 알고리즘',771),(2053,'구현',771),(2054,'이분 탐색',773),(2055,'자료 구조',773),(2056,'세그먼트 트리',773),(2057,'자료 구조',774),(2058,'분리 집합',774),(2059,'그래프 이론',774),(2060,'그래프 탐색',774),(2061,'구현',775),(2062,'파싱',775),(2063,'문자열',775),(2064,'분할 정복',776),(2065,'재귀',776),(2066,'자료 구조',777),(2067,'그리디 알고리즘',777),(2068,'우선순위 큐',777),(2069,'백트래킹',778),(2070,'브루트포스 알고리즘',778),(2071,'구현',778),(2072,'수학',778),(2073,'많은 조건 분기',779),(2074,'그리디 알고리즘',779),(2075,'구현',779),(2076,'애드 혹',780),(2077,'백트래킹',781),(2078,'다이나믹 프로그래밍',781),(2079,'수학',781),(2080,'KMP',782),(2081,'문자열',782),(2082,'다이나믹 프로그래밍',783),(2083,'KMP',783),(2084,'문자열',783),(2085,'다이나믹 프로그래밍',784),(2086,'수학',784),(2087,'그리디 알고리즘',785),(2088,'수학',785),(2089,'구현',786),(2090,'수학',786),(2091,'자료 구조',787),(2092,'구현',787),(2093,'큐',787),(2094,'시뮬레이션',787),(2095,'포함 배제의 원리',788),(2096,'수학',788),(2097,'뫼비우스 반전 공식',788),(2098,'정수론',788),(2099,'누적 합',788),(2100,'임의 정밀도 / 큰 수 연산',789),(2101,'다이나믹 프로그래밍',789),(2102,'너비 우선 탐색',790),(2103,'그래프 이론',790),(2104,'그래프 탐색',790),(2105,'구현',790),(2106,'다이나믹 프로그래밍',791),(2107,'자료 구조',792),(2108,'해시를 사용한 집합과 맵',792),(2109,'누적 합',792),(2110,'정렬',792),(2111,'기하학',793),(2112,'3차원 기하학',793),(2113,'백트래킹',794),(2114,'이분 탐색',795),(2115,'데이크스트라',795),(2116,'그래프 이론',795),(2117,'매개 변수 탐색',795),(2118,'최단 경로',795),(2119,'브루트포스 알고리즘',796),(2120,'다이나믹 프로그래밍',796),(2121,'배낭 문제',796),(2122,'애드 혹',797),(2123,'분할 정복',797),(2124,'방향 비순환 그래프',798),(2125,'그래프 이론',798),(2126,'그래프 탐색',798),(2127,'위상 정렬',798),(2128,'다이나믹 프로그래밍',799),(2129,'다이나믹 프로그래밍',800),(2130,'트리에서의 다이나믹 프로그래밍',800),(2131,'배낭 문제',800),(2132,'트리',800),(2133,'누적 합',801),(2134,'두 포인터',801),(2135,'이분 탐색',802),(2136,'수학',802),(2137,'매개 변수 탐색',802),(2138,'그리디 알고리즘',803),(2139,'트리',803),(2140,'구현',804),(2141,'자료 구조',805),(2142,'데이크스트라',805),(2143,'기하학',805),(2144,'그래프 이론',805),(2145,'최단 경로',805),(2146,'그리디 알고리즘',806),(2147,'구현',806),(2148,'문자열',806),(2149,'브루트포스 알고리즘',807),(2150,'수학',807),(2151,'애드 혹',808),(2152,'다이나믹 프로그래밍',809),(2153,'트리에서의 다이나믹 프로그래밍',809),(2154,'트리',809),(2155,'브루트포스 알고리즘',811),(2156,'수학',811),(2157,'정수론',811),(2158,'그리디 알고리즘',812),(2159,'구현',812),(2160,'가장 긴 증가하는 부분 수열: O(n log n)',813),(2161,'비트마스킹',814),(2162,'다이나믹 프로그래밍',814),(2163,'비트필드를 이용한 다이나믹 프로그래밍',814),(2164,'구현',814),(2165,'조합론',815),(2166,'다이나믹 프로그래밍',815),(2167,'수학',815),(2168,'브루트포스 알고리즘',816),(2169,'수학',816),(2170,'자료 구조',817),(2171,'해시를 사용한 집합과 맵',817),(2172,'정렬',817),(2173,'트리를 사용한 집합과 맵',817),(2174,'다이나믹 프로그래밍',818),(2175,'이분 매칭',819),(2176,'해 구성하기',820),(2177,'그리디 알고리즘',820),(2178,'구현',820),(2179,'자료 구조',821),(2180,'그리디 알고리즘',821),(2181,'우선순위 큐',821),(2182,'정렬',821),(2183,'브루트포스 알고리즘',822),(2184,'기하학',822),(2185,'너비 우선 탐색',823),(2186,'그래프 이론',823),(2187,'그래프 탐색',823),(2188,'비트마스킹',824),(2189,'해 구성하기',824),(2190,'구현',824),(2191,'수학',824),(2192,'볼록 껍질',825),(2193,'분할 정복',825),(2194,'기하학',825),(2195,'회전하는 캘리퍼스',825),(2196,'스위핑',825),(2197,'값 / 좌표 압축',826),(2198,'자료 구조',826),(2199,'스택',826),(2200,'비트마스킹',827),(2201,'다이나믹 프로그래밍',827),(2202,'비트필드를 이용한 다이나믹 프로그래밍',827),(2203,'수학',827),(2204,'그래프 이론',828),(2205,'최소 스패닝 트리',828),(2206,'수학',829),(2207,'자료 구조',830),(2208,'덱',830),(2209,'구현',830),(2210,'시뮬레이션',830),(2211,'다이나믹 프로그래밍',831),(2212,'트리에서의 다이나믹 프로그래밍',831),(2213,'트리',831),(2214,'임의 정밀도 / 큰 수 연산',832),(2215,'브루트포스 알고리즘',832),(2216,'수학',832),(2217,'정렬',833),(2218,'이분 탐색',834),(2219,'다이나믹 프로그래밍',834),(2220,'트리에서의 다이나믹 프로그래밍',834),(2221,'매개 변수 탐색',834),(2222,'트리',834),(2223,'백트래킹',835),(2224,'춤추는 링크',835),(2225,'크누스 X',835),(2226,'이분 탐색',836),(2227,'데이크스트라',836),(2228,'최대 유량',836),(2229,'그래프 이론',836),(2230,'최대 유량 최소 컷 정리',836),(2231,'최단 경로',836),(2232,'게임 이론',837),(2233,'스프라그–그런디 정리',837),(2234,'수학',838),(2235,'정수론',838),(2236,'소수 판정',838),(2237,'에라토스테네스의 체',838),(2238,'그래프 이론',840),(2239,'수학',840),(2240,'순열 사이클 분할',840),(2241,'강한 연결 요소',840),(2242,'해 구성하기',841),(2243,'다이나믹 프로그래밍',842),(2244,'그래프 이론',842),(2245,'정렬',842),(2246,'데이크스트라',843),(2247,'분할 정복',843),(2248,'그래프 이론',843),(2249,'최단 경로',843),(2250,'이분 탐색',844),(2251,'자료 구조',844),(2252,'세그먼트 트리',844),(2253,'유클리드 호제법',845),(2254,'수학',845),(2255,'정수론',845),(2256,'그리디 알고리즘',846),(2257,'순열 사이클 분할',846),(2258,'비트마스킹',847),(2259,'다이나믹 프로그래밍',847),(2260,'비트필드를 이용한 다이나믹 프로그래밍',847),(2261,'미적분학',848),(2262,'기하학',848),(2263,'3차원 기하학',848),(2264,'구현',848),(2265,'수학',848),(2266,'자료 구조',849),(2267,'데이크스트라',849),(2268,'그래프 이론',849),(2269,'우선순위 큐',849),(2270,'최단 경로',849),(2271,'구현',850),(2272,'문자열',850),(2273,'다이나믹 프로그래밍',851),(2274,'문자열',851),(2275,'너비 우선 탐색',852),(2276,'데이크스트라',852),(2277,'다이나믹 프로그래밍',852),(2278,'그래프 이론',852),(2279,'그래프 탐색',852),(2280,'최단 경로',852),(2281,'기하학',853),(2282,'수학',853),(2283,'정렬',853),(2284,'볼록 껍질을 이용한 최적화',854),(2285,'자료 구조',854),(2286,'세그먼트 트리',854),(2287,'다이나믹 프로그래밍',855),(2288,'기하학',855),(2289,'수학',857),(2290,'정수론',857),(2291,'자료 구조',858),(2292,'스택',858),(2293,'사칙연산',859),(2294,'구현',859),(2295,'수학',859),(2296,'문자열',859),(2297,'벨만–포드',860),(2298,'그래프 이론',860),(2299,'최단 경로',860),(2300,'다이나믹 프로그래밍',861),(2301,'누적 합',861),(2302,'정렬',861),(2303,'이분 매칭',862),(2304,'깊이 우선 탐색',863),(2305,'다이나믹 프로그래밍',863),(2306,'트리에서의 다이나믹 프로그래밍',863),(2307,'그래프 이론',863),(2308,'그래프 탐색',863),(2309,'그리디 알고리즘',863),(2310,'트리',863),(2311,'구현',866),(2312,'문자열',866),(2313,'그리디 알고리즘',867),(2314,'구현',867),(2315,'문자열',867),(2316,'기하학',868),(2317,'자료 구조',869),(2318,'스택',869),(2319,'다이나믹 프로그래밍',870),(2320,'구현',870),(2321,'기하학',871),(2322,'구현',871),(2323,'수학',871),(2324,'시뮬레이션',871),(2325,'많은 조건 분기',872),(2326,'그리디 알고리즘',872),(2327,'수학',872),(2328,'정수론',872),(2329,'많은 조건 분기',873),(2330,'해 구성하기',873),(2331,'트리',873),(2332,'기하학',874),(2333,'선분 교차 판정',874),(2334,'오목 다각형 내부의 점 판정',874),(2335,'그리디 알고리즘',876),(2336,'이분 탐색',877),(2337,'수학',877),(2338,'정수론',877),(2339,'소수 판정',877),(2340,'에라토스테네스의 체',877),(2341,'많은 조건 분기',878),(2342,'데이크스트라',878),(2343,'그래프 이론',878),(2344,'그래프 탐색',878),(2345,'최소 공통 조상',878),(2346,'누적 합',878),(2347,'최단 경로',878),(2348,'트리',878),(2349,'데이크스트라',879),(2350,'다이나믹 프로그래밍',879),(2351,'그래프 이론',879),(2352,'최단 경로',879),(2353,'애드 혹',880),(2354,'그리디 알고리즘',880),(2355,'너비 우선 탐색',881),(2356,'이분 탐색',881),(2357,'이분 매칭',881),(2358,'그래프 이론',881),(2359,'그래프 탐색',881),(2360,'비트마스킹',882),(2361,'브루트포스 알고리즘',882),(2362,'너비 우선 탐색',883),(2363,'그래프 이론',883),(2364,'그래프 탐색',883),(2365,'구현',883),(2366,'방향 비순환 그래프',884),(2367,'자료 구조',884),(2368,'그래프 이론',884),(2369,'위상 정렬',884),(2370,'다이나믹 프로그래밍',885),(2371,'분할 정복',886),(2372,'수학',886),(2373,'조합론',887),(2374,'다이나믹 프로그래밍',887),(2375,'수학',887),(2376,'브루트포스 알고리즘',888),(2377,'KMP',888),(2378,'문자열',888),(2379,'기하학',889),(2380,'구현',889),(2381,'수학',889),(2382,'브루트포스 알고리즘',890),(2383,'구현',890),(2384,'정렬',890),(2385,'그래프 이론',891),(2386,'그래프 탐색',891),(2387,'구현',891),(2388,'너비 우선 탐색',892),(2389,'자료 구조',892),(2390,'그래프 이론',892),(2391,'그래프 탐색',892),(2392,'해시를 사용한 집합과 맵',892),(2393,'문자열',892),(2394,'그리디 알고리즘',893),(2395,'그리디 알고리즘',895),(2396,'정렬',895),(2397,'파싱',896),(2398,'문자열',896),(2399,'이분 탐색',897),(2400,'기하학',897),(2401,'수학',897),(2402,'매개 변수 탐색',897),(2403,'삼분 탐색',897),(2404,'다이나믹 프로그래밍',898),(2405,'자료 구조',899),(2406,'구현',899),(2407,'비트마스킹',900),(2408,'브루트포스 알고리즘',900),(2409,'분할 정복',900),(2410,'다이나믹 프로그래밍',900),(2411,'비트필드를 이용한 다이나믹 프로그래밍',900),(2412,'브루트포스 알고리즘',901),(2413,'구현',901),(2414,'파싱',901),(2415,'문자열',901),(2416,'조합론',902),(2417,'분할 정복을 이용한 거듭제곱',902),(2418,'수학',902),(2419,'이분 탐색',903),(2420,'볼록 껍질을 이용한 최적화',903),(2421,'그래프 이론',903),(2422,'그래프 탐색',903),(2423,'가우스 소거법',904),(2424,'선형대수학',904),(2425,'수학',904),(2426,'그리디 알고리즘',905),(2427,'정렬',905),(2428,'스위핑',905),(2429,'다이나믹 프로그래밍',906),(2430,'구현',907),(2431,'임의 정밀도 / 큰 수 연산',908),(2432,'재귀',908),(2433,'다이나믹 프로그래밍',909),(2434,'데이크스트라',910),(2435,'그래프 이론',910),(2436,'최단 경로',910),(2437,'구현',911),(2438,'시뮬레이션',911),(2439,'자료 구조',912),(2440,'스택',912),(2441,'구현',913),(2442,'문자열',913),(2443,'이분 탐색',914),(2444,'자료 구조',914),(2445,'정렬',914),(2446,'링크/컷 트리',915),(2447,'탑 트리',915),(2448,'트리',915),(2449,'그래프 이론',916),(2450,'최소 스패닝 트리',916),(2451,'구현',917),(2452,'수학',917),(2453,'많은 조건 분기',918),(2454,'기하학',918),(2455,'구현',918),(2456,'피타고라스 정리',918),(2457,'너비 우선 탐색',919),(2458,'깊이 우선 탐색',919),(2459,'그래프 이론',919),(2460,'그래프 탐색',919),(2461,'자료 구조',920),(2462,'우선순위 큐',920),(2463,'수학',922),(2464,'정수론',922),(2465,'소수 판정',922),(2466,'에라토스테네스의 체',922),(2467,'많은 조건 분기',923),(2468,'구현',923),(2469,'수학',923),(2470,'그리디 알고리즘',924),(2471,'정렬',924),(2472,'다이나믹 프로그래밍',925),(2473,'자료 구조',926),(2474,'우선순위 큐',926),(2475,'스위핑',926),(2476,'트리를 사용한 집합과 맵',926),(2477,'유클리드 호제법',927),(2478,'수학',927),(2479,'정수론',927),(2480,'자료 구조',928),(2481,'스택',928),(2482,'고속 푸리에 변환',929),(2483,'수학',929),(2484,'정수론',929),(2485,'깊이 우선 탐색',930),(2486,'다이나믹 프로그래밍',930),(2487,'그래프 이론',930),(2488,'그래프 탐색',930),(2489,'너비 우선 탐색',931),(2490,'그래프 이론',931),(2491,'그래프 탐색',931),(2492,'구현',931),(2493,'너비 우선 탐색',932),(2494,'이분 탐색',932),(2495,'자료 구조',932),(2496,'분리 집합',932),(2497,'그래프 이론',932),(2498,'그래프 탐색',932),(2499,'정렬',933),(2500,'두 포인터',933),(2501,'백트래킹',934),(2502,'너비 우선 탐색',934),(2503,'브루트포스 알고리즘',934),(2504,'조합론',934),(2505,'그래프 이론',934),(2506,'그래프 탐색',934),(2507,'수학',934),(2508,'구현',935),(2509,'수학',935),(2510,'파싱',935),(2511,'시뮬레이션',935),(2512,'문자열',935),(2513,'다이나믹 프로그래밍',936),(2514,'배낭 문제',936),(2515,'너비 우선 탐색',937),(2516,'그래프 이론',937),(2517,'그래프 탐색',937),(2518,'최소 스패닝 트리',937),(2519,'정렬',938),(2520,'스위핑',938),(2521,'그리디 알고리즘',939),(2522,'정렬',939),(2523,'조합론',940),(2524,'다이나믹 프로그래밍',940),(2525,'수학',940),(2526,'방향 비순환 그래프',941),(2527,'그래프 이론',941),(2528,'그래프 탐색',941),(2529,'위상 정렬',941),(2530,'다이나믹 프로그래밍',942),(2531,'트리에서의 다이나믹 프로그래밍',942),(2532,'트리',942),(2533,'수학',944),(2534,'구현',945),(2535,'수학',945),(2536,'시뮬레이션',945),(2537,'너비 우선 탐색',946),(2538,'이분 그래프',946),(2539,'깊이 우선 탐색',946),(2540,'그래프 이론',946),(2541,'그래프 탐색',946),(2542,'브루트포스 알고리즘',947),(2543,'다이나믹 프로그래밍',948),(2544,'플로이드–워셜',949),(2545,'그래프 이론',949),(2546,'최단 경로',949),(2547,'애드 혹',950),(2548,'수학',950),(2549,'다이나믹 프로그래밍',951),(2550,'문자열',951),(2551,'많은 조건 분기',952),(2552,'수학',952),(2553,'자료 구조',953),(2554,'최대 유량',953),(2555,'그리디 알고리즘',953),(2556,'정렬',953),(2557,'임의 정밀도 / 큰 수 연산',954),(2558,'구현',954),(2559,'수학',954),(2560,'파싱',954),(2561,'문자열',954),(2562,'utf-8 입력 처리',954),(2563,'너비 우선 탐색',955),(2564,'그래프 이론',955),(2565,'그래프 탐색',955),(2566,'수학',955),(2567,'정수론',955),(2568,'소수 판정',955),(2569,'에라토스테네스의 체',955),(2570,'수학',956),(2571,'다이나믹 프로그래밍',957),(2572,'자료 구조',958),(2573,'구현',958),(2574,'큐',958),(2575,'시뮬레이션',958),(2576,'깊이 우선 탐색',959),(2577,'그래프 이론',959),(2578,'그래프 탐색',959),(2579,'트리',959),(2580,'브루트포스 알고리즘',961),(2581,'그리디 알고리즘',961),(2582,'구현',961),(2583,'문자열',961),(2584,'다이나믹 프로그래밍',962),(2585,'트리',963),(2586,'자료 구조',964),(2587,'해시를 사용한 집합과 맵',964),(2588,'구현',964),(2589,'문자열',964),(2590,'이분 탐색',966),(2591,'가장 긴 증가하는 부분 수열: O(n log n)',966),(2592,'수학',967),(2593,'정수론',967),(2594,'자료 구조',968),(2595,'분리 집합',968),(2596,'그래프 이론',968),(2597,'그래프 탐색',968),(2598,'브루트포스 알고리즘',969),(2599,'구현',969),(2600,'수학',969),(2601,'소수 판정',970),(2602,'정수론',970),(2603,'수학',970),(2604,'임의 정밀도 / 큰 수 연산',971),(2605,'수학',971),(2606,'브루트포스 알고리즘',972),(2607,'구현',972),(2608,'수학',972),(2609,'너비 우선 탐색',973),(2610,'이분 탐색',973),(2611,'그래프 이론',973),(2612,'그래프 탐색',973),(2613,'다이나믹 프로그래밍',974),(2614,'배낭 문제',974),(2615,'다이나믹 프로그래밍',975),(2616,'브루트포스 알고리즘',976),(2617,'문자열',976),(2618,'구현',977),(2619,'백트래킹',978),(2620,'깊이 우선 탐색',978),(2621,'그래프 이론',978),(2622,'그래프 탐색',978),(2623,'다이나믹 프로그래밍',979),(2624,'자료 구조',980),(2625,'분할 정복',980),(2626,'누적 합',980),(2627,'세그먼트 트리',980),(2628,'스택',980),(2629,'수학',981),(2630,'정수론',981),(2631,'소수 판정',981),(2632,'에라토스테네스의 체',981),(2633,'재귀',982),(2634,'트리',982),(2635,'분할 정복',983),(2636,'재귀',983),(2637,'다이나믹 프로그래밍',984),(2638,'중간에서 만나기',984),(2639,'이분 탐색',985),(2640,'자료 구조',985),(2641,'다이나믹 프로그래밍',985),(2642,'정렬',985),(2643,'구현',987),(2644,'구현',988),(2645,'수학',988),(2646,'시뮬레이션',988),(2647,'브루트포스 알고리즘',989),(2648,'자료 구조',989),(2649,'분할 정복',989),(2650,'해시를 사용한 집합과 맵',989),(2651,'재귀',989),(2652,'트리',989),(2653,'자료 구조',990),(2654,'다이나믹 프로그래밍',991),(2655,'그리디 알고리즘',991),(2656,'배낭 문제',991),(2657,'너비 우선 탐색',992),(2658,'비트마스킹',992),(2659,'그래프 이론',992),(2660,'그래프 탐색',992),(2661,'자료 구조',993),(2662,'해시를 사용한 집합과 맵',993),(2663,'구현',993),(2664,'문자열',993),(2665,'브루트포스 알고리즘',994),(2666,'누적 합',994),(2667,'두 포인터',994),(2668,'수학',995),(2669,'정수론',995),(2670,'브루트포스 알고리즘',996),(2671,'많은 조건 분기',996),(2672,'다이나믹 프로그래밍',996),(2673,'기하학',996),(2674,'선분 교차 판정',996),(2675,'수학',996),(2676,'재귀',996),(2677,'자료 구조',997),(2678,'해시를 사용한 집합과 맵',997),(2679,'구현',997),(2680,'파싱',997),(2681,'정렬',997),(2682,'문자열',997),(2683,'애드 혹',998),(2684,'브루트포스 알고리즘',998),(2685,'자료 구조',998),(2686,'수학',998),(2687,'정렬',998),(2688,'다이나믹 프로그래밍',999),(2689,'그래프 이론',999),(2690,'해 구성하기',1000),(2691,'그리디 알고리즘',1000),(2692,'구현',1000),(2693,'사칙연산',1001),(2694,'수학',1001),(2695,'다이나믹 프로그래밍',1002),(2696,'그리디 알고리즘',1003),(2697,'정렬',1003),(2698,'자료 구조',1004),(2699,'분리 집합',1004),(2700,'기하학',1004),(2701,'선분 교차 판정',1004),(2702,'자료 구조',1005),(2703,'수학',1005),(2704,'정수론',1005),(2705,'우선순위 큐',1005),(2706,'자료 구조',1006),(2707,'해시를 사용한 집합과 맵',1006),(2708,'누적 합',1006),(2709,'트리를 사용한 집합과 맵',1006),(2710,'브루트포스 알고리즘',1007),(2711,'구현',1007),(2712,'시뮬레이션',1007),(2713,'기하학',1008),(2714,'구현',1008),(2715,'스위핑',1008),(2716,'수학',1009),(2717,'두 포인터',1009),(2718,'깊이 우선 탐색',1010),(2719,'기하학',1010),(2720,'그래프 이론',1010),(2721,'그래프 탐색',1010),(2722,'선분 교차 판정',1010),(2723,'해싱',1011),(2724,'문자열',1011),(2725,'너비 우선 탐색',1012),(2726,'그래프 이론',1012),(2727,'그래프 탐색',1012),(2728,'이분 탐색',1013),(2729,'기하학',1013),(2730,'수학',1013),(2731,'피타고라스 정리',1013),(2732,'백트래킹',1014),(2733,'수학',1014),(2734,'정수론',1014),(2735,'소수 판정',1014),(2736,'그리디 알고리즘',1015),(2737,'정렬',1015),(2738,'스위핑',1015),(2739,'해 구성하기',1016),(2740,'그리디 알고리즘',1016),(2741,'휴리스틱',1016),(2742,'백트래킹',1017),(2743,'자료 구조',1018),(2744,'그리디 알고리즘',1018),(2745,'스택',1018),(2746,'수학',1019),(2747,'구현',1020),(2748,'자료 구조',1021),(2749,'구현',1021),(2750,'큐',1021),(2751,'시뮬레이션',1021),(2752,'이분 탐색',1022),(2753,'다이나믹 프로그래밍',1022),(2754,'자료 구조',1023),(2755,'누적 합',1023),(2756,'구현',1024),(2757,'수학',1024),(2758,'구현',1025),(2759,'백트래킹',1026),(2760,'많은 조건 분기',1027),(2761,'그리디 알고리즘',1027),(2762,'정렬',1027),(2763,'구현',1028),(2764,'문자열',1028),(2765,'다이나믹 프로그래밍',1029),(2766,'수학',1029),(2767,'다이나믹 프로그래밍',1031),(2768,'게임 이론',1031),(2769,'누적 합',1031),(2770,'애드 혹',1032),(2771,'해 구성하기',1032),(2772,'세그먼트 트리',1033),(2773,'자료 구조',1033),(2774,'최대 유량',1034),(2775,'최소 비용 최대 유량',1034),(2776,'구현',1035),(2777,'정렬',1035),(2778,'구현',1036),(2779,'너비 우선 탐색',1038),(2780,'다이나믹 프로그래밍',1038),(2781,'트리에서의 다이나믹 프로그래밍',1038),(2782,'그래프 이론',1038),(2783,'그래프 탐색',1038),(2784,'트리',1038),(2785,'수학',1039),(2786,'정수론',1039),(2787,'볼록 껍질',1040),(2788,'기하학',1040),(2789,'회전하는 캘리퍼스',1040),(2790,'이분 매칭',1042),(2791,'그래프 이론',1042),(2792,'임의 정밀도 / 큰 수 연산',1043),(2793,'수학',1043),(2794,'브루트포스 알고리즘',1045),(2795,'자료 구조',1045),(2796,'구현',1045),(2797,'재귀',1045),(2798,'스택',1045),(2799,'문자열',1045),(2800,'조합론',1046),(2801,'기하학',1046),(2802,'수학',1046),(2803,'방향 비순환 그래프',1047),(2804,'다이나믹 프로그래밍',1047),(2805,'그래프 이론',1047),(2806,'위상 정렬',1047),(2807,'브루트포스 알고리즘',1048),(2808,'그리디 알고리즘',1048),(2809,'수학',1048),(2810,'다이나믹 프로그래밍',1049),(2811,'트리에서의 다이나믹 프로그래밍',1049),(2812,'트리',1049),(2813,'조합론',1051),(2814,'다이나믹 프로그래밍',1051),(2815,'자릿수를 이용한 다이나믹 프로그래밍',1051),(2816,'수학',1051),(2817,'매개 변수 탐색',1051),(2818,'임의 정밀도 / 큰 수 연산',1052),(2819,'브루트포스 알고리즘',1052),(2820,'수학',1052),(2821,'자료 구조',1053),(2822,'게임 이론',1053),(2823,'그리디 알고리즘',1053),(2824,'우선순위 큐',1053),(2825,'그리디 알고리즘',1054),(2826,'정렬',1054),(2827,'비트마스킹',1055),(2828,'구현',1055),(2829,'자료 구조',1056),(2830,'구현',1056),(2831,'큐',1056),(2832,'시뮬레이션',1056),(2833,'다이나믹 프로그래밍',1057),(2834,'정렬',1060),(2835,'스위핑',1060),(2836,'그리디 알고리즘',1061),(2837,'문자열',1061),(2838,'백트래킹',1062),(2839,'그래프 이론',1062),(2840,'그래프 탐색',1062),(2841,'구현',1062),(2842,'구현',1063),(2843,'시뮬레이션',1063),(2844,'다이나믹 프로그래밍',1064),(2845,'배낭 문제',1064),(2846,'너비 우선 탐색',1065),(2847,'그래프 이론',1065),(2848,'그래프 탐색',1065),(2849,'런타임 전의 전처리',1065),(2850,'자료 구조',1066),(2851,'우선순위 큐',1066),(2852,'정렬',1066),(2853,'기하학',1067),(2854,'정렬',1067),(2855,'스위핑',1067),(2856,'두 포인터',1067),(2857,'수학',1068),(2858,'다이나믹 프로그래밍',1069),(2859,'이분 탐색',1070),(2860,'기하학',1070),(2861,'정렬',1070),(2862,'벨만–포드',1071),(2863,'그래프 이론',1071),(2864,'최단 경로',1071),(2865,'브루트포스 알고리즘',1072),(2866,'구현',1072),(2867,'구현',1073),(2868,'해 구성하기',1074),(2869,'차수열',1074),(2870,'그래프 이론',1074),(2871,'그리디 알고리즘',1074),(2872,'많은 조건 분기',1075),(2873,'다이나믹 프로그래밍',1075),(2874,'분할 정복을 이용한 거듭제곱',1076),(2875,'수학',1076),(2876,'비트마스킹',1077),(2877,'중간에서 만나기',1077),(2878,'다이나믹 프로그래밍',1078),(2879,'수학',1079),(2880,'정수론',1079),(2881,'유클리드 호제법',1080),(2882,'구현',1080),(2883,'수학',1080),(2884,'정수론',1080),(2885,'브루트포스 알고리즘',1081),(2886,'다이나믹 프로그래밍',1081),(2887,'그리디 알고리즘',1081),(2888,'다이나믹 프로그래밍',1082),(2889,'많은 조건 분기',1084),(2890,'값 / 좌표 압축',1084),(2891,'자료 구조',1084),(2892,'세그먼트 트리',1084),(2893,'트리를 사용한 집합과 맵',1084),(2894,'그리디 알고리즘',1085),(2895,'다이나믹 프로그래밍',1086),(2896,'슬라이딩 윈도우',1086),(2897,'사칙연산',1087),(2898,'수학',1087),(2899,'비트마스킹',1088),(2900,'다이나믹 프로그래밍',1088),(2901,'비트필드를 이용한 다이나믹 프로그래밍',1088),(2902,'외판원 순회 문제',1088),(2903,'분할 정복을 이용한 거듭제곱',1089),(2904,'그래프 이론',1089),(2905,'수학',1089),(2906,'이분 탐색',1092),(2907,'매개 변수 탐색',1092),(2908,'누적 합',1092),(2909,'기하학',1093),(2910,'정렬',1093),(2911,'자료 구조',1094),(2912,'분할 정복',1094),(2913,'세그먼트 트리',1094),(2914,'스택',1094),(2915,'자료 구조',1095),(2916,'분리 집합',1095),(2917,'그래프 이론',1095),(2918,'오프라인 쿼리',1095),(2919,'작은 집합에서 큰 집합으로 합치는 테크닉',1095),(2920,'브루트포스 알고리즘',1097),(2921,'정렬',1097),(2922,'구현',1098),(2923,'수학',1098),(2924,'정렬',1098),(2925,'자료 구조',1099),(2926,'그리디 알고리즘',1099),(2927,'우선순위 큐',1099),(2928,'정렬',1099),(2929,'이분 탐색',1100),(2930,'매개 변수 탐색',1100),(2931,'임의 정밀도 / 큰 수 연산',1101),(2932,'이중 연결 요소',1101),(2933,'선인장',1101),(2934,'그래프 이론',1101),(2935,'이분 탐색',1102),(2936,'다이나믹 프로그래밍',1102),(2937,'벌리캠프–매시',1103),(2938,'키타마사',1103),(2939,'선형대수학',1103),(2940,'수학',1103),(2941,'구현',1105),(2942,'브루트포스 알고리즘',1106),(2943,'구현',1106),(2944,'그리디 알고리즘',1107),(2945,'구현',1107),(2946,'수학',1107),(2947,'누적 합',1108),(2948,'두 포인터',1108),(2949,'자료 구조',1109),(2950,'다이나믹 프로그래밍',1109),(2951,'그래프 이론',1109),(2952,'구현',1109),(2953,'느리게 갱신되는 세그먼트 트리',1109),(2954,'재귀',1109),(2955,'세그먼트 트리',1109),(2956,'시뮬레이션',1109),(2957,'위상 정렬',1109),(2958,'방향 비순환 그래프',1109),(2959,'이분 탐색',1111),(2960,'자료 구조',1111),(2961,'기하학',1111),(2962,'해시를 사용한 집합과 맵',1111),(2963,'애드 혹',1112),(2964,'비트 집합',1112),(2965,'조합론',1112),(2966,'포함 배제의 원리',1112),(2967,'수학',1112),(2968,'그리디 알고리즘',1113),(2969,'정렬',1113),(2970,'다이나믹 프로그래밍',1114),(2971,'누적 합',1114),(2972,'볼록 껍질',1115),(2973,'데이크스트라',1115),(2974,'기하학',1115),(2975,'그래프 이론',1115),(2976,'선분 교차 판정',1115),(2977,'볼록 다각형 내부의 점 판정',1115),(2978,'최단 경로',1115),(2979,'이분 탐색',1116),(2980,'그래프 이론',1116),(2981,'최소 스패닝 트리',1116),(2982,'매개 변수 탐색',1116),(2983,'비트마스킹',1118),(2984,'브루트포스 알고리즘',1118),(2985,'벨만–포드',1119),(2986,'너비 우선 탐색',1119),(2987,'플로이드–워셜',1119),(2988,'그래프 이론',1119),(2989,'그래프 탐색',1119),(2990,'최단 경로',1119),(2991,'이분 탐색',1120),(2992,'누적 합',1120),(2993,'스위핑',1120),(2994,'다이나믹 프로그래밍',1121),(2995,'구현',1121),(2996,'시뮬레이션',1121),(2997,'너비 우선 탐색',1122),(2998,'깊이 우선 탐색',1122),(2999,'그래프 이론',1122),(3000,'그래프 탐색',1122),(3001,'트리',1122),(3002,'다이나믹 프로그래밍',1123),(3003,'그리디 알고리즘',1124),(3004,'다이나믹 프로그래밍',1125),(3005,'문자열',1125),(3006,'애드 혹',1126),(3007,'정렬',1126),(3008,'브루트포스 알고리즘',1127),(3009,'수학',1127),(3010,'그리디 알고리즘',1128),(3011,'사칙연산',1129),(3012,'구현',1129),(3013,'수학',1129),(3014,'그리디 알고리즘',1130),(3015,'구현',1130),(3016,'그리디 알고리즘',1131),(3017,'정렬',1131),(3018,'애드 혹',1132),(3019,'수학',1132),(3020,'이분 탐색',1133),(3021,'자료 구조',1133),(3022,'누적 합',1133),(3023,'다이나믹 프로그래밍',1134),(3024,'플로이드–워셜',1134),(3025,'기하학',1134),(3026,'그래프 이론',1134),(3027,'선분 교차 판정',1134),(3028,'수학',1134),(3029,'최단 경로',1134),(3030,'사칙연산',1135),(3031,'구현',1135),(3032,'수학',1135),(3033,'너비 우선 탐색',1136),(3034,'그래프 이론',1136),(3035,'그래프 탐색',1136),(3036,'구현',1138),(3037,'정렬',1138),(3038,'구현',1139),(3039,'정렬',1139),(3040,'문자열',1139),(3041,'그래프 이론',1140),(3042,'강한 연결 요소',1140),(3043,'너비 우선 탐색',1141),(3044,'데이크스트라',1141),(3045,'그래프 이론',1141),(3046,'그래프 탐색',1141),(3047,'최단 경로',1141),(3048,'방향 비순환 그래프',1142),(3049,'다이나믹 프로그래밍',1142),(3050,'그래프 이론',1142),(3051,'강한 연결 요소',1142),(3052,'위상 정렬',1142),(3053,'수학',1143),(3054,'정수론',1143),(3055,'소수 판정',1143),(3056,'문자열',1143),(3057,'브루트포스 알고리즘',1144),(3058,'구현',1144),(3059,'문자열',1144),(3060,'구현',1145),(3061,'수학',1145),(3062,'다이나믹 프로그래밍',1146),(3063,'다이나믹 프로그래밍',1147),(3064,'그래프 이론',1147),(3065,'데이크스트라',1148),(3066,'그래프 이론',1148),(3067,'최단 경로',1148),(3068,'다이나믹 프로그래밍',1149),(3069,'브루트포스 알고리즘',1150),(3070,'구현',1150),(3071,'자료 구조',1151),(3072,'구현',1151),(3073,'큐',1151),(3074,'자료 구조',1152),(3075,'분리 집합',1152),(3076,'기하학',1152),(3077,'선분 교차 판정',1152),(3078,'사칙연산',1153),(3079,'수학',1153),(3080,'자료 구조',1154),(3081,'큐',1154),(3082,'기하학',1155),(3083,'다각형의 넓이',1155),(3084,'구현',1156),(3085,'누적 합',1156),(3086,'유클리드 호제법',1157),(3087,'수학',1157),(3088,'정수론',1157),(3089,'다이나믹 프로그래밍',1158),(3090,'정렬',1159),(3091,'스위핑',1159),(3092,'브루트포스 알고리즘',1160),(3093,'값 / 좌표 압축',1160),(3094,'자료 구조',1160),(3095,'해시를 사용한 집합과 맵',1160),(3096,'다이나믹 프로그래밍',1161),(3097,'백트래킹',1162),(3098,'구현',1162),(3099,'누적 합',1162),(3100,'구현',1163),(3101,'시뮬레이션',1163),(3102,'브루트포스 알고리즘',1164),(3103,'기하학',1164),(3104,'다각형의 넓이',1164),(3105,'데이크스트라',1165),(3106,'다이나믹 프로그래밍',1165),(3107,'그래프 이론',1165),(3108,'최단 경로',1165),(3109,'트리',1165),(3110,'너비 우선 탐색',1167),(3111,'그래프 이론',1167),(3112,'그래프 탐색',1167),(3113,'자료 구조',1168),(3114,'해시를 사용한 집합과 맵',1168),(3115,'정렬',1168),(3116,'문자열',1168),(3117,'그리디 알고리즘',1169),(3118,'정렬',1169),(3119,'애드 혹',1171),(3120,'구현',1171),(3121,'문자열',1171),(3122,'다이나믹 프로그래밍',1172),(3123,'자료 구조',1173),(3124,'세그먼트 트리',1173),(3125,'스위핑',1173),(3126,'깊이 우선 탐색',1174),(3127,'다이나믹 프로그래밍',1174),(3128,'그래프 이론',1174),(3129,'그래프 탐색',1174),(3130,'브루트포스 알고리즘',1175),(3131,'이분 매칭',1176),(3132,'구현',1177),(3133,'브루트포스 알고리즘',1178),(3134,'이분 매칭',1179),(3135,'기하학',1179),(3136,'다이나믹 프로그래밍',1180),(3137,'다이나믹 프로그래밍',1181),(3138,'너비 우선 탐색',1182),(3139,'그래프 이론',1182),(3140,'그래프 탐색',1182),(3141,'그리디 알고리즘',1183),(3142,'문자열',1183),(3143,'너비 우선 탐색',1184),(3144,'비트마스킹',1184),(3145,'다이나믹 프로그래밍',1184),(3146,'비트필드를 이용한 다이나믹 프로그래밍',1184),(3147,'그래프 이론',1184),(3148,'그래프 탐색',1184),(3149,'다이나믹 프로그래밍',1185),(3150,'트리에서의 다이나믹 프로그래밍',1185),(3151,'트리',1185),(3152,'구현',1188),(3153,'수학',1188),(3154,'다이나믹 프로그래밍',1189),(3155,'수학',1189),(3156,'구현',1190),(3157,'파싱',1190),(3158,'정렬',1190),(3159,'문자열',1190),(3160,'정렬',1192),(3161,'문자열',1192),(3162,'그리디 알고리즘',1193),(3163,'수학',1193),(3164,'너비 우선 탐색',1194),(3165,'그래프 이론',1194),(3166,'그래프 탐색',1194),(3167,'2-sat',1195),(3168,'그래프 이론',1195),(3169,'강한 연결 요소',1195),(3170,'다이나믹 프로그래밍',1196),(3171,'누적 합',1196),(3172,'브루트포스 알고리즘',1197),(3173,'그래프 이론',1197),(3174,'수학',1197),(3175,'정렬',1197),(3176,'트리',1197),(3177,'브루트포스 알고리즘',1198),(3178,'깊이 우선 탐색',1198),(3179,'그래프 이론',1198),(3180,'그래프 탐색',1198),(3181,'데이크스트라',1199),(3182,'그래프 이론',1199),(3183,'최단 경로',1199),(3184,'그리디 알고리즘',1200),(3185,'정렬',1200),(3186,'다이나믹 프로그래밍',1201),(3187,'트리에서의 다이나믹 프로그래밍',1201),(3188,'트리',1201),(3189,'브루트포스 알고리즘',1202),(3190,'구현',1202),(3191,'파싱',1202),(3192,'문자열',1202),(3193,'그리디 알고리즘',1203),(3194,'스위핑',1203),(3195,'다이나믹 프로그래밍',1204),(3196,'그리디 알고리즘',1205),(3197,'수학',1205),(3198,'정렬',1205),(3199,'다이나믹 프로그래밍',1206),(3200,'플로이드–워셜',1207),(3201,'그래프 이론',1207),(3202,'최단 경로',1207),(3203,'자료 구조',1208),(3204,'그리디 알고리즘',1208),(3205,'해 구성하기',1210),(3206,'그래프 이론',1210),(3207,'구현',1211),(3208,'수학',1211),(3209,'시뮬레이션',1211),(3210,'플로이드–워셜',1212),(3211,'그래프 이론',1212),(3212,'최단 경로',1212),(3213,'다이나믹 프로그래밍',1213),(3214,'수학',1213),(3215,'임의 정밀도 / 큰 수 연산',1214),(3216,'다이나믹 프로그래밍',1214),(3217,'다이나믹 프로그래밍',1216),(3218,'다이나믹 프로그래밍',1217),(3219,'정렬',1218),(3220,'두 포인터',1218),(3221,'브루트포스 알고리즘',1219),(3222,'그리디 알고리즘',1220),(3223,'정렬',1220),(3224,'자료 구조',1221),(3225,'그래프 이론',1221),(3226,'최소 공통 조상',1221),(3227,'스택',1221),(3228,'트리',1221),(3229,'너비 우선 탐색',1222),(3230,'비트마스킹',1222),(3231,'그래프 이론',1222),(3232,'그래프 탐색',1222),(3233,'백트래킹',1223),(3234,'다이나믹 프로그래밍',1223),(3235,'구현',1223),(3236,'문자열',1223),(3237,'그리디 알고리즘',1224),(3238,'정렬',1224),(3239,'다이나믹 프로그래밍',1225),(3240,'배낭 문제',1225),(3241,'구현',1226),(3242,'백트래킹',1227),(3243,'구현',1227),(3244,'다이나믹 프로그래밍',1228),(3245,'너비 우선 탐색',1229),(3246,'브루트포스 알고리즘',1229),(3247,'그래프 이론',1229),(3248,'그래프 탐색',1229),(3249,'다이나믹 프로그래밍',1230),(3250,'이분 탐색',1231),(3251,'세그먼트 트리',1231),(3252,'자료 구조',1231),(3253,'볼록 껍질',1232),(3254,'기하학',1232),(3255,'그래프 이론',1233),(3256,'그래프 탐색',1233),(3257,'브루트포스 알고리즘',1234),(3258,'정렬',1234),(3259,'수학',1235),(3260,'정수론',1235),(3261,'다이나믹 프로그래밍',1236),(3262,'깊이 우선 탐색',1238),(3263,'그래프 이론',1238),(3264,'그래프 탐색',1238),(3265,'트리',1238),(3266,'너비 우선 탐색',1239),(3267,'깊이 우선 탐색',1239),(3268,'그래프 이론',1239),(3269,'그래프 탐색',1239),(3270,'방향 비순환 그래프',1240),(3271,'그래프 이론',1240),(3272,'위상 정렬',1240),(3273,'다이나믹 프로그래밍',1241),(3274,'볼록 껍질',1242),(3275,'기하학',1242),(3276,'볼록 다각형 내부의 점 판정',1242),(3277,'그래프 이론',1243),(3278,'최소 스패닝 트리',1243),(3279,'다이나믹 프로그래밍',1244),(3280,'정렬',1244),(3281,'자료 구조',1245),(3282,'스택',1245),(3283,'문자열',1245),(3284,'그리디 알고리즘',1246),(3285,'정렬',1246),(3286,'다이나믹 프로그래밍',1247),(3287,'정렬',1247),(3288,'데이크스트라',1248),(3289,'쌍대성',1248),(3290,'기하학',1248),(3291,'그래프 이론',1248),(3292,'구현',1248),(3293,'최단 경로',1248),(3294,'분할 정복',1249),(3295,'기하학',1249),(3296,'스위핑',1249),(3297,'그리디 알고리즘',1250),(3298,'분할 정복',1251),(3299,'재귀',1251),(3300,'트리',1251),(3301,'이분 탐색',1252),(3302,'구현',1252),(3303,'정렬',1252),(3304,'다이나믹 프로그래밍',1254),(3305,'세그먼트 트리',1256),(3306,'자료 구조',1256),(3307,'수학',1258),(3308,'재귀',1258),(3309,'자료 구조',1259),(3310,'세그먼트 트리',1259),(3311,'희소 배열',1259),(3312,'애드 혹',1260),(3313,'수학',1260),(3314,'플로이드–워셜',1261),(3315,'그래프 이론',1261),(3316,'최단 경로',1261),(3317,'그래프 이론',1262),(3318,'문자열',1262),(3319,'그리디 알고리즘',1263),(3320,'트리',1263),(3321,'자료 구조',1264),(3322,'그래프 이론',1264),(3323,'그래프 탐색',1264),(3324,'우선순위 큐',1264),(3325,'해 구성하기',1266),(3326,'데이크스트라',1266),(3327,'플로이드–워셜',1266),(3328,'그래프 이론',1266),(3329,'그리디 알고리즘',1266),(3330,'최단 경로',1266),(3331,'기하학',1267),(3332,'누적 합',1267),(3333,'다이나믹 프로그래밍',1269),(3334,'다이나믹 프로그래밍',1270),(3335,'기하학',1270),(3336,'누적 합',1271),(3337,'스위핑',1271),(3338,'두 포인터',1271),(3339,'자료 구조',1272),(3340,'다이나믹 프로그래밍',1272),(3341,'우선순위 큐',1272),(3342,'세그먼트 트리',1272),(3343,'정렬',1272),(3344,'그리디 알고리즘',1273),(3345,'자료 구조',1275),(3346,'다이나믹 프로그래밍',1275),(3347,'해시를 사용한 집합과 맵',1275),(3348,'트리를 사용한 집합과 맵',1275),(3349,'구현',1277),(3350,'구현',1278),(3351,'문자열',1278),(3352,'다이나믹 프로그래밍',1279),(3353,'수학',1280),(3354,'다이나믹 프로그래밍',1281),(3355,'다이나믹 프로그래밍',1282),(3356,'이분 탐색',1283),(3357,'자료 구조',1283),(3358,'해시를 사용한 집합과 맵',1283),(3359,'중간에서 만나기',1283),(3360,'다이나믹 프로그래밍',1284),(3361,'많은 조건 분기',1286),(3362,'구현',1286),(3363,'다이나믹 프로그래밍',1288),(3364,'정렬',1288),(3365,'해 구성하기',1289),(3366,'분할 정복',1289),(3367,'수학',1289),(3368,'다이나믹 프로그래밍',1290),(3369,'브루트포스 알고리즘',1291),(3370,'구현',1291),(3371,'브루트포스 알고리즘',1292),(3372,'자료 구조',1292),(3373,'스택',1292),(3374,'다이나믹 프로그래밍',1293),(3375,'다이나믹 프로그래밍',1294),(3376,'데이크스트라',1295),(3377,'그래프 이론',1295),(3378,'최단 경로',1295),(3379,'브루트포스 알고리즘',1296),(3380,'정렬',1296),(3381,'너비 우선 탐색',1297),(3382,'깊이 우선 탐색',1297),(3383,'그래프 이론',1297),(3384,'그래프 탐색',1297),(3385,'최대 유량',1298),(3386,'최소 비용 최대 유량',1298),(3387,'수학',1299),(3388,'정수론',1299),(3389,'소수 판정',1299),(3390,'에라토스테네스의 체',1299),(3391,'다이나믹 프로그래밍',1300),(3392,'누적 합',1300),(3393,'너비 우선 탐색',1301),(3394,'비트마스킹',1301),(3395,'그래프 이론',1301),(3396,'그래프 탐색',1301),(3397,'다이나믹 프로그래밍',1302),(3398,'누적 합',1302),(3399,'최대 유량',1303),(3400,'그래프 이론',1303),(3401,'그리디 알고리즘',1304),(3402,'정렬',1304),(3403,'값 / 좌표 압축',1305),(3404,'자료 구조',1305),(3405,'그래프 이론',1305),(3406,'그래프 탐색',1305),(3407,'세그먼트 트리',1305),(3408,'정렬',1305),(3409,'트리',1305),(3410,'분할 정복',1306),(3411,'다이나믹 프로그래밍',1306),(3412,'비트마스킹',1307),(3413,'다이나믹 프로그래밍',1307),(3414,'비트필드를 이용한 다이나믹 프로그래밍',1307),(3415,'구현',1308),(3416,'그리디 알고리즘',1309),(3417,'순열 사이클 분할',1309),(3418,'애드 혹',1310),(3419,'해 구성하기',1310),(3420,'그래프 이론',1310),(3421,'너비 우선 탐색',1311),(3422,'브루트포스 알고리즘',1311),(3423,'그래프 이론',1311),(3424,'그래프 탐색',1311),(3425,'휴리스틱',1311),(3426,'데이크스트라',1312),(3427,'그래프 이론',1312),(3428,'최단 경로',1312),(3429,'다이나믹 프로그래밍',1313),(3430,'문자열',1313),(3431,'다이나믹 프로그래밍',1314),(3432,'배낭 문제',1314),(3433,'임의 정밀도 / 큰 수 연산',1315),(3434,'그래프 이론',1315),(3435,'그래프 탐색',1315),(3436,'수학',1315),(3437,'정수론',1315),(3438,'소수 판정',1315),(3439,'에라토스테네스의 체',1315),(3440,'임의 정밀도 / 큰 수 연산',1316),(3441,'다이나믹 프로그래밍',1316),(3442,'트리',1316),(3443,'자료 구조',1317),(3444,'그리디 알고리즘',1317),(3445,'세그먼트 트리',1317),(3446,'구현',1318),(3447,'수학',1318),(3448,'다이나믹 프로그래밍',1319),(3449,'문자열',1319),(3450,'브루트포스 알고리즘',1321),(3451,'기하학',1321),(3452,'수학',1321),(3453,'다이나믹 프로그래밍',1322),(3454,'자료 구조',1323),(3455,'세그먼트 트리',1323),(3456,'다이나믹 프로그래밍',1324),(3457,'트리에서의 다이나믹 프로그래밍',1324),(3458,'트리',1324),(3459,'임의 정밀도 / 큰 수 연산',1325),(3460,'사칙연산',1325),(3461,'수학',1325),(3462,'분할 정복',1326),(3463,'다이나믹 프로그래밍',1328),(3464,'다이나믹 프로그래밍',1329),(3465,'이분 탐색',1330),(3466,'매개 변수 탐색',1330),(3467,'브루트포스 알고리즘',1331),(3468,'구현',1331),(3469,'시뮬레이션',1331),(3470,'자료 구조',1333),(3471,'덱',1333),(3472,'그리디 알고리즘',1334),(3473,'자료 구조',1336),(3474,'분리 집합',1336),(3475,'그래프 이론',1336),(3476,'최소 스패닝 트리',1336),(3477,'그래프 이론',1337),(3478,'그래프 탐색',1337),(3479,'그리디 알고리즘',1337),(3480,'수학',1337),(3481,'이분 탐색',1338),(3482,'가장 긴 증가하는 부분 수열: O(n log n)',1338),(3483,'그래프 이론',1340),(3484,'수학',1341),(3485,'사칙연산',1341),(3486,'수학',1342),(3487,'문자열',1342),(3488,'세그먼트 트리',1343),(3489,'자료 구조',1343),(3490,'자료 구조',1344),(3491,'해시를 사용한 집합과 맵',1344),(3492,'정렬',1344),(3493,'너비 우선 탐색',1345),(3494,'자료 구조',1345),(3495,'깊이 우선 탐색',1345),(3496,'분리 집합',1345),(3497,'그래프 이론',1345),(3498,'그래프 탐색',1345),(3499,'매개 변수 탐색',1345),(3500,'해 구성하기',1346),(3501,'분할 정복',1346),(3502,'이분 탐색',1347),(3503,'브루트포스 알고리즘',1347),(3504,'값 / 좌표 압축',1347),(3505,'누적 합',1347),(3506,'최대 유량',1348),(3507,'최대 유량 최소 컷 정리',1348),(3508,'브루트포스 알고리즘',1349),(3509,'재귀',1349),(3510,'너비 우선 탐색',1350),(3511,'그래프 이론',1350),(3512,'그래프 탐색',1350),(3513,'이분 탐색',1351),(3514,'최대 유량',1351),(3515,'매개 변수 탐색',1351),(3516,'최대 유량',1353),(3517,'브루트포스 알고리즘',1354),(3518,'누적 합',1354),(3519,'값 / 좌표 압축',1355),(3520,'구현',1355),(3521,'브루트포스 알고리즘',1356),(3522,'자료 구조',1356),(3523,'해시를 사용한 집합과 맵',1356),(3524,'구현',1356),(3525,'구현',1357),(3526,'다이나믹 프로그래밍',1358),(3527,'게임 이론',1358),(3528,'수학',1358),(3529,'자료 구조',1359),(3530,'그리디 알고리즘',1359),(3531,'스택',1359),(3532,'그리디 알고리즘',1360),(3533,'정렬',1360),(3534,'해 구성하기',1361),(3535,'구현',1361),(3536,'트리',1361),(3537,'구현',1362),(3538,'조합론',1363),(3539,'수학',1363),(3540,'정수론',1363),(3541,'소수 판정',1363),(3542,'에라토스테네스의 체',1363),(3543,'깊이 우선 탐색',1364),(3544,'그래프 이론',1364),(3545,'그래프 탐색',1364),(3546,'트리',1364),(3547,'구현',1365),(3548,'애드 혹',1366),(3549,'수학',1366),(3550,'정렬',1366),(3551,'그리디 알고리즘',1370),(3552,'정렬',1370),(3553,'문자열',1370),(3554,'브루트포스 알고리즘',1371),(3555,'구현',1371),(3556,'문자열',1371),(3557,'구현',1372),(3558,'그리디 알고리즘',1373),(3559,'정렬',1373),(3560,'기하학',1374),(3561,'휴리스틱',1374),(3562,'최소 외접원',1374),(3563,'조합론',1375),(3564,'그래프 이론',1375),(3565,'수학',1375),(3566,'제곱근 분할법',1375),(3567,'구현',1376),(3568,'문자열',1376),(3569,'다이나믹 프로그래밍',1377),(3570,'수학',1377),(3571,'구현',1378),(3572,'다이나믹 프로그래밍',1379),(3573,'그래프 이론',1379),(3574,'위상 정렬',1379),(3575,'방향 비순환 그래프',1379),(3576,'다이나믹 프로그래밍',1380),(3577,'누적 합',1380),(3578,'백트래킹',1381),(3579,'값 / 좌표 압축',1382),(3580,'기하학',1382),(3581,'스위핑',1382),(3582,'데이크스트라',1383),(3583,'그래프 이론',1383),(3584,'최단 경로',1383),(3585,'브루트포스 알고리즘',1384),(3586,'구현',1384),(3587,'수학',1384),(3588,'다이나믹 프로그래밍',1385),(3589,'KMP',1385),(3590,'문자열',1385),(3591,'자료 구조',1386),(3592,'분리 집합',1386),(3593,'그래프 이론',1386),(3594,'그래프 탐색',1386),(3595,'누적 합',1386),(3596,'그리디 알고리즘',1387),(3597,'매개 변수 탐색',1387),(3598,'백트래킹',1388),(3599,'브루트포스 알고리즘',1388),(3600,'수학',1388),(3601,'그리디 알고리즘',1389),(3602,'수학',1389),(3603,'정렬',1389),(3604,'그래프 이론',1390),(3605,'최소 스패닝 트리',1390),(3606,'임의 정밀도 / 큰 수 연산',1391),(3607,'조합론',1391),(3608,'수학',1391),(3609,'임의 정밀도 / 큰 수 연산',1392),(3610,'사칙연산',1392),(3611,'구현',1392),(3612,'수학',1392),(3613,'깊이 우선 탐색',1393),(3614,'그래프 이론',1393),(3615,'그래프 탐색',1393),(3616,'휴리스틱',1393),(3617,'다이나믹 프로그래밍',1394),(3618,'다이나믹 프로그래밍',1395),(3619,'너비 우선 탐색',1396),(3620,'자료 구조',1396),(3621,'그래프 이론',1396),(3622,'그래프 탐색',1396),(3623,'해시를 사용한 집합과 맵',1396),(3624,'그리디 알고리즘',1397),(3625,'이분 매칭',1398),(3626,'기하학',1399),(3627,'정렬',1399),(3628,'2-sat',1400),(3629,'그래프 이론',1400),(3630,'강한 연결 요소',1400),(3631,'이분 탐색',1401),(3632,'수학',1401),(3633,'다이나믹 프로그래밍',1402),(3634,'그래프 이론',1402),(3635,'그래프 탐색',1402),(3636,'다이나믹 프로그래밍',1403),(3637,'구현',1404),(3638,'사칙연산',1404),(3639,'수학',1404),(3640,'다이나믹 프로그래밍',1405),(3641,'수학',1405),(3642,'정수론',1405),(3643,'소수 판정',1405),(3644,'에라토스테네스의 체',1405),(3645,'브루트포스 알고리즘',1406),(3646,'0-1 너비 우선 탐색',1407),(3647,'데이크스트라',1407),(3648,'그래프 이론',1407),(3649,'그래프 탐색',1407),(3650,'최단 경로',1407),(3651,'너비 우선 탐색',1408),(3652,'그래프 이론',1408),(3653,'그래프 탐색',1408),(3654,'구현',1408),(3655,'시뮬레이션',1408),(3656,'이분 탐색',1410),(3657,'자료 구조',1410),(3658,'느리게 갱신되는 세그먼트 트리',1410),(3659,'세그먼트 트리',1410),(3660,'브루트포스 알고리즘',1411),(3661,'그리디 알고리즘',1411),(3662,'수학',1411),(3663,'이분 탐색',1412),(3664,'정렬',1412),(3665,'기하학',1413),(3666,'다각형의 넓이',1413),(3667,'애드 혹',1414),(3668,'그래프 이론',1414),(3669,'그래프 탐색',1414),(3670,'구현',1414),(3671,'트리',1414),(3672,'트리 동형 사상',1414),(3673,'이분 탐색',1415),(3674,'그리디 알고리즘',1415),(3675,'수학',1415),(3676,'다이나믹 프로그래밍',1416),(3677,'정렬',1416),(3678,'자료 구조',1417),(3679,'덱',1417),(3680,'슬라이딩 윈도우',1417),(3681,'많은 조건 분기',1418),(3682,'분할 정복을 이용한 거듭제곱',1418),(3683,'수학',1418),(3684,'브루트포스 알고리즘',1419),(3685,'누적 합',1419),(3686,'브루트포스 알고리즘',1420),(3687,'유클리드 호제법',1420),(3688,'수학',1420),(3689,'정수론',1420),(3690,'그리디 알고리즘',1421),(3691,'정렬',1421),(3692,'구현',1422),(3693,'구현',1423),(3694,'구현',1424),(3695,'구현',1425),(3696,'구현',1426),(3697,'구현',1427),(3698,'구현',1428),(3699,'구현',1429),(3700,'구현',1430),(3701,'분할 정복',1431),(3702,'재귀',1431),(3703,'재귀',1432),(3704,'다이나믹 프로그래밍',1433),(3705,'브루트포스 알고리즘',1434),(3706,'그리디 알고리즘',1434),(3707,'구현',1434),(3708,'다이나믹 프로그래밍',1435),(3709,'누적 합',1435),(3710,'너비 우선 탐색',1436),(3711,'그래프 이론',1436),(3712,'그래프 탐색',1436),(3713,'자료 구조',1437),(3714,'깊이 우선 탐색',1437),(3715,'분리 집합',1437),(3716,'다이나믹 프로그래밍',1437),(3717,'그래프 이론',1437),(3718,'그래프 탐색',1437),(3719,'다이나믹 프로그래밍',1438),(3720,'트리에서의 다이나믹 프로그래밍',1438),(3721,'그리디 알고리즘',1438),(3722,'트리',1438),(3723,'사칙연산',1439),(3724,'구현',1439),(3725,'수학',1439),(3726,'많은 조건 분기',1440),(3727,'구현',1440),(3728,'그리디 알고리즘',1441),(3729,'정렬',1441),(3730,'깊이 우선 탐색',1442),(3731,'플로이드–워셜',1442),(3732,'그래프 이론',1442),(3733,'그래프 탐색',1442),(3734,'최단 경로',1442),(3735,'구현',1443),(3736,'사칙연산',1444),(3737,'구현',1444),(3738,'수학',1444),(3739,'자료 구조',1445),(3740,'두 포인터',1445),(3741,'자료 구조',1447),(3742,'분리 집합',1447),(3743,'비트마스킹',1448),(3744,'그리디 알고리즘',1448),(3745,'수학',1448),(3746,'이분 탐색',1449),(3747,'자료 구조',1449),(3748,'세그먼트 트리',1449),(3749,'이분 탐색',1450),(3750,'자료 구조',1450),(3751,'덱',1450),(3752,'덱을 이용한 구간 최댓값 트릭',1450),(3753,'다이나믹 프로그래밍',1450),(3754,'덱을 이용한 다이나믹 프로그래밍',1450),(3755,'매개 변수 탐색',1450),(3756,'이분 탐색',1451),(3757,'두 포인터',1451),(3758,'너비 우선 탐색',1452),(3759,'브루트포스 알고리즘',1452),(3760,'깊이 우선 탐색',1452),(3761,'그래프 이론',1452),(3762,'그래프 탐색',1452),(3763,'구현',1453),(3764,'문자열',1453),(3765,'이분 탐색',1454),(3766,'정렬',1454),(3767,'두 포인터',1454),(3768,'자료 구조',1455),(3769,'우선순위 큐',1455),(3770,'문자열',1455),(3771,'트리를 사용한 집합과 맵',1455),(3772,'값 / 좌표 압축',1456),(3773,'자료 구조',1456),(3774,'데이크스트라',1456),(3775,'그래프 이론',1456),(3776,'세그먼트 트리',1456),(3777,'최단 경로',1456),(3778,'이분 탐색',1457),(3779,'정렬',1457),(3780,'두 포인터',1457),(3781,'그리디 알고리즘',1458),(3782,'구현',1459),(3783,'사칙연산',1459),(3784,'수학',1459),(3785,'사칙연산',1460),(3786,'구현',1460),(3787,'수학',1460),(3788,'기하학',1461),(3789,'구현',1461),(3790,'수학',1461),(3791,'구현',1462),(3792,'너비 우선 탐색',1463),(3793,'그래프 이론',1463),(3794,'그래프 탐색',1463),(3795,'사칙연산',1464),(3796,'많은 조건 분기',1464),(3797,'구현',1464),(3798,'수학',1464),(3799,'너비 우선 탐색',1465),(3800,'그래프 이론',1465),(3801,'그래프 탐색',1465),(3802,'다이나믹 프로그래밍',1466),(3803,'깊이 우선 탐색',1467),(3804,'그래프 이론',1467),(3805,'그래프 탐색',1467),(3806,'그리디 알고리즘',1467),(3807,'트리',1467),(3808,'많은 조건 분기',1468),(3809,'구현',1468),(3810,'수학',1468),(3811,'유클리드 호제법',1469),(3812,'수학',1469),(3813,'정수론',1469),(3814,'해 구성하기',1470),(3815,'유클리드 호제법',1471),(3816,'수학',1471),(3817,'정수론',1471),(3818,'순열 사이클 분할',1471),(3819,'매개 변수 탐색',1472),(3820,'누적 합',1472),(3821,'애드 혹',1473),(3822,'그래프 이론',1473),(3823,'그리디 알고리즘',1473),(3824,'구현',1473),(3825,'트리',1473),(3826,'구현',1474),(3827,'다이나믹 프로그래밍',1475),(3828,'구현',1475),(3829,'브루트포스 알고리즘',1476),(3830,'자료 구조',1477),(3831,'스택',1477),(3832,'다이나믹 프로그래밍',1478),(3833,'구현',1479),(3834,'문자열',1479),(3835,'브루트포스 알고리즘',1480),(3836,'기하학',1480),(3837,'기하학',1481),(3838,'회전하는 캘리퍼스',1481),(3839,'많은 조건 분기',1482),(3840,'그리디 알고리즘',1482),(3841,'다이나믹 프로그래밍',1483),(3842,'배낭 문제',1483),(3843,'누적 합',1483),(3844,'분할 정복을 이용한 거듭제곱',1484),(3845,'수학',1484),(3846,'브루트포스 알고리즘',1485),(3847,'수학',1485),(3848,'브루트포스 알고리즘',1486),(3849,'다이나믹 프로그래밍',1486),(3850,'수학',1486),(3851,'브루트포스 알고리즘',1487),(3852,'구현',1487),(3853,'자료 구조',1488),(3854,'구현',1488),(3855,'스택',1488),(3856,'애드 혹',1489),(3857,'구현',1489),(3858,'사칙연산',1490),(3859,'구현',1490),(3860,'수학',1490),(3861,'다이나믹 프로그래밍',1491),(3862,'브루트포스 알고리즘',1492),(3863,'구현',1492),(3864,'구현',1495),(3865,'이분 탐색',1496),(3866,'매개 변수 탐색',1496),(3867,'그리디 알고리즘',1497),(3868,'정렬',1497),(3869,'구현',1498),(3870,'수학',1498),(3871,'이분 탐색',1499),(3872,'다이나믹 프로그래밍',1499),(3873,'정렬',1499),(3874,'해 구성하기',1500),(3875,'그리디 알고리즘',1500),(3876,'구현',1500),(3877,'자료 구조',1506),(3878,'스택',1506),(3879,'연결 리스트',1506),(3880,'브루트포스 알고리즘',1507),(3881,'백트래킹',1507),(3882,'구현',1508),(3883,'브루트포스 알고리즘',1508),(3884,'그래프 이론',1509),(3885,'그래프 탐색',1509),(3886,'너비 우선 탐색',1509),(3887,'다이나믹 프로그래밍',1510),(3888,'배낭 문제',1510),(3889,'구현',1511),(3890,'정렬',1511),(3891,'재귀',1511),(3892,'구현',1512),(3893,'그리디 알고리즘',1512),(3894,'그리디 알고리즘',1513),(3895,'문자열',1513),(3896,'다이나믹 프로그래밍',1514),(3897,'자료 구조',1514),(3898,'그래프 이론',1514),(3899,'그래프 탐색',1514),(3900,'분리 집합',1514),(3901,'배낭 문제',1514),(3902,'그리디 알고리즘',1515),(3903,'정렬',1515),(3904,'그리디 알고리즘',1516),(3905,'브루트포스 알고리즘',1517),(3906,'재귀',1517),(3907,'다이나믹 프로그래밍',1518),(3908,'브루트포스 알고리즘',1518),(3909,'다이나믹 프로그래밍',1519),(3910,'브루트포스 알고리즘',1519),(3911,'구현',1520),(3912,'그래프 이론',1520),(3913,'브루트포스 알고리즘',1520),(3914,'그래프 탐색',1520),(3915,'너비 우선 탐색',1520),(3916,'깊이 우선 탐색',1520),(3917,'최소 스패닝 트리',1520),(3918,'구현',1521),(3919,'자료 구조',1521),(3920,'문자열',1521),(3921,'스택',1521),(3922,'구현',1522),(3923,'브루트포스 알고리즘',1522),(3924,'백트래킹',1522),(3925,'구현',1523),(3926,'브루트포스 알고리즘',1523),(3927,'구현',1524),(3928,'시뮬레이션',1524),(3929,'그래프 이론',1525),(3930,'브루트포스 알고리즘',1525),(3931,'그래프 탐색',1525),(3932,'너비 우선 탐색',1525),(3933,'그래프 이론',1526),(3934,'브루트포스 알고리즘',1526),(3935,'그래프 탐색',1526),(3936,'너비 우선 탐색',1526),(3937,'구현',1527),(3938,'그래프 이론',1527),(3939,'브루트포스 알고리즘',1527),(3940,'그래프 탐색',1527),(3941,'시뮬레이션',1527),(3942,'너비 우선 탐색',1527),(3943,'브루트포스 알고리즘',1528),(3944,'백트래킹',1528),(3945,'그래프 이론',1529),(3946,'그리디 알고리즘',1529),(3947,'그래프 탐색',1529),(3948,'너비 우선 탐색',1529),(3949,'구현',1530),(3950,'브루트포스 알고리즘',1530),(3951,'기하학',1530),(3952,'많은 조건 분기',1530),(3953,'구현',1531),(3954,'애드 혹',1531),(3955,'그리디 알고리즘',1532),(3956,'정렬',1532),(3957,'그래프 이론',1533),(3958,'최소 스패닝 트리',1533),(3959,'구현',1534),(3960,'그래프 이론',1534),(3961,'그래프 탐색',1534),(3962,'시뮬레이션',1534),(3963,'너비 우선 탐색',1534),(3964,'구현',1535),(3965,'그래프 이론',1535),(3966,'그래프 탐색',1535),(3967,'시뮬레이션',1535),(3968,'너비 우선 탐색',1535),(3969,'그리디 알고리즘',1536),(3970,'두 포인터',1537),(3971,'슬라이딩 윈도우',1537),(3972,'구현',1538),(3973,'브루트포스 알고리즘',1538),(3974,'백트래킹',1538),(3975,'구현',1539),(3976,'브루트포스 알고리즘',1539),(3977,'시뮬레이션',1539),(3978,'백트래킹',1539),(3979,'브루트포스 알고리즘',1540),(3980,'비트마스킹',1540),(3981,'백트래킹',1540),(3982,'구현',1541),(3983,'자료 구조',1541),(3984,'시뮬레이션',1541),(3985,'큐',1541),(3986,'백트래킹',1542),(3987,'그래프 이론',1543),(3988,'트리',1543),(3989,'애드 혹',1543),(3990,'단절점과 단절선',1543),(3991,'브루트포스 알고리즘',1544),(3992,'백트래킹',1544),(3993,'브루트포스 알고리즘',1545),(3994,'백트래킹',1545),(3995,'백트래킹',1546),(3996,'백트래킹',1547),(3997,'브루트포스 알고리즘',1549),(3998,'코딩테스트 입문',1550),(3999,'자료 구조',1551),(4000,'해시를 사용한 집합과 맵',1551),(4001,'구현',1551),(4002,'문자열',1551),(4003,'자료 구조',1552),(4004,'해시를 사용한 집합과 맵',1552),(4005,'문자열',1552),(4006,'트리를 사용한 집합과 맵',1552),(4007,'구현',1553),(4008,'문자열',1553),(4009,'자료 구조',1554),(4010,'구현',1554),(4011,'스택',1554),(4012,'자료 구조',1559),(4013,'그리디 알고리즘',1559),(4014,'스택',1559),(4015,'너비 우선 탐색',1560),(4016,'깊이 우선 탐색',1560),(4017,'그래프 이론',1560),(4018,'그래프 탐색',1560),(4019,'구현',1560),(4020,'시뮬레이션',1560),(4021,'브루트포스 알고리즘',1561),(4022,'재귀',1561),(4023,'문자열',1561),(4024,'자료 구조',1564),(4025,'해시를 사용한 집합과 맵',1564),(4026,'문자열',1564),(4027,'트리를 사용한 집합과 맵',1564),(4028,'자료 구조',1565),(4029,'구현',1565),(4030,'큐',1565);
/*!40000 ALTER TABLE `algo_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `friendship`
--

DROP TABLE IF EXISTS `friendship`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `friendship` (
  `friendship_id` int NOT NULL AUTO_INCREMENT,
  `friend_id` int DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  PRIMARY KEY (`friendship_id`),
  KEY `FK11spi5x122uxevijievf5g7iu` (`friend_id`),
  KEY `FKb9biiilqk4uo9g72qbaopolea` (`user_id`),
  CONSTRAINT `FK11spi5x122uxevijievf5g7iu` FOREIGN KEY (`friend_id`) REFERENCES `user` (`user_id`),
  CONSTRAINT `FKb9biiilqk4uo9g72qbaopolea` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `friendship`
--

LOCK TABLES `friendship` WRITE;
/*!40000 ALTER TABLE `friendship` DISABLE KEYS */;
INSERT INTO `friendship` VALUES (4,7,1),(6,2,1);
/*!40000 ALTER TABLE `friendship` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `problem`
--

DROP TABLE IF EXISTS `problem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `problem` (
  `problem_id` int NOT NULL AUTO_INCREMENT,
  `algo_score` int DEFAULT NULL,
  `level` varchar(255) DEFAULT NULL,
  `num` varchar(255) DEFAULT NULL,
  `title` varchar(255) DEFAULT NULL,
  `site_name` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`problem_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1566 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problem`
--

LOCK TABLES `problem` WRITE;
/*!40000 ALTER TABLE `problem` DISABLE KEYS */;
INSERT INTO `problem` VALUES (1,1,'1','1000','A+B','Baekjoon','https://www.acmicpc.net/problem/1000'),(2,1,'1','1001','A-B','Baekjoon','https://www.acmicpc.net/problem/1001'),(3,8,'8','1002','터렛','Baekjoon','https://www.acmicpc.net/problem/1002'),(4,8,'8','1003','피보나치 함수','Baekjoon','https://www.acmicpc.net/problem/1003'),(5,8,'8','1004','어린 왕자','Baekjoon','https://www.acmicpc.net/problem/1004'),(6,40,'13','1005','ACM Craft','Baekjoon','https://www.acmicpc.net/problem/1005'),(7,200,'18','1006','습격자 초라기','Baekjoon','https://www.acmicpc.net/problem/1006'),(8,40,'14','1007','벡터 매칭','Baekjoon','https://www.acmicpc.net/problem/1007'),(9,1,'1','1008','A/B','Baekjoon','https://www.acmicpc.net/problem/1008'),(10,1,'4','1009','분산처리','Baekjoon','https://www.acmicpc.net/problem/1009'),(11,8,'6','1010','다리 놓기','Baekjoon','https://www.acmicpc.net/problem/1010'),(12,40,'11','1011','Fly me to the Alpha Centauri','Baekjoon','https://www.acmicpc.net/problem/1011'),(13,8,'9','1012','유기농 배추','Baekjoon','https://www.acmicpc.net/problem/1012'),(14,40,'11','1013','Contact','Baekjoon','https://www.acmicpc.net/problem/1013'),(15,200,'17','1014','컨닝','Baekjoon','https://www.acmicpc.net/problem/1014'),(16,8,'7','1015','수열 정렬','Baekjoon','https://www.acmicpc.net/problem/1015'),(17,40,'15','1016','제곱 ㄴㄴ 수','Baekjoon','https://www.acmicpc.net/problem/1016'),(18,200,'18','1017','소수 쌍','Baekjoon','https://www.acmicpc.net/problem/1017'),(19,8,'7','1018','체스판 다시 칠하기','Baekjoon','https://www.acmicpc.net/problem/1018'),(20,40,'15','1019','책 페이지','Baekjoon','https://www.acmicpc.net/problem/1019'),(21,200,'19','1020','디지털 카운터','Baekjoon','https://www.acmicpc.net/problem/1020'),(22,8,'8','1021','회전하는 큐','Baekjoon','https://www.acmicpc.net/problem/1021'),(23,40,'13','1022','소용돌이 예쁘게 출력하기','Baekjoon','https://www.acmicpc.net/problem/1022'),(24,200,'18','1023','괄호 문자열','Baekjoon','https://www.acmicpc.net/problem/1023'),(25,8,'9','1024','수열의 합','Baekjoon','https://www.acmicpc.net/problem/1024'),(26,40,'11','1025','제곱수 찾기','Baekjoon','https://www.acmicpc.net/problem/1025'),(27,8,'7','1026','보물','Baekjoon','https://www.acmicpc.net/problem/1026'),(28,40,'12','1027','고층 건물','Baekjoon','https://www.acmicpc.net/problem/1027'),(29,200,'16','1028','다이아몬드 광산','Baekjoon','https://www.acmicpc.net/problem/1028'),(30,40,'15','1029','그림 교환','Baekjoon','https://www.acmicpc.net/problem/1029'),(31,40,'13','1030','프렉탈 평면','Baekjoon','https://www.acmicpc.net/problem/1030'),(32,1000,'21','1031','스타 대결','Baekjoon','https://www.acmicpc.net/problem/1031'),(33,1,'5','1032','명령 프롬프트','Baekjoon','https://www.acmicpc.net/problem/1032'),(34,40,'14','1033','칵테일','Baekjoon','https://www.acmicpc.net/problem/1033'),(35,40,'12','1034','램프','Baekjoon','https://www.acmicpc.net/problem/1034'),(36,40,'15','1035','조각 움직이기','Baekjoon','https://www.acmicpc.net/problem/1035'),(37,40,'15','1036','36진수','Baekjoon','https://www.acmicpc.net/problem/1036'),(38,1,'5','1037','약수','Baekjoon','https://www.acmicpc.net/problem/1037'),(39,40,'11','1038','감소하는 수','Baekjoon','https://www.acmicpc.net/problem/1038'),(40,40,'14','1039','교환','Baekjoon','https://www.acmicpc.net/problem/1039'),(41,200,'19','1040','정수','Baekjoon','https://www.acmicpc.net/problem/1040'),(42,40,'11','1041','주사위','Baekjoon','https://www.acmicpc.net/problem/1041'),(43,200,'20','1042','움','Baekjoon','https://www.acmicpc.net/problem/1042'),(44,40,'12','1043','거짓말','Baekjoon','https://www.acmicpc.net/problem/1043'),(45,200,'18','1044','팀 선발','Baekjoon','https://www.acmicpc.net/problem/1044'),(46,40,'15','1045','도로','Baekjoon','https://www.acmicpc.net/problem/1045'),(47,1000,'23','1046','그림자','Baekjoon','https://www.acmicpc.net/problem/1046'),(48,200,'16','1047','울타리','Baekjoon','https://www.acmicpc.net/problem/1047'),(49,200,'17','1048','유니콘','Baekjoon','https://www.acmicpc.net/problem/1048'),(50,8,'7','1049','기타줄','Baekjoon','https://www.acmicpc.net/problem/1049'),(51,200,'16','1050','물약','Baekjoon','https://www.acmicpc.net/problem/1050'),(52,8,'8','1051','숫자 정사각형','Baekjoon','https://www.acmicpc.net/problem/1051'),(53,8,'10','1052','물병','Baekjoon','https://www.acmicpc.net/problem/1052'),(54,40,'15','1053','팰린드롬 공장','Baekjoon','https://www.acmicpc.net/problem/1053'),(55,1000,'22','1054','팰린드롬 문장','Baekjoon','https://www.acmicpc.net/problem/1054'),(56,200,'18','1055','끝이없음','Baekjoon','https://www.acmicpc.net/problem/1055'),(57,200,'19','1056','수','Baekjoon','https://www.acmicpc.net/problem/1056'),(58,8,'7','1057','토너먼트','Baekjoon','https://www.acmicpc.net/problem/1057'),(59,8,'9','1058','친구','Baekjoon','https://www.acmicpc.net/problem/1058'),(60,8,'7','1059','좋은 구간','Baekjoon','https://www.acmicpc.net/problem/1059'),(61,40,'15','1060','좋은 수','Baekjoon','https://www.acmicpc.net/problem/1060'),(62,200,'20','1061','삼각형','Baekjoon','https://www.acmicpc.net/problem/1061'),(63,40,'12','1062','가르침','Baekjoon','https://www.acmicpc.net/problem/1062'),(64,8,'8','1063','킹','Baekjoon','https://www.acmicpc.net/problem/1063'),(65,8,'7','1064','평행사변형','Baekjoon','https://www.acmicpc.net/problem/1064'),(66,8,'7','1065','한수','Baekjoon','https://www.acmicpc.net/problem/1065'),(67,200,'19','1066','에이한수','Baekjoon','https://www.acmicpc.net/problem/1066'),(68,200,'20','1067','이동','Baekjoon','https://www.acmicpc.net/problem/1067'),(69,40,'11','1068','트리','Baekjoon','https://www.acmicpc.net/problem/1068'),(70,40,'13','1069','집으로','Baekjoon','https://www.acmicpc.net/problem/1069'),(71,200,'20','1070','김지민의 침략','Baekjoon','https://www.acmicpc.net/problem/1070'),(72,200,'16','1071','소트','Baekjoon','https://www.acmicpc.net/problem/1071'),(73,8,'8','1072','게임','Baekjoon','https://www.acmicpc.net/problem/1072'),(74,200,'18','1073','도미노','Baekjoon','https://www.acmicpc.net/problem/1073'),(75,8,'10','1074','Z','Baekjoon','https://www.acmicpc.net/problem/1074'),(76,1,'4','1075','나누기','Baekjoon','https://www.acmicpc.net/problem/1075'),(77,1,'4','1076','저항','Baekjoon','https://www.acmicpc.net/problem/1076'),(78,200,'20','1077','넓이','Baekjoon','https://www.acmicpc.net/problem/1077'),(79,200,'20','1078','뒤집음','Baekjoon','https://www.acmicpc.net/problem/1078'),(80,40,'14','1079','마피아','Baekjoon','https://www.acmicpc.net/problem/1079'),(81,8,'10','1080','행렬','Baekjoon','https://www.acmicpc.net/problem/1080'),(82,40,'15','1081','합','Baekjoon','https://www.acmicpc.net/problem/1081'),(83,40,'13','1082','방 번호','Baekjoon','https://www.acmicpc.net/problem/1082'),(84,40,'11','1083','소트','Baekjoon','https://www.acmicpc.net/problem/1083'),(85,200,'19','1084','방 번호 2','Baekjoon','https://www.acmicpc.net/problem/1084'),(86,1,'3','1085','직사각형에서 탈출','Baekjoon','https://www.acmicpc.net/problem/1085'),(87,200,'16','1086','박성원','Baekjoon','https://www.acmicpc.net/problem/1086'),(88,200,'17','1087','쥐 잡기','Baekjoon','https://www.acmicpc.net/problem/1087'),(89,200,'19','1088','케이크','Baekjoon','https://www.acmicpc.net/problem/1088'),(90,40,'12','1089','스타트링크 타워','Baekjoon','https://www.acmicpc.net/problem/1089'),(91,200,'17','1090','체커','Baekjoon','https://www.acmicpc.net/problem/1090'),(92,40,'12','1091','카드 섞기','Baekjoon','https://www.acmicpc.net/problem/1091'),(93,40,'11','1092','배','Baekjoon','https://www.acmicpc.net/problem/1092'),(94,200,'18','1093','스티커 수집','Baekjoon','https://www.acmicpc.net/problem/1093'),(95,8,'6','1094','막대기','Baekjoon','https://www.acmicpc.net/problem/1094'),(96,200,'16','1095','마법의 구슬','Baekjoon','https://www.acmicpc.net/problem/1095'),(97,200,'18','1096','종이 접기','Baekjoon','https://www.acmicpc.net/problem/1096'),(98,200,'16','1097','마법의 문자열','Baekjoon','https://www.acmicpc.net/problem/1097'),(99,200,'19','1098','쌍둥이 마을','Baekjoon','https://www.acmicpc.net/problem/1098'),(100,40,'13','1099','알 수 없는 문장','Baekjoon','https://www.acmicpc.net/problem/1099'),(101,1,'4','1100','하얀 칸','Baekjoon','https://www.acmicpc.net/problem/1100'),(102,40,'12','1101','카드 정리 1','Baekjoon','https://www.acmicpc.net/problem/1101'),(103,200,'16','1102','발전소','Baekjoon','https://www.acmicpc.net/problem/1102'),(104,40,'14','1103','게임','Baekjoon','https://www.acmicpc.net/problem/1103'),(105,200,'18','1104','패턴','Baekjoon','https://www.acmicpc.net/problem/1104'),(106,8,'10','1105','팔','Baekjoon','https://www.acmicpc.net/problem/1105'),(107,40,'11','1106','호텔','Baekjoon','https://www.acmicpc.net/problem/1106'),(108,40,'11','1107','리모컨','Baekjoon','https://www.acmicpc.net/problem/1107'),(109,200,'18','1108','검색 엔진','Baekjoon','https://www.acmicpc.net/problem/1108'),(110,200,'17','1109','섬','Baekjoon','https://www.acmicpc.net/problem/1109'),(111,1,'5','1110','더하기 사이클','Baekjoon','https://www.acmicpc.net/problem/1110'),(112,40,'13','1111','IQ Test','Baekjoon','https://www.acmicpc.net/problem/1111'),(113,40,'13','1112','진법 변환','Baekjoon','https://www.acmicpc.net/problem/1112'),(114,40,'15','1113','수영장 만들기','Baekjoon','https://www.acmicpc.net/problem/1113'),(115,40,'15','1114','통나무 자르기','Baekjoon','https://www.acmicpc.net/problem/1114'),(116,40,'15','1115','순열','Baekjoon','https://www.acmicpc.net/problem/1115'),(117,200,'19','1116','순열 2','Baekjoon','https://www.acmicpc.net/problem/1116'),(118,40,'11','1117','색칠 1','Baekjoon','https://www.acmicpc.net/problem/1117'),(119,200,'19','1118','색칠 2','Baekjoon','https://www.acmicpc.net/problem/1118'),(120,40,'14','1119','그래프','Baekjoon','https://www.acmicpc.net/problem/1119'),(121,8,'7','1120','문자열','Baekjoon','https://www.acmicpc.net/problem/1120'),(122,200,'18','1121','도형','Baekjoon','https://www.acmicpc.net/problem/1121'),(123,200,'17','1122','뒤집기','Baekjoon','https://www.acmicpc.net/problem/1122'),(124,1000,'22','1123','셔플','Baekjoon','https://www.acmicpc.net/problem/1123'),(125,8,'10','1124','언더프라임','Baekjoon','https://www.acmicpc.net/problem/1124'),(126,200,'17','1125','바닥 장식','Baekjoon','https://www.acmicpc.net/problem/1125'),(127,200,'18','1126','같은 탑','Baekjoon','https://www.acmicpc.net/problem/1126'),(128,1000,'22','1127','떡국','Baekjoon','https://www.acmicpc.net/problem/1127'),(129,200,'20','1128','피보나치 냅색','Baekjoon','https://www.acmicpc.net/problem/1128'),(130,200,'18','1129','키','Baekjoon','https://www.acmicpc.net/problem/1129'),(131,1000,'21','1130','종이 레이싱','Baekjoon','https://www.acmicpc.net/problem/1130'),(132,200,'16','1131','숫자','Baekjoon','https://www.acmicpc.net/problem/1131'),(133,40,'13','1132','합','Baekjoon','https://www.acmicpc.net/problem/1132'),(134,200,'16','1133','반복되지 않는 단어','Baekjoon','https://www.acmicpc.net/problem/1133'),(135,1000,'21','1134','식','Baekjoon','https://www.acmicpc.net/problem/1134'),(136,40,'14','1135','뉴스 전하기','Baekjoon','https://www.acmicpc.net/problem/1135'),(137,200,'16','1136','조각 놓기','Baekjoon','https://www.acmicpc.net/problem/1136'),(138,200,'17','1137','로봇 레이스','Baekjoon','https://www.acmicpc.net/problem/1137'),(139,8,'9','1138','한 줄로 서기','Baekjoon','https://www.acmicpc.net/problem/1138'),(140,40,'15','1139','울타리','Baekjoon','https://www.acmicpc.net/problem/1139'),(141,200,'19','1140','요금','Baekjoon','https://www.acmicpc.net/problem/1140'),(142,8,'10','1141','접두사','Baekjoon','https://www.acmicpc.net/problem/1141'),(143,200,'18','1142','피자','Baekjoon','https://www.acmicpc.net/problem/1142'),(144,200,'19','1143','경찰','Baekjoon','https://www.acmicpc.net/problem/1143'),(145,1000,'23','1144','싼 비용','Baekjoon','https://www.acmicpc.net/problem/1144'),(146,1,'5','1145','적어도 대부분의 배수','Baekjoon','https://www.acmicpc.net/problem/1145'),(147,200,'17','1146','지그재그 서기','Baekjoon','https://www.acmicpc.net/problem/1146'),(148,200,'18','1147','BOJ 소풍','Baekjoon','https://www.acmicpc.net/problem/1147'),(149,40,'11','1148','단어 만들기','Baekjoon','https://www.acmicpc.net/problem/1148'),(150,8,'10','1149','RGB거리','Baekjoon','https://www.acmicpc.net/problem/1149'),(151,1000,'22','1150','백업','Baekjoon','https://www.acmicpc.net/problem/1150'),(152,200,'18','1151','그림자','Baekjoon','https://www.acmicpc.net/problem/1151'),(153,1,'4','1152','단어의 개수','Baekjoon','https://www.acmicpc.net/problem/1152'),(154,40,'13','1153','네 개의 소수','Baekjoon','https://www.acmicpc.net/problem/1153'),(155,200,'16','1154','팀 편성','Baekjoon','https://www.acmicpc.net/problem/1154'),(156,200,'17','1155','변형 하노이','Baekjoon','https://www.acmicpc.net/problem/1155'),(157,1000,'21','1156','장난감','Baekjoon','https://www.acmicpc.net/problem/1156'),(158,1,'5','1157','단어 공부','Baekjoon','https://www.acmicpc.net/problem/1157'),(159,8,'7','1158','요세푸스 문제','Baekjoon','https://www.acmicpc.net/problem/1158'),(160,1,'4','1159','농구 경기','Baekjoon','https://www.acmicpc.net/problem/1159'),(161,200,'16','1160','Random Number Generator','Baekjoon','https://www.acmicpc.net/problem/1160'),(162,200,'18','1161','버스','Baekjoon','https://www.acmicpc.net/problem/1161'),(163,200,'16','1162','도로포장','Baekjoon','https://www.acmicpc.net/problem/1162'),(164,1000,'21','1163','증가하는 리스트','Baekjoon','https://www.acmicpc.net/problem/1163'),(165,200,'20','1164','가리기','Baekjoon','https://www.acmicpc.net/problem/1164'),(166,1000,'22','1165','단어퍼즐','Baekjoon','https://www.acmicpc.net/problem/1165'),(167,8,'8','1166','선물','Baekjoon','https://www.acmicpc.net/problem/1166'),(168,40,'14','1167','트리의 지름','Baekjoon','https://www.acmicpc.net/problem/1167'),(169,200,'18','1168','요세푸스 문제 2','Baekjoon','https://www.acmicpc.net/problem/1168'),(170,200,'16','1169','정사각형 진열','Baekjoon','https://www.acmicpc.net/problem/1169'),(171,200,'18','1170','선인장의 개수','Baekjoon','https://www.acmicpc.net/problem/1170'),(172,200,'19','1171','사오정','Baekjoon','https://www.acmicpc.net/problem/1171'),(173,1000,'24','1172','선인장 Automorphisms','Baekjoon','https://www.acmicpc.net/problem/1172'),(174,1,'4','1173','운동','Baekjoon','https://www.acmicpc.net/problem/1173'),(175,40,'11','1174','줄어드는 수','Baekjoon','https://www.acmicpc.net/problem/1174'),(176,40,'15','1175','배달','Baekjoon','https://www.acmicpc.net/problem/1175'),(177,40,'15','1176','섞기','Baekjoon','https://www.acmicpc.net/problem/1176'),(178,200,'16','1177','조쌤포스','Baekjoon','https://www.acmicpc.net/problem/1177'),(179,200,'16','1178','간선 추가','Baekjoon','https://www.acmicpc.net/problem/1178'),(180,200,'20','1179','마지막 요세푸스 문제','Baekjoon','https://www.acmicpc.net/problem/1179'),(181,1000,'23','1180','선인장의 지름','Baekjoon','https://www.acmicpc.net/problem/1180'),(182,8,'6','1181','단어 정렬','Baekjoon','https://www.acmicpc.net/problem/1181'),(183,8,'9','1182','부분수열의 합','Baekjoon','https://www.acmicpc.net/problem/1182'),(184,8,'9','1183','약속','Baekjoon','https://www.acmicpc.net/problem/1183'),(185,200,'16','1184','귀농','Baekjoon','https://www.acmicpc.net/problem/1184'),(186,200,'17','1185','유럽여행','Baekjoon','https://www.acmicpc.net/problem/1185'),(187,40,'12','1186','직사각형 색칠하기','Baekjoon','https://www.acmicpc.net/problem/1186'),(188,1000,'21','1187','숫자 놀이','Baekjoon','https://www.acmicpc.net/problem/1187'),(189,40,'12','1188','음식 평론가','Baekjoon','https://www.acmicpc.net/problem/1188'),(190,8,'10','1189','컴백홈','Baekjoon','https://www.acmicpc.net/problem/1189'),(191,1000,'23','1190','골 세레모니','Baekjoon','https://www.acmicpc.net/problem/1190'),(192,1000,'21','1191','게임','Baekjoon','https://www.acmicpc.net/problem/1191'),(193,1000,'22','1192','장갑','Baekjoon','https://www.acmicpc.net/problem/1192'),(194,8,'6','1193','분수찾기','Baekjoon','https://www.acmicpc.net/problem/1193'),(195,40,'15','1194','달이 차오른다, 가자.','Baekjoon','https://www.acmicpc.net/problem/1194'),(196,40,'11','1195','킥다운','Baekjoon','https://www.acmicpc.net/problem/1195'),(197,1000,'22','1196','잭 바우어','Baekjoon','https://www.acmicpc.net/problem/1196'),(198,40,'12','1197','최소 스패닝 트리','Baekjoon','https://www.acmicpc.net/problem/1197'),(199,8,'9','1198','삼각형으로 자르기','Baekjoon','https://www.acmicpc.net/problem/1198'),(200,200,'17','1199','오일러 회로','Baekjoon','https://www.acmicpc.net/problem/1199'),(201,200,'17','1200','기상예측','Baekjoon','https://www.acmicpc.net/problem/1200'),(202,200,'18','1201','NMK','Baekjoon','https://www.acmicpc.net/problem/1201'),(203,40,'14','1202','보석 도둑','Baekjoon','https://www.acmicpc.net/problem/1202'),(204,200,'17','1203','게임','Baekjoon','https://www.acmicpc.net/problem/1203'),(205,1000,'21','1204','팰린드롬의 개수','Baekjoon','https://www.acmicpc.net/problem/1204'),(206,8,'7','1205','등수 구하기','Baekjoon','https://www.acmicpc.net/problem/1205'),(207,8,'10','1206','사람의 수','Baekjoon','https://www.acmicpc.net/problem/1206'),(208,40,'14','1207','종이 자르기','Baekjoon','https://www.acmicpc.net/problem/1207'),(209,40,'15','1208','부분수열의 합 2','Baekjoon','https://www.acmicpc.net/problem/1208'),(210,200,'17','1209','단조수열 만들기','Baekjoon','https://www.acmicpc.net/problem/1209'),(211,200,'20','1210','마피아','Baekjoon','https://www.acmicpc.net/problem/1210'),(212,1000,'21','1211','보일의 법칙','Baekjoon','https://www.acmicpc.net/problem/1211'),(213,1,'4','1212','8진수 2진수','Baekjoon','https://www.acmicpc.net/problem/1212'),(214,8,'8','1213','팰린드롬 만들기','Baekjoon','https://www.acmicpc.net/problem/1213'),(215,200,'16','1214','쿨한 물건 구매','Baekjoon','https://www.acmicpc.net/problem/1214'),(216,200,'17','1215','잘못 작성한 요세푸스 코드','Baekjoon','https://www.acmicpc.net/problem/1215'),(217,1000,'25','1216','충무공 이순신','Baekjoon','https://www.acmicpc.net/problem/1216'),(218,200,'17','1217','하우스 M.D.','Baekjoon','https://www.acmicpc.net/problem/1217'),(219,1000,'25','1218','로봇','Baekjoon','https://www.acmicpc.net/problem/1218'),(220,200,'16','1219','오민식의 고민','Baekjoon','https://www.acmicpc.net/problem/1219'),(221,200,'19','1220','MEGACITY','Baekjoon','https://www.acmicpc.net/problem/1220'),(222,200,'20','1221','가까운 점','Baekjoon','https://www.acmicpc.net/problem/1221'),(223,40,'14','1222','홍준 프로그래밍 대회','Baekjoon','https://www.acmicpc.net/problem/1222'),(224,0,'0','1223','마법의 돌','Baekjoon','https://www.acmicpc.net/problem/1223'),(225,200,'20','1224','분수','Baekjoon','https://www.acmicpc.net/problem/1224'),(226,1,'4','1225','이상한 곱셈','Baekjoon','https://www.acmicpc.net/problem/1225'),(227,200,'17','1226','국회','Baekjoon','https://www.acmicpc.net/problem/1226'),(228,200,'19','1227','그녀의 마음','Baekjoon','https://www.acmicpc.net/problem/1227'),(229,200,'17','1228','전쟁','Baekjoon','https://www.acmicpc.net/problem/1228'),(230,40,'12','1229','육각수','Baekjoon','https://www.acmicpc.net/problem/1229'),(231,40,'15','1230','문자열 거리','Baekjoon','https://www.acmicpc.net/problem/1230'),(232,200,'16','1231','주식왕 동호','Baekjoon','https://www.acmicpc.net/problem/1231'),(233,1000,'22','1232','체스','Baekjoon','https://www.acmicpc.net/problem/1232'),(234,1,'4','1233','주사위','Baekjoon','https://www.acmicpc.net/problem/1233'),(235,40,'14','1234','크리스마스 트리','Baekjoon','https://www.acmicpc.net/problem/1234'),(236,8,'7','1235','학생 번호','Baekjoon','https://www.acmicpc.net/problem/1235'),(237,1,'5','1236','성 지키기','Baekjoon','https://www.acmicpc.net/problem/1236'),(238,0,'0','1237','정ㅋ벅ㅋ','Baekjoon','https://www.acmicpc.net/problem/1237'),(239,40,'13','1238','파티','Baekjoon','https://www.acmicpc.net/problem/1238'),(240,40,'11','1239','차트','Baekjoon','https://www.acmicpc.net/problem/1239'),(241,40,'11','1240','노드사이의 거리','Baekjoon','https://www.acmicpc.net/problem/1240'),(242,40,'11','1241','머리 톡톡','Baekjoon','https://www.acmicpc.net/problem/1241'),(243,40,'15','1242','소풍','Baekjoon','https://www.acmicpc.net/problem/1242'),(244,1000,'22','1243','팰린드롬','Baekjoon','https://www.acmicpc.net/problem/1243'),(245,8,'7','1244','스위치 켜고 끄기','Baekjoon','https://www.acmicpc.net/problem/1244'),(246,40,'11','1245','농장 관리','Baekjoon','https://www.acmicpc.net/problem/1245'),(247,8,'7','1246','온라인 판매','Baekjoon','https://www.acmicpc.net/problem/1246'),(248,1,'3','1247','부호','Baekjoon','https://www.acmicpc.net/problem/1247'),(249,40,'13','1248','Guess','Baekjoon','https://www.acmicpc.net/problem/1248'),(250,200,'18','1249','워드똑똑','Baekjoon','https://www.acmicpc.net/problem/1249'),(251,1000,'25','1250','색칠된 공들','Baekjoon','https://www.acmicpc.net/problem/1250'),(252,8,'6','1251','단어 나누기','Baekjoon','https://www.acmicpc.net/problem/1251'),(253,1,'4','1252','이진수 덧셈','Baekjoon','https://www.acmicpc.net/problem/1252'),(254,40,'12','1253','좋다','Baekjoon','https://www.acmicpc.net/problem/1253'),(255,8,'9','1254','팰린드롬 만들기','Baekjoon','https://www.acmicpc.net/problem/1254'),(256,200,'17','1255','전쟁 - 선전포고','Baekjoon','https://www.acmicpc.net/problem/1255'),(257,40,'14','1256','사전','Baekjoon','https://www.acmicpc.net/problem/1256'),(258,200,'20','1257','엄청난 부자','Baekjoon','https://www.acmicpc.net/problem/1257'),(259,200,'18','1258','문제 할당','Baekjoon','https://www.acmicpc.net/problem/1258'),(260,1,'5','1259','팰린드롬수','Baekjoon','https://www.acmicpc.net/problem/1259'),(261,8,'9','1260','DFS와 BFS','Baekjoon','https://www.acmicpc.net/problem/1260'),(262,40,'12','1261','알고스팟','Baekjoon','https://www.acmicpc.net/problem/1261'),(263,8,'10','1262','알파벳 다이아몬드','Baekjoon','https://www.acmicpc.net/problem/1262'),(264,40,'11','1263','시간 관리','Baekjoon','https://www.acmicpc.net/problem/1263'),(265,1,'2','1264','모음의 개수','Baekjoon','https://www.acmicpc.net/problem/1264'),(266,200,'18','1265','순열','Baekjoon','https://www.acmicpc.net/problem/1265'),(267,1000,'23','1266','일어나!','Baekjoon','https://www.acmicpc.net/problem/1266'),(268,1,'3','1267','핸드폰 요금','Baekjoon','https://www.acmicpc.net/problem/1267'),(269,1,'5','1268','임시 반장 정하기','Baekjoon','https://www.acmicpc.net/problem/1268'),(270,8,'7','1269','대칭 차집합','Baekjoon','https://www.acmicpc.net/problem/1269'),(271,8,'8','1270','전쟁 - 땅따먹기','Baekjoon','https://www.acmicpc.net/problem/1270'),(272,1,'1','1271','엄청난 부자2','Baekjoon','https://www.acmicpc.net/problem/1271'),(273,40,'14','1272','특별 노드','Baekjoon','https://www.acmicpc.net/problem/1272'),(274,200,'18','1273','샷','Baekjoon','https://www.acmicpc.net/problem/1273'),(275,0,'0','1274','커피숍1','Baekjoon','https://www.acmicpc.net/problem/1274'),(276,40,'15','1275','커피숍2','Baekjoon','https://www.acmicpc.net/problem/1275'),(277,8,'10','1276','PLATFORME','Baekjoon','https://www.acmicpc.net/problem/1276'),(278,40,'12','1277','발전소 설치','Baekjoon','https://www.acmicpc.net/problem/1277'),(279,40,'13','1278','연극','Baekjoon','https://www.acmicpc.net/problem/1278'),(280,40,'14','1279','내멋대로 주사위','Baekjoon','https://www.acmicpc.net/problem/1279'),(281,200,'17','1280','나무 심기','Baekjoon','https://www.acmicpc.net/problem/1280'),(282,1000,'23','1281','보석상','Baekjoon','https://www.acmicpc.net/problem/1281'),(283,200,'19','1282','P-수열','Baekjoon','https://www.acmicpc.net/problem/1282'),(284,8,'10','1283','단축키 지정','Baekjoon','https://www.acmicpc.net/problem/1283'),(285,1,'3','1284','집 주소','Baekjoon','https://www.acmicpc.net/problem/1284'),(286,40,'15','1285','동전 뒤집기','Baekjoon','https://www.acmicpc.net/problem/1285'),(287,40,'11','1286','부분 직사각형','Baekjoon','https://www.acmicpc.net/problem/1286'),(288,200,'16','1287','할 수 있다','Baekjoon','https://www.acmicpc.net/problem/1287'),(289,1000,'22','1288','전쟁 - 국지전','Baekjoon','https://www.acmicpc.net/problem/1288'),(290,200,'18','1289','트리의 가중치','Baekjoon','https://www.acmicpc.net/problem/1289'),(291,200,'20','1290','배럭','Baekjoon','https://www.acmicpc.net/problem/1290'),(292,8,'8','1291','이면수와 임현수','Baekjoon','https://www.acmicpc.net/problem/1291'),(293,1,'5','1292','쉽게 푸는 문제','Baekjoon','https://www.acmicpc.net/problem/1292'),(294,200,'18','1293','생물농축','Baekjoon','https://www.acmicpc.net/problem/1293'),(295,200,'18','1294','문자열 장식','Baekjoon','https://www.acmicpc.net/problem/1294'),(296,1000,'24','1295','평면도','Baekjoon','https://www.acmicpc.net/problem/1295'),(297,1,'5','1296','팀 이름 정하기','Baekjoon','https://www.acmicpc.net/problem/1296'),(298,1,'4','1297','TV 크기','Baekjoon','https://www.acmicpc.net/problem/1297'),(299,200,'17','1298','노트북의 주인을 찾아서','Baekjoon','https://www.acmicpc.net/problem/1298'),(300,0,'0','1299','전쟁 - 탈출편2','Baekjoon','https://www.acmicpc.net/problem/1299'),(301,40,'15','1300','K번째 수','Baekjoon','https://www.acmicpc.net/problem/1300'),(302,40,'13','1301','비즈 공예','Baekjoon','https://www.acmicpc.net/problem/1301'),(303,8,'7','1302','베스트셀러','Baekjoon','https://www.acmicpc.net/problem/1302'),(304,8,'10','1303','전쟁 - 전투','Baekjoon','https://www.acmicpc.net/problem/1303'),(305,40,'13','1304','지역','Baekjoon','https://www.acmicpc.net/problem/1304'),(306,200,'17','1305','광고','Baekjoon','https://www.acmicpc.net/problem/1305'),(307,200,'16','1306','달려라 홍준','Baekjoon','https://www.acmicpc.net/problem/1306'),(308,200,'17','1307','마방진','Baekjoon','https://www.acmicpc.net/problem/1307'),(309,8,'6','1308','D-Day','Baekjoon','https://www.acmicpc.net/problem/1308'),(310,8,'10','1309','동물원','Baekjoon','https://www.acmicpc.net/problem/1309'),(311,200,'18','1310','달리기 코스','Baekjoon','https://www.acmicpc.net/problem/1310'),(312,40,'15','1311','할 일 정하기 1','Baekjoon','https://www.acmicpc.net/problem/1311'),(313,8,'6','1312','소수','Baekjoon','https://www.acmicpc.net/problem/1312'),(314,40,'12','1313','합성소수','Baekjoon','https://www.acmicpc.net/problem/1313'),(315,200,'18','1314','동굴 탐험','Baekjoon','https://www.acmicpc.net/problem/1314'),(316,200,'18','1315','RPG','Baekjoon','https://www.acmicpc.net/problem/1315'),(317,8,'6','1316','그룹 단어 체커','Baekjoon','https://www.acmicpc.net/problem/1316'),(318,0,'0','1317','그룹 단어','Baekjoon','https://www.acmicpc.net/problem/1317'),(319,40,'13','1318','포커','Baekjoon','https://www.acmicpc.net/problem/1318'),(320,40,'14','1319','지민 vs 한수','Baekjoon','https://www.acmicpc.net/problem/1319'),(321,200,'16','1321','군인','Baekjoon','https://www.acmicpc.net/problem/1321'),(322,40,'12','1322','X와 K','Baekjoon','https://www.acmicpc.net/problem/1322'),(323,40,'12','1323','숫자 연결하기','Baekjoon','https://www.acmicpc.net/problem/1323'),(324,0,'0','1324','젠장','Baekjoon','https://www.acmicpc.net/problem/1324'),(325,8,'10','1325','효율적인 해킹','Baekjoon','https://www.acmicpc.net/problem/1325'),(326,8,'9','1326','폴짝폴짝','Baekjoon','https://www.acmicpc.net/problem/1326'),(327,40,'12','1327','소트 게임','Baekjoon','https://www.acmicpc.net/problem/1327'),(328,200,'16','1328','고층 빌딩','Baekjoon','https://www.acmicpc.net/problem/1328'),(329,40,'14','1329','증가 수열','Baekjoon','https://www.acmicpc.net/problem/1329'),(330,1,'1','1330','두 수 비교하기','Baekjoon','https://www.acmicpc.net/problem/1330'),(331,8,'7','1331','나이트 투어','Baekjoon','https://www.acmicpc.net/problem/1331'),(332,40,'13','1332','풀자','Baekjoon','https://www.acmicpc.net/problem/1332'),(333,1,'4','1333','부재중 전화','Baekjoon','https://www.acmicpc.net/problem/1333'),(334,40,'11','1334','다음 팰린드롬 수','Baekjoon','https://www.acmicpc.net/problem/1334'),(335,1000,'24','1335','여섯 쌍 서로소','Baekjoon','https://www.acmicpc.net/problem/1335'),(336,200,'18','1336','수열의 개수 NKD','Baekjoon','https://www.acmicpc.net/problem/1336'),(337,8,'7','1337','올바른 배열','Baekjoon','https://www.acmicpc.net/problem/1337'),(338,40,'12','1338','알 수 없는 번호','Baekjoon','https://www.acmicpc.net/problem/1338'),(339,40,'12','1339','단어 수학','Baekjoon','https://www.acmicpc.net/problem/1339'),(340,8,'6','1340','연도 진행바','Baekjoon','https://www.acmicpc.net/problem/1340'),(341,40,'13','1341','사이좋은 형제','Baekjoon','https://www.acmicpc.net/problem/1341'),(342,8,'10','1342','행운의 문자열','Baekjoon','https://www.acmicpc.net/problem/1342'),(343,8,'6','1343','폴리오미노','Baekjoon','https://www.acmicpc.net/problem/1343'),(344,40,'12','1344','축구','Baekjoon','https://www.acmicpc.net/problem/1344'),(345,40,'14','1345','등차수열','Baekjoon','https://www.acmicpc.net/problem/1345'),(346,200,'17','1346','탑을 향해서','Baekjoon','https://www.acmicpc.net/problem/1346'),(347,8,'9','1347','미로 만들기','Baekjoon','https://www.acmicpc.net/problem/1347'),(348,200,'19','1348','주차장','Baekjoon','https://www.acmicpc.net/problem/1348'),(349,0,'0','1349','건축가의 나라','Baekjoon','https://www.acmicpc.net/problem/1349'),(350,1,'4','1350','진짜 공간','Baekjoon','https://www.acmicpc.net/problem/1350'),(351,40,'11','1351','무한 수열','Baekjoon','https://www.acmicpc.net/problem/1351'),(352,40,'15','1352','문자열','Baekjoon','https://www.acmicpc.net/problem/1352'),(353,200,'16','1353','합과 곱','Baekjoon','https://www.acmicpc.net/problem/1353'),(354,40,'11','1354','무한 수열 2','Baekjoon','https://www.acmicpc.net/problem/1354'),(355,40,'14','1355','구멍난 케이크 자르기','Baekjoon','https://www.acmicpc.net/problem/1355'),(356,1,'5','1356','유진수','Baekjoon','https://www.acmicpc.net/problem/1356'),(357,1,'5','1357','뒤집힌 덧셈','Baekjoon','https://www.acmicpc.net/problem/1357'),(358,8,'7','1358','하키','Baekjoon','https://www.acmicpc.net/problem/1358'),(359,8,'7','1359','복권','Baekjoon','https://www.acmicpc.net/problem/1359'),(360,40,'11','1360','되돌리기','Baekjoon','https://www.acmicpc.net/problem/1360'),(361,40,'12','1361','두 스트링 마스크','Baekjoon','https://www.acmicpc.net/problem/1361'),(362,1,'4','1362','펫','Baekjoon','https://www.acmicpc.net/problem/1362'),(363,0,'0','1363','트리','Baekjoon','https://www.acmicpc.net/problem/1363'),(364,40,'12','1364','울타리 치기','Baekjoon','https://www.acmicpc.net/problem/1364'),(365,40,'14','1365','꼬인 전깃줄','Baekjoon','https://www.acmicpc.net/problem/1365'),(366,8,'10','1366','기타 코드','Baekjoon','https://www.acmicpc.net/problem/1366'),(367,0,'0','1367','타브 악보','Baekjoon','https://www.acmicpc.net/problem/1367'),(368,40,'14','1368','물대기','Baekjoon','https://www.acmicpc.net/problem/1368'),(369,200,'16','1369','배열값','Baekjoon','https://www.acmicpc.net/problem/1369'),(370,1000,'22','1370','전쟁 - 화계가 아닌 수계','Baekjoon','https://www.acmicpc.net/problem/1370'),(371,1,'4','1371','가장 많은 글자','Baekjoon','https://www.acmicpc.net/problem/1371'),(372,200,'19','1372','단어 합치기','Baekjoon','https://www.acmicpc.net/problem/1372'),(373,1,'5','1373','2진수 8진수','Baekjoon','https://www.acmicpc.net/problem/1373'),(374,40,'11','1374','강의실','Baekjoon','https://www.acmicpc.net/problem/1374'),(375,40,'14','1375','나이','Baekjoon','https://www.acmicpc.net/problem/1375'),(376,200,'19','1376','민식우선탐색','Baekjoon','https://www.acmicpc.net/problem/1376'),(377,40,'14','1377','버블 소트','Baekjoon','https://www.acmicpc.net/problem/1377'),(378,0,'0','1378','증가 수열','Baekjoon','https://www.acmicpc.net/problem/1378'),(379,40,'13','1379','강의실 2','Baekjoon','https://www.acmicpc.net/problem/1379'),(380,8,'6','1380','귀걸이','Baekjoon','https://www.acmicpc.net/problem/1380'),(381,0,'0','1381','요구르트의 유통기한','Baekjoon','https://www.acmicpc.net/problem/1381'),(382,8,'6','1384','메시지','Baekjoon','https://www.acmicpc.net/problem/1384'),(383,200,'16','1385','벌집','Baekjoon','https://www.acmicpc.net/problem/1385'),(384,1000,'25','1386','f와 g','Baekjoon','https://www.acmicpc.net/problem/1386'),(385,0,'0','1387','행렬 교환','Baekjoon','https://www.acmicpc.net/problem/1387'),(386,8,'7','1388','바닥 장식','Baekjoon','https://www.acmicpc.net/problem/1388'),(387,8,'10','1389','케빈 베이컨의 6단계 법칙','Baekjoon','https://www.acmicpc.net/problem/1389'),(388,200,'19','1390','테트리스','Baekjoon','https://www.acmicpc.net/problem/1390'),(389,200,'19','1391','종이접기','Baekjoon','https://www.acmicpc.net/problem/1391'),(390,1,'4','1392','노래 악보','Baekjoon','https://www.acmicpc.net/problem/1392'),(391,8,'10','1393','음하철도 구구팔','Baekjoon','https://www.acmicpc.net/problem/1393'),(392,40,'11','1394','암호','Baekjoon','https://www.acmicpc.net/problem/1394'),(393,200,'18','1395','스위치','Baekjoon','https://www.acmicpc.net/problem/1395'),(394,200,'20','1396','크루스칼의 공','Baekjoon','https://www.acmicpc.net/problem/1396'),(395,0,'0','1397','인화철도 구구칠','Baekjoon','https://www.acmicpc.net/problem/1397'),(396,40,'14','1398','동전 문제','Baekjoon','https://www.acmicpc.net/problem/1398'),(397,200,'16','1399','보물의 위치','Baekjoon','https://www.acmicpc.net/problem/1399'),(398,40,'14','1400','화물차','Baekjoon','https://www.acmicpc.net/problem/1400'),(399,200,'18','1401','요컨대 형택이의 사탕봉지','Baekjoon','https://www.acmicpc.net/problem/1401'),(400,8,'6','1402','아무래도이문제는A번난이도인것같다','Baekjoon','https://www.acmicpc.net/problem/1402'),(401,8,'8','1404','토너먼트 승자','Baekjoon','https://www.acmicpc.net/problem/1404'),(402,40,'12','1405','미친 로봇','Baekjoon','https://www.acmicpc.net/problem/1405'),(403,8,'9','1406','에디터','Baekjoon','https://www.acmicpc.net/problem/1406'),(404,40,'12','1407','2로 몇 번 나누어질까','Baekjoon','https://www.acmicpc.net/problem/1407'),(405,1,'4','1408','24','Baekjoon','https://www.acmicpc.net/problem/1408'),(406,200,'16','1409','점 칠하기','Baekjoon','https://www.acmicpc.net/problem/1409'),(407,200,'17','1410','패턴의 개수','Baekjoon','https://www.acmicpc.net/problem/1410'),(408,8,'9','1411','비슷한 단어','Baekjoon','https://www.acmicpc.net/problem/1411'),(409,200,'17','1412','일방통행','Baekjoon','https://www.acmicpc.net/problem/1412'),(410,200,'16','1413','박스 안의 열쇠','Baekjoon','https://www.acmicpc.net/problem/1413'),(411,40,'13','1414','불우이웃돕기','Baekjoon','https://www.acmicpc.net/problem/1414'),(412,40,'15','1415','사탕','Baekjoon','https://www.acmicpc.net/problem/1415'),(413,200,'17','1416','팬 서비스','Baekjoon','https://www.acmicpc.net/problem/1416'),(414,8,'6','1417','국회의원 선거','Baekjoon','https://www.acmicpc.net/problem/1417'),(415,8,'6','1418','K-세준수','Baekjoon','https://www.acmicpc.net/problem/1418'),(416,40,'11','1419','등차수열의 합','Baekjoon','https://www.acmicpc.net/problem/1419'),(417,200,'19','1420','학교 가지마!','Baekjoon','https://www.acmicpc.net/problem/1420'),(418,8,'10','1421','나무꾼 이다솜','Baekjoon','https://www.acmicpc.net/problem/1421'),(419,200,'17','1422','숫자의 신','Baekjoon','https://www.acmicpc.net/problem/1422'),(420,40,'14','1423','원숭이 키우기','Baekjoon','https://www.acmicpc.net/problem/1423'),(421,40,'11','1424','새 앨범','Baekjoon','https://www.acmicpc.net/problem/1424'),(422,40,'14','1425','원숭이 땅을 옮기다','Baekjoon','https://www.acmicpc.net/problem/1425'),(423,200,'18','1426','카드 넣기','Baekjoon','https://www.acmicpc.net/problem/1426'),(424,8,'6','1427','소트인사이드','Baekjoon','https://www.acmicpc.net/problem/1427'),(425,0,'0','1428','다각형의 개수','Baekjoon','https://www.acmicpc.net/problem/1428'),(426,40,'14','1429','결혼','Baekjoon','https://www.acmicpc.net/problem/1429'),(427,40,'12','1430','공격','Baekjoon','https://www.acmicpc.net/problem/1430'),(428,8,'8','1431','시리얼 번호','Baekjoon','https://www.acmicpc.net/problem/1431'),(429,200,'17','1432','그래프 수정','Baekjoon','https://www.acmicpc.net/problem/1432'),(430,40,'15','1433','화학 실험','Baekjoon','https://www.acmicpc.net/problem/1433'),(431,1,'4','1434','책 정리','Baekjoon','https://www.acmicpc.net/problem/1434'),(432,200,'16','1435','네 점','Baekjoon','https://www.acmicpc.net/problem/1435'),(433,8,'6','1436','영화감독 숌','Baekjoon','https://www.acmicpc.net/problem/1436'),(434,40,'12','1437','수 분해','Baekjoon','https://www.acmicpc.net/problem/1437'),(435,40,'14','1438','가장 작은 직사각형','Baekjoon','https://www.acmicpc.net/problem/1438'),(436,8,'6','1439','뒤집기','Baekjoon','https://www.acmicpc.net/problem/1439'),(437,1,'4','1440','타임머신','Baekjoon','https://www.acmicpc.net/problem/1440'),(438,40,'15','1441','나누어 질까','Baekjoon','https://www.acmicpc.net/problem/1441'),(439,200,'19','1442','멋진 수','Baekjoon','https://www.acmicpc.net/problem/1442'),(440,40,'15','1443','망가진 계산기','Baekjoon','https://www.acmicpc.net/problem/1443'),(441,200,'19','1444','숌 언어','Baekjoon','https://www.acmicpc.net/problem/1444'),(442,40,'14','1445','일요일 아침의 데이트','Baekjoon','https://www.acmicpc.net/problem/1445'),(443,8,'10','1446','지름길','Baekjoon','https://www.acmicpc.net/problem/1446'),(444,0,'0','1447','보호 천막','Baekjoon','https://www.acmicpc.net/problem/1447'),(445,8,'8','1448','삼각형 만들기','Baekjoon','https://www.acmicpc.net/problem/1448'),(446,8,'8','1449','수리공 항승','Baekjoon','https://www.acmicpc.net/problem/1449'),(447,40,'15','1450','냅색문제','Baekjoon','https://www.acmicpc.net/problem/1450'),(448,40,'12','1451','직사각형으로 나누기','Baekjoon','https://www.acmicpc.net/problem/1451'),(449,0,'0','1452','숌 크로스워드','Baekjoon','https://www.acmicpc.net/problem/1452'),(450,1,'4','1453','피시방 알바','Baekjoon','https://www.acmicpc.net/problem/1453'),(451,0,'0','1454','세비 게임','Baekjoon','https://www.acmicpc.net/problem/1454'),(452,8,'10','1455','뒤집기 II','Baekjoon','https://www.acmicpc.net/problem/1455'),(453,40,'11','1456','거의 소수','Baekjoon','https://www.acmicpc.net/problem/1456'),(454,40,'15','1457','정확해','Baekjoon','https://www.acmicpc.net/problem/1457'),(455,0,'0','1458','종이 겹치기','Baekjoon','https://www.acmicpc.net/problem/1458'),(456,8,'7','1459','걷기','Baekjoon','https://www.acmicpc.net/problem/1459'),(457,40,'13','1460','진욱이의 농장','Baekjoon','https://www.acmicpc.net/problem/1460'),(458,40,'12','1461','도서관','Baekjoon','https://www.acmicpc.net/problem/1461'),(459,200,'17','1462','퀴즈쇼','Baekjoon','https://www.acmicpc.net/problem/1462'),(460,8,'8','1463','1로 만들기','Baekjoon','https://www.acmicpc.net/problem/1463'),(461,40,'12','1464','뒤집기 3','Baekjoon','https://www.acmicpc.net/problem/1464'),(462,0,'0','1465','배열 고치기','Baekjoon','https://www.acmicpc.net/problem/1465'),(463,40,'14','1466','그림 고치기','Baekjoon','https://www.acmicpc.net/problem/1466'),(464,200,'19','1467','수 지우기','Baekjoon','https://www.acmicpc.net/problem/1467'),(465,0,'0','1468','네트워크','Baekjoon','https://www.acmicpc.net/problem/1468'),(466,40,'11','1469','숌 사이 수열','Baekjoon','https://www.acmicpc.net/problem/1469'),(467,40,'15','1470','올림픽 게임','Baekjoon','https://www.acmicpc.net/problem/1470'),(468,200,'17','1471','사탕 돌리기','Baekjoon','https://www.acmicpc.net/problem/1471'),(469,0,'0','1472','전화번호','Baekjoon','https://www.acmicpc.net/problem/1472'),(470,200,'16','1473','미로 탈출','Baekjoon','https://www.acmicpc.net/problem/1473'),(471,8,'10','1474','밑 줄','Baekjoon','https://www.acmicpc.net/problem/1474'),(472,8,'6','1475','방 번호','Baekjoon','https://www.acmicpc.net/problem/1475'),(473,8,'6','1476','날짜 계산','Baekjoon','https://www.acmicpc.net/problem/1476'),(474,40,'12','1477','휴게소 세우기','Baekjoon','https://www.acmicpc.net/problem/1477'),(475,0,'0','1478','정사각형','Baekjoon','https://www.acmicpc.net/problem/1478'),(476,200,'18','1479','네 부분문자열','Baekjoon','https://www.acmicpc.net/problem/1479'),(477,40,'15','1480','보석 모으기','Baekjoon','https://www.acmicpc.net/problem/1480'),(478,40,'13','1481','숌 사각형','Baekjoon','https://www.acmicpc.net/problem/1481'),(479,200,'19','1482','같은 자리 수','Baekjoon','https://www.acmicpc.net/problem/1482'),(480,0,'0','1483','저항','Baekjoon','https://www.acmicpc.net/problem/1483'),(481,40,'11','1484','다이어트','Baekjoon','https://www.acmicpc.net/problem/1484'),(482,8,'8','1485','정사각형','Baekjoon','https://www.acmicpc.net/problem/1485'),(483,40,'14','1486','등산','Baekjoon','https://www.acmicpc.net/problem/1486'),(484,8,'7','1487','물건 팔기','Baekjoon','https://www.acmicpc.net/problem/1487'),(485,40,'12','1488','숌트링','Baekjoon','https://www.acmicpc.net/problem/1488'),(486,40,'15','1489','대결','Baekjoon','https://www.acmicpc.net/problem/1489'),(487,40,'11','1490','자리수로 나누기','Baekjoon','https://www.acmicpc.net/problem/1490'),(488,8,'7','1491','나선','Baekjoon','https://www.acmicpc.net/problem/1491'),(489,200,'19','1492','합','Baekjoon','https://www.acmicpc.net/problem/1492'),(490,40,'14','1493','박스 채우기','Baekjoon','https://www.acmicpc.net/problem/1493'),(491,200,'20','1494','절댓값 수열','Baekjoon','https://www.acmicpc.net/problem/1494'),(492,8,'10','1495','기타리스트','Baekjoon','https://www.acmicpc.net/problem/1495'),(493,0,'0','1496','기타 고르기','Baekjoon','https://www.acmicpc.net/problem/1496'),(494,8,'10','1497','기타콘서트','Baekjoon','https://www.acmicpc.net/problem/1497'),(495,200,'17','1498','주기문','Baekjoon','https://www.acmicpc.net/problem/1498'),(496,40,'15','1499','뒤집기 수열','Baekjoon','https://www.acmicpc.net/problem/1499'),(497,8,'9','1500','최대 곱','Baekjoon','https://www.acmicpc.net/problem/1500'),(498,40,'11','1501','영어 읽기','Baekjoon','https://www.acmicpc.net/problem/1501'),(499,200,'17','1502','숫자 퍼즐 ≤ 8','Baekjoon','https://www.acmicpc.net/problem/1502'),(500,8,'9','1503','세 수 고르기','Baekjoon','https://www.acmicpc.net/problem/1503'),(501,40,'12','1504','특정한 최단 경로','Baekjoon','https://www.acmicpc.net/problem/1504'),(502,200,'17','1505','불 켜기','Baekjoon','https://www.acmicpc.net/problem/1505'),(503,200,'16','1506','경찰서','Baekjoon','https://www.acmicpc.net/problem/1506'),(504,40,'14','1507','궁금한 민호','Baekjoon','https://www.acmicpc.net/problem/1507'),(505,40,'14','1508','레이스','Baekjoon','https://www.acmicpc.net/problem/1508'),(506,40,'15','1509','팰린드롬 분할','Baekjoon','https://www.acmicpc.net/problem/1509'),(507,200,'16','1510','이등변 삼각형','Baekjoon','https://www.acmicpc.net/problem/1510'),(508,200,'16','1511','숫자 만들기','Baekjoon','https://www.acmicpc.net/problem/1511'),(509,40,'11','1512','주기문으로 바꾸기','Baekjoon','https://www.acmicpc.net/problem/1512'),(510,40,'14','1513','경로 찾기','Baekjoon','https://www.acmicpc.net/problem/1513'),(511,200,'18','1514','자물쇠','Baekjoon','https://www.acmicpc.net/problem/1514'),(512,8,'8','1515','수 이어 쓰기','Baekjoon','https://www.acmicpc.net/problem/1515'),(513,40,'13','1516','게임 개발','Baekjoon','https://www.acmicpc.net/problem/1516'),(514,200,'16','1517','버블 소트','Baekjoon','https://www.acmicpc.net/problem/1517'),(515,200,'20','1518','뉴 매직 스퀘어','Baekjoon','https://www.acmicpc.net/problem/1518'),(516,40,'14','1519','부분 문자열 뽑기 게임','Baekjoon','https://www.acmicpc.net/problem/1519'),(517,40,'13','1520','내리막 길','Baekjoon','https://www.acmicpc.net/problem/1520'),(518,200,'16','1521','랜덤 소트','Baekjoon','https://www.acmicpc.net/problem/1521'),(519,8,'10','1522','문자열 교환','Baekjoon','https://www.acmicpc.net/problem/1522'),(520,200,'18','1523','종점','Baekjoon','https://www.acmicpc.net/problem/1523'),(521,1,'5','1524','세준세비','Baekjoon','https://www.acmicpc.net/problem/1524'),(522,40,'14','1525','퍼즐','Baekjoon','https://www.acmicpc.net/problem/1525'),(523,1,'5','1526','가장 큰 금민수','Baekjoon','https://www.acmicpc.net/problem/1526'),(524,8,'10','1527','금민수의 개수','Baekjoon','https://www.acmicpc.net/problem/1527'),(525,40,'13','1528','금민수의 합','Baekjoon','https://www.acmicpc.net/problem/1528'),(526,200,'16','1529','동민 수열','Baekjoon','https://www.acmicpc.net/problem/1529'),(527,200,'19','1530','금민수의 합','Baekjoon','https://www.acmicpc.net/problem/1530'),(528,8,'6','1531','투명','Baekjoon','https://www.acmicpc.net/problem/1531'),(529,40,'12','1532','동전 교환','Baekjoon','https://www.acmicpc.net/problem/1532'),(530,200,'18','1533','길의 개수','Baekjoon','https://www.acmicpc.net/problem/1533'),(531,200,'17','1534','다각형 자르기','Baekjoon','https://www.acmicpc.net/problem/1534'),(532,8,'9','1535','안녕','Baekjoon','https://www.acmicpc.net/problem/1535'),(533,200,'18','1536','Dance, Dance','Baekjoon','https://www.acmicpc.net/problem/1536'),(534,200,'16','1537','새로운 연산자','Baekjoon','https://www.acmicpc.net/problem/1537'),(535,1000,'22','1538','공 칠하기','Baekjoon','https://www.acmicpc.net/problem/1538'),(536,200,'16','1539','이진 검색 트리','Baekjoon','https://www.acmicpc.net/problem/1539'),(537,40,'13','1540','정사각형의 개수','Baekjoon','https://www.acmicpc.net/problem/1540'),(538,8,'9','1541','잃어버린 괄호','Baekjoon','https://www.acmicpc.net/problem/1541'),(539,200,'20','1542','체스 연습','Baekjoon','https://www.acmicpc.net/problem/1542'),(540,8,'6','1543','문서 검색','Baekjoon','https://www.acmicpc.net/problem/1543'),(541,8,'7','1544','사이클 단어','Baekjoon','https://www.acmicpc.net/problem/1544'),(542,40,'14','1545','안티 팰린드롬','Baekjoon','https://www.acmicpc.net/problem/1545'),(543,1,'5','1546','평균','Baekjoon','https://www.acmicpc.net/problem/1546'),(544,1,'3','1547','공','Baekjoon','https://www.acmicpc.net/problem/1547'),(545,40,'11','1548','부분 삼각 수열','Baekjoon','https://www.acmicpc.net/problem/1548'),(546,40,'12','1549','K','Baekjoon','https://www.acmicpc.net/problem/1549'),(547,1,'4','1550','16진수','Baekjoon','https://www.acmicpc.net/problem/1550'),(548,1,'5','1551','수열의 변화','Baekjoon','https://www.acmicpc.net/problem/1551'),(549,8,'10','1552','도미노','Baekjoon','https://www.acmicpc.net/problem/1552'),(550,40,'11','1553','도미노 찾기','Baekjoon','https://www.acmicpc.net/problem/1553'),(551,1000,'21','1554','나무 심기','Baekjoon','https://www.acmicpc.net/problem/1554'),(552,200,'16','1555','소수 만들기','Baekjoon','https://www.acmicpc.net/problem/1555'),(553,200,'18','1556','도미노2','Baekjoon','https://www.acmicpc.net/problem/1556'),(554,1000,'21','1557','제곱 ㄴㄴ','Baekjoon','https://www.acmicpc.net/problem/1557'),(555,0,'0','1558','그림의 개수','Baekjoon','https://www.acmicpc.net/problem/1558'),(556,200,'16','1559','놀라운 미로','Baekjoon','https://www.acmicpc.net/problem/1559'),(557,8,'8','1560','비숍','Baekjoon','https://www.acmicpc.net/problem/1560'),(558,40,'14','1561','놀이 공원','Baekjoon','https://www.acmicpc.net/problem/1561'),(559,40,'15','1562','계단 수','Baekjoon','https://www.acmicpc.net/problem/1562'),(560,40,'12','1563','개근상','Baekjoon','https://www.acmicpc.net/problem/1563'),(561,8,'10','1564','팩토리얼5','Baekjoon','https://www.acmicpc.net/problem/1564'),(562,40,'12','1565','수학','Baekjoon','https://www.acmicpc.net/problem/1565'),(563,40,'14','1566','P배열','Baekjoon','https://www.acmicpc.net/problem/1566'),(564,0,'0','1567','모든 사이클의 길이','Baekjoon','https://www.acmicpc.net/problem/1567'),(565,1,'4','1568','새','Baekjoon','https://www.acmicpc.net/problem/1568'),(566,8,'9','1569','정사각형으로 가리기','Baekjoon','https://www.acmicpc.net/problem/1569'),(567,40,'12','1570','오세준','Baekjoon','https://www.acmicpc.net/problem/1570'),(568,200,'16','1571','단어 굴리기','Baekjoon','https://www.acmicpc.net/problem/1571'),(569,200,'16','1572','중앙값','Baekjoon','https://www.acmicpc.net/problem/1572'),(570,200,'18','1573','트리 인코딩','Baekjoon','https://www.acmicpc.net/problem/1573'),(571,200,'18','1574','룩 어택','Baekjoon','https://www.acmicpc.net/problem/1574'),(572,200,'19','1575','졸업','Baekjoon','https://www.acmicpc.net/problem/1575'),(573,40,'12','1576','DNA점수','Baekjoon','https://www.acmicpc.net/problem/1576'),(574,40,'11','1577','도로의 개수','Baekjoon','https://www.acmicpc.net/problem/1577'),(575,40,'14','1578','세계 정복','Baekjoon','https://www.acmicpc.net/problem/1578'),(576,0,'0','1579','보물 찾기','Baekjoon','https://www.acmicpc.net/problem/1579'),(577,40,'13','1580','위치 바꾸기','Baekjoon','https://www.acmicpc.net/problem/1580'),(578,40,'12','1581','락스타 락동호','Baekjoon','https://www.acmicpc.net/problem/1581'),(579,200,'17','1582','아티스트 이동호','Baekjoon','https://www.acmicpc.net/problem/1582'),(580,0,'0','1583','이동호의 트럭','Baekjoon','https://www.acmicpc.net/problem/1583'),(581,40,'11','1584','게임','Baekjoon','https://www.acmicpc.net/problem/1584'),(582,200,'18','1585','경찰','Baekjoon','https://www.acmicpc.net/problem/1585'),(583,200,'18','1586','목장','Baekjoon','https://www.acmicpc.net/problem/1586'),(584,40,'15','1587','이분 매칭','Baekjoon','https://www.acmicpc.net/problem/1587'),(585,40,'15','1588','수열','Baekjoon','https://www.acmicpc.net/problem/1588'),(586,0,'0','1589','레이저','Baekjoon','https://www.acmicpc.net/problem/1589'),(587,8,'7','1590','캠프가는 영식','Baekjoon','https://www.acmicpc.net/problem/1590'),(588,200,'20','1591','수열 복원','Baekjoon','https://www.acmicpc.net/problem/1591'),(589,1,'4','1592','영식이와 친구들','Baekjoon','https://www.acmicpc.net/problem/1592'),(590,40,'11','1593','문자 해독','Baekjoon','https://www.acmicpc.net/problem/1593'),(591,40,'14','1594','전화번호 만들기','Baekjoon','https://www.acmicpc.net/problem/1594'),(592,40,'12','1595','북쪽나라의 도로','Baekjoon','https://www.acmicpc.net/problem/1595'),(593,0,'0','1596','영식함수','Baekjoon','https://www.acmicpc.net/problem/1596'),(594,0,'0','1597','아스키 아트','Baekjoon','https://www.acmicpc.net/problem/1597'),(595,1,'3','1598','꼬리를 무는 숫자 나열','Baekjoon','https://www.acmicpc.net/problem/1598'),(596,40,'11','1599','민식어','Baekjoon','https://www.acmicpc.net/problem/1599'),(597,40,'13','1600','말이 되고픈 원숭이','Baekjoon','https://www.acmicpc.net/problem/1600'),(598,200,'16','1601','바이너리 파워 비숍','Baekjoon','https://www.acmicpc.net/problem/1601'),(599,200,'18','1602','도망자 원숭이','Baekjoon','https://www.acmicpc.net/problem/1602'),(600,200,'19','1603','작은 정사각형','Baekjoon','https://www.acmicpc.net/problem/1603'),(601,200,'17','1604','정사각형 자르기','Baekjoon','https://www.acmicpc.net/problem/1604'),(602,200,'18','1605','반복 부분문자열','Baekjoon','https://www.acmicpc.net/problem/1605'),(603,8,'8','1606','침투 계획 세우기','Baekjoon','https://www.acmicpc.net/problem/1606'),(604,40,'14','1607','원숭이 타워','Baekjoon','https://www.acmicpc.net/problem/1607'),(605,1000,'22','1608','스타 대회','Baekjoon','https://www.acmicpc.net/problem/1608'),(606,200,'17','1609','차의 공격','Baekjoon','https://www.acmicpc.net/problem/1609'),(607,0,'0','1610','프로게이머 영식','Baekjoon','https://www.acmicpc.net/problem/1610'),(608,200,'17','1611','강강술래','Baekjoon','https://www.acmicpc.net/problem/1611'),(609,40,'11','1612','가지고 노는 1','Baekjoon','https://www.acmicpc.net/problem/1612'),(610,40,'13','1613','역사','Baekjoon','https://www.acmicpc.net/problem/1613'),(611,8,'8','1614','영식이의 손가락','Baekjoon','https://www.acmicpc.net/problem/1614'),(612,40,'15','1615','교차개수세기','Baekjoon','https://www.acmicpc.net/problem/1615'),(613,1000,'23','1616','드럼통 메시지','Baekjoon','https://www.acmicpc.net/problem/1616'),(614,200,'19','1617','허후민','Baekjoon','https://www.acmicpc.net/problem/1617'),(615,40,'15','1618','구역 나누기','Baekjoon','https://www.acmicpc.net/problem/1618'),(616,40,'14','1619','점 고르기','Baekjoon','https://www.acmicpc.net/problem/1619'),(617,8,'7','1620','나는야 포켓몬 마스터 이다솜','Baekjoon','https://www.acmicpc.net/problem/1620'),(618,40,'13','1621','조삼모사','Baekjoon','https://www.acmicpc.net/problem/1621'),(619,8,'7','1622','공통 순열','Baekjoon','https://www.acmicpc.net/problem/1622'),(620,40,'15','1623','신년 파티','Baekjoon','https://www.acmicpc.net/problem/1623'),(621,200,'20','1624','데크 소트','Baekjoon','https://www.acmicpc.net/problem/1624'),(622,40,'14','1625','조명기구','Baekjoon','https://www.acmicpc.net/problem/1625'),(623,1000,'22','1626','두 번째로 작은 스패닝 트리','Baekjoon','https://www.acmicpc.net/problem/1626'),(624,200,'20','1627','결투','Baekjoon','https://www.acmicpc.net/problem/1627'),(625,1000,'24','1628','수','Baekjoon','https://www.acmicpc.net/problem/1628'),(626,8,'10','1629','곱셈','Baekjoon','https://www.acmicpc.net/problem/1629'),(627,40,'12','1630','오민식','Baekjoon','https://www.acmicpc.net/problem/1630'),(628,40,'12','1631','오영식의 보물','Baekjoon','https://www.acmicpc.net/problem/1631'),(629,200,'19','1632','Line Fighter','Baekjoon','https://www.acmicpc.net/problem/1632'),(630,40,'12','1633','최고의 팀 만들기','Baekjoon','https://www.acmicpc.net/problem/1633'),(631,40,'14','1634','완전 이진트리','Baekjoon','https://www.acmicpc.net/problem/1634'),(632,200,'16','1635','1 또는 -1','Baekjoon','https://www.acmicpc.net/problem/1635'),(633,40,'12','1636','한번 열면 멈출 수 없어','Baekjoon','https://www.acmicpc.net/problem/1636'),(634,200,'17','1637','날카로운 눈','Baekjoon','https://www.acmicpc.net/problem/1637'),(635,200,'19','1638','컨벡스 헐','Baekjoon','https://www.acmicpc.net/problem/1638'),(636,8,'7','1639','행운의 티켓','Baekjoon','https://www.acmicpc.net/problem/1639'),(637,40,'13','1640','동전 뒤집기','Baekjoon','https://www.acmicpc.net/problem/1640'),(638,0,'0','1641','삼각형 개수 세기','Baekjoon','https://www.acmicpc.net/problem/1641'),(639,200,'20','1642','딱따구리','Baekjoon','https://www.acmicpc.net/problem/1642'),(640,40,'11','1643','쿠폰','Baekjoon','https://www.acmicpc.net/problem/1643'),(641,40,'13','1644','소수의 연속합','Baekjoon','https://www.acmicpc.net/problem/1644'),(642,0,'0','1645','성지의 생일파티','Baekjoon','https://www.acmicpc.net/problem/1645'),(643,40,'15','1646','피이보나치 트리','Baekjoon','https://www.acmicpc.net/problem/1646'),(644,40,'12','1647','도시 분할 계획','Baekjoon','https://www.acmicpc.net/problem/1647'),(645,200,'18','1648','격자판 채우기','Baekjoon','https://www.acmicpc.net/problem/1648'),(646,200,'17','1649','택시','Baekjoon','https://www.acmicpc.net/problem/1649'),(647,200,'19','1650','지민이의 테러 Season II','Baekjoon','https://www.acmicpc.net/problem/1650'),(648,0,'0','1651','숌 코드','Baekjoon','https://www.acmicpc.net/problem/1651'),(649,8,'6','1652','누울 자리를 찾아라','Baekjoon','https://www.acmicpc.net/problem/1652'),(650,200,'16','1653','양팔 저울','Baekjoon','https://www.acmicpc.net/problem/1653'),(651,8,'9','1654','랜선 자르기','Baekjoon','https://www.acmicpc.net/problem/1654'),(652,40,'14','1655','가운데를 말해요','Baekjoon','https://www.acmicpc.net/problem/1655'),(653,40,'13','1656','덜컹덜컹','Baekjoon','https://www.acmicpc.net/problem/1656'),(654,200,'18','1657','두부장수 장홍준','Baekjoon','https://www.acmicpc.net/problem/1657'),(655,200,'19','1658','돼지 잡기','Baekjoon','https://www.acmicpc.net/problem/1658'),(656,1000,'25','1659','수 (Hard)','Baekjoon','https://www.acmicpc.net/problem/1659'),(657,8,'10','1660','캡틴 이다솜','Baekjoon','https://www.acmicpc.net/problem/1660'),(658,40,'14','1661','다솜이의 신발가게','Baekjoon','https://www.acmicpc.net/problem/1661'),(659,40,'11','1662','압축','Baekjoon','https://www.acmicpc.net/problem/1662'),(660,40,'15','1663','XYZ 문자열','Baekjoon','https://www.acmicpc.net/problem/1663'),(661,40,'14','1664','주민등록번호','Baekjoon','https://www.acmicpc.net/problem/1664'),(662,200,'20','1665','화물열차','Baekjoon','https://www.acmicpc.net/problem/1665'),(663,200,'19','1666','최대 증가 직사각형 집합','Baekjoon','https://www.acmicpc.net/problem/1666'),(664,200,'17','1667','지민이의 테러 Season IV','Baekjoon','https://www.acmicpc.net/problem/1667'),(665,1,'4','1668','트로피 진열','Baekjoon','https://www.acmicpc.net/problem/1668'),(666,40,'11','1669','멍멍이 쓰다듬기','Baekjoon','https://www.acmicpc.net/problem/1669'),(667,40,'13','1670','정상 회담 2','Baekjoon','https://www.acmicpc.net/problem/1670'),(668,200,'18','1671','상어의 저녁식사','Baekjoon','https://www.acmicpc.net/problem/1671'),(669,1,'5','1672','DNA 해독','Baekjoon','https://www.acmicpc.net/problem/1672'),(670,1,'4','1673','치킨 쿠폰','Baekjoon','https://www.acmicpc.net/problem/1673'),(671,0,'0','1674','성준이와 초콜릿','Baekjoon','https://www.acmicpc.net/problem/1674'),(672,1000,'22','1675','팬더 밥주기','Baekjoon','https://www.acmicpc.net/problem/1675'),(673,8,'6','1676','팩토리얼 0의 개수','Baekjoon','https://www.acmicpc.net/problem/1676'),(674,40,'15','1677','음악','Baekjoon','https://www.acmicpc.net/problem/1677'),(675,8,'8','1678','기차','Baekjoon','https://www.acmicpc.net/problem/1678'),(676,8,'10','1679','숫자놀이','Baekjoon','https://www.acmicpc.net/problem/1679'),(677,8,'7','1680','쓰레기 수거','Baekjoon','https://www.acmicpc.net/problem/1680'),(678,1,'4','1681','줄 세우기','Baekjoon','https://www.acmicpc.net/problem/1681'),(679,8,'10','1682','돌리기','Baekjoon','https://www.acmicpc.net/problem/1682'),(680,0,'0','1683','책장 맨 윗칸','Baekjoon','https://www.acmicpc.net/problem/1683'),(681,40,'11','1684','같은 나머지','Baekjoon','https://www.acmicpc.net/problem/1684'),(682,200,'19','1685','숫자놀이 2','Baekjoon','https://www.acmicpc.net/problem/1685'),(683,40,'12','1686','복날','Baekjoon','https://www.acmicpc.net/problem/1686'),(684,40,'13','1687','행렬 찾기','Baekjoon','https://www.acmicpc.net/problem/1687'),(685,200,'17','1688','지민이의 테러','Baekjoon','https://www.acmicpc.net/problem/1688'),(686,40,'12','1689','겹치는 선분','Baekjoon','https://www.acmicpc.net/problem/1689'),(687,200,'17','1690','순열','Baekjoon','https://www.acmicpc.net/problem/1690'),(688,40,'15','1691','석판','Baekjoon','https://www.acmicpc.net/problem/1691'),(689,200,'20','1692','뒤집기','Baekjoon','https://www.acmicpc.net/problem/1692'),(690,200,'19','1693','트리 색칠하기','Baekjoon','https://www.acmicpc.net/problem/1693'),(691,40,'11','1694','Chessboard in FEN','Baekjoon','https://www.acmicpc.net/problem/1694'),(692,40,'13','1695','팰린드롬 만들기','Baekjoon','https://www.acmicpc.net/problem/1695'),(693,0,'0','1696','색 막대','Baekjoon','https://www.acmicpc.net/problem/1696'),(694,8,'10','1697','숨바꼭질','Baekjoon','https://www.acmicpc.net/problem/1697'),(695,0,'0','1698','보안 패널','Baekjoon','https://www.acmicpc.net/problem/1698'),(696,8,'9','1699','제곱수의 합','Baekjoon','https://www.acmicpc.net/problem/1699'),(697,40,'15','1700','멀티탭 스케줄링','Baekjoon','https://www.acmicpc.net/problem/1700'),(698,40,'13','1701','Cubeditor','Baekjoon','https://www.acmicpc.net/problem/1701'),(699,200,'16','1702','고속도로','Baekjoon','https://www.acmicpc.net/problem/1702'),(700,1,'3','1703','생장점','Baekjoon','https://www.acmicpc.net/problem/1703'),(701,200,'16','1704','붕어빵타이쿤','Baekjoon','https://www.acmicpc.net/problem/1704'),(702,0,'0','1705','컵','Baekjoon','https://www.acmicpc.net/problem/1705'),(703,8,'9','1706','크로스워드','Baekjoon','https://www.acmicpc.net/problem/1706'),(704,40,'12','1707','이분 그래프','Baekjoon','https://www.acmicpc.net/problem/1707'),(705,200,'16','1708','볼록 껍질','Baekjoon','https://www.acmicpc.net/problem/1708'),(706,40,'11','1709','타일 위의 원','Baekjoon','https://www.acmicpc.net/problem/1709'),(707,200,'17','1710','Flattening Tables','Baekjoon','https://www.acmicpc.net/problem/1710'),(708,40,'11','1711','직각삼각형','Baekjoon','https://www.acmicpc.net/problem/1711'),(709,1,'4','1712','손익분기점','Baekjoon','https://www.acmicpc.net/problem/1712'),(710,8,'10','1713','후보 추천하기','Baekjoon','https://www.acmicpc.net/problem/1713'),(711,40,'12','1715','카드 정렬하기','Baekjoon','https://www.acmicpc.net/problem/1715'),(712,8,'7','1716','Polynomial Remains','Baekjoon','https://www.acmicpc.net/problem/1716'),(713,40,'11','1717','집합의 표현','Baekjoon','https://www.acmicpc.net/problem/1717'),(714,1,'4','1718','암호','Baekjoon','https://www.acmicpc.net/problem/1718'),(715,40,'13','1719','택배','Baekjoon','https://www.acmicpc.net/problem/1719'),(716,40,'12','1720','타일 코드','Baekjoon','https://www.acmicpc.net/problem/1720'),(717,40,'13','1721','상자퍼즐','Baekjoon','https://www.acmicpc.net/problem/1721'),(718,40,'11','1722','순열의 순서','Baekjoon','https://www.acmicpc.net/problem/1722'),(719,40,'15','1723','점 나누기','Baekjoon','https://www.acmicpc.net/problem/1723'),(720,40,'14','1724','그림판','Baekjoon','https://www.acmicpc.net/problem/1724'),(721,200,'16','1725','히스토그램','Baekjoon','https://www.acmicpc.net/problem/1725'),(722,40,'13','1726','로봇','Baekjoon','https://www.acmicpc.net/problem/1726'),(723,40,'14','1727','커플 만들기','Baekjoon','https://www.acmicpc.net/problem/1727'),(724,200,'17','1728','구슬 굴리기','Baekjoon','https://www.acmicpc.net/problem/1728'),(725,200,'16','1729','이차원 배열의 합','Baekjoon','https://www.acmicpc.net/problem/1729'),(726,8,'7','1730','판화','Baekjoon','https://www.acmicpc.net/problem/1730'),(727,1,'4','1731','추론','Baekjoon','https://www.acmicpc.net/problem/1731'),(728,40,'14','1732','레이저','Baekjoon','https://www.acmicpc.net/problem/1732'),(729,200,'20','1733','등번호','Baekjoon','https://www.acmicpc.net/problem/1733'),(730,200,'20','1734','교통 체계','Baekjoon','https://www.acmicpc.net/problem/1734'),(731,8,'8','1735','분수 합','Baekjoon','https://www.acmicpc.net/problem/1735'),(732,40,'15','1736','쓰레기 치우기','Baekjoon','https://www.acmicpc.net/problem/1736'),(733,40,'12','1737','Pibonacci','Baekjoon','https://www.acmicpc.net/problem/1737'),(734,40,'15','1738','골목길','Baekjoon','https://www.acmicpc.net/problem/1738'),(735,1000,'21','1739','도로 정비하기','Baekjoon','https://www.acmicpc.net/problem/1739'),(736,8,'7','1740','거듭제곱','Baekjoon','https://www.acmicpc.net/problem/1740'),(737,200,'19','1741','반 나누기','Baekjoon','https://www.acmicpc.net/problem/1741'),(738,200,'17','1742','레이싱결과','Baekjoon','https://www.acmicpc.net/problem/1742'),(739,8,'10','1743','음식물 피하기','Baekjoon','https://www.acmicpc.net/problem/1743'),(740,40,'12','1744','수 묶기','Baekjoon','https://www.acmicpc.net/problem/1744'),(741,200,'20','1745','숨기','Baekjoon','https://www.acmicpc.net/problem/1745'),(742,200,'18','1746','Cow Relays','Baekjoon','https://www.acmicpc.net/problem/1746'),(743,8,'10','1747','소수&팰린드롬','Baekjoon','https://www.acmicpc.net/problem/1747'),(744,8,'7','1748','수 이어 쓰기 1','Baekjoon','https://www.acmicpc.net/problem/1748'),(745,40,'12','1749','점수따먹기','Baekjoon','https://www.acmicpc.net/problem/1749'),(746,40,'13','1750','서로소의 개수','Baekjoon','https://www.acmicpc.net/problem/1750'),(747,200,'18','1751','디버그','Baekjoon','https://www.acmicpc.net/problem/1751'),(748,200,'19','1752','세상에서 제일 착한 다솜','Baekjoon','https://www.acmicpc.net/problem/1752'),(749,40,'12','1753','최단경로','Baekjoon','https://www.acmicpc.net/problem/1753'),(750,200,'18','1754','진영 순열','Baekjoon','https://www.acmicpc.net/problem/1754'),(751,8,'7','1755','숫자놀이','Baekjoon','https://www.acmicpc.net/problem/1755'),(752,40,'11','1756','피자 굽기','Baekjoon','https://www.acmicpc.net/problem/1756'),(753,40,'12','1757','달려달려','Baekjoon','https://www.acmicpc.net/problem/1757'),(754,8,'7','1758','알바생 강호','Baekjoon','https://www.acmicpc.net/problem/1758'),(755,40,'11','1759','암호 만들기','Baekjoon','https://www.acmicpc.net/problem/1759'),(756,200,'18','1760','N-Rook','Baekjoon','https://www.acmicpc.net/problem/1760'),(757,200,'16','1761','정점들의 거리','Baekjoon','https://www.acmicpc.net/problem/1761'),(758,200,'18','1762','평면그래프와 삼각형','Baekjoon','https://www.acmicpc.net/problem/1762'),(759,1000,'24','1763','트리 색칠','Baekjoon','https://www.acmicpc.net/problem/1763'),(760,8,'7','1764','듣보잡','Baekjoon','https://www.acmicpc.net/problem/1764'),(761,40,'14','1765','닭싸움 팀 정하기','Baekjoon','https://www.acmicpc.net/problem/1765'),(762,40,'14','1766','문제집','Baekjoon','https://www.acmicpc.net/problem/1766'),(763,200,'18','1767','N-Rook II','Baekjoon','https://www.acmicpc.net/problem/1767'),(764,8,'9','1768','Center of symmetry','Baekjoon','https://www.acmicpc.net/problem/1768'),(765,8,'6','1769','3의 배수','Baekjoon','https://www.acmicpc.net/problem/1769'),(766,1000,'22','1770','배수와 약수의 개수','Baekjoon','https://www.acmicpc.net/problem/1770'),(767,40,'14','1771','카드 묶음','Baekjoon','https://www.acmicpc.net/problem/1771'),(768,200,'19','1772','정원 정리','Baekjoon','https://www.acmicpc.net/problem/1772'),(769,1,'4','1773','폭죽쇼','Baekjoon','https://www.acmicpc.net/problem/1773'),(770,40,'13','1774','우주신과의 교감','Baekjoon','https://www.acmicpc.net/problem/1774'),(771,40,'11','1775','ASCII Labyrinth','Baekjoon','https://www.acmicpc.net/problem/1775'),(772,0,'0','1776','깜짝 선물','Baekjoon','https://www.acmicpc.net/problem/1776'),(773,200,'16','1777','순열복원','Baekjoon','https://www.acmicpc.net/problem/1777'),(774,8,'10','1778','Ubiquitous Religions','Baekjoon','https://www.acmicpc.net/problem/1778'),(775,8,'9','1779','Text Formalization','Baekjoon','https://www.acmicpc.net/problem/1779'),(776,8,'9','1780','종이의 개수','Baekjoon','https://www.acmicpc.net/problem/1780'),(777,40,'14','1781','컵라면','Baekjoon','https://www.acmicpc.net/problem/1781'),(778,200,'16','1782','거울 숫자','Baekjoon','https://www.acmicpc.net/problem/1782'),(779,8,'8','1783','병든 나이트','Baekjoon','https://www.acmicpc.net/problem/1783'),(780,40,'14','1784','팰린드롬 인코딩','Baekjoon','https://www.acmicpc.net/problem/1784'),(781,200,'18','1785','팀 사모예드의 신작','Baekjoon','https://www.acmicpc.net/problem/1785'),(782,200,'16','1786','찾기','Baekjoon','https://www.acmicpc.net/problem/1786'),(783,200,'19','1787','문자열의 주기 예측','Baekjoon','https://www.acmicpc.net/problem/1787'),(784,8,'8','1788','피보나치 수의 확장','Baekjoon','https://www.acmicpc.net/problem/1788'),(785,8,'6','1789','수들의 합','Baekjoon','https://www.acmicpc.net/problem/1789'),(786,40,'11','1790','수 이어 쓰기 2','Baekjoon','https://www.acmicpc.net/problem/1790'),(787,40,'14','1791','Queuing at the doctors','Baekjoon','https://www.acmicpc.net/problem/1791'),(788,1000,'21','1792','공약수','Baekjoon','https://www.acmicpc.net/problem/1792'),(789,8,'9','1793','타일링','Baekjoon','https://www.acmicpc.net/problem/1793'),(790,40,'13','1795','마알','Baekjoon','https://www.acmicpc.net/problem/1795'),(791,40,'12','1796','신기한 키보드','Baekjoon','https://www.acmicpc.net/problem/1796'),(792,40,'14','1797','균형잡힌 줄서기','Baekjoon','https://www.acmicpc.net/problem/1797'),(793,40,'15','1798','원뿔좌표계상의 거리','Baekjoon','https://www.acmicpc.net/problem/1798'),(794,40,'15','1799','비숍','Baekjoon','https://www.acmicpc.net/problem/1799'),(795,40,'15','1800','인터넷 설치','Baekjoon','https://www.acmicpc.net/problem/1800'),(796,200,'17','1801','직사각형 만들기','Baekjoon','https://www.acmicpc.net/problem/1801'),(797,8,'10','1802','종이 접기','Baekjoon','https://www.acmicpc.net/problem/1802'),(798,40,'15','1803','무술 연습','Baekjoon','https://www.acmicpc.net/problem/1803'),(799,200,'18','1804','랩싸기','Baekjoon','https://www.acmicpc.net/problem/1804'),(800,1000,'22','1805','나무수송','Baekjoon','https://www.acmicpc.net/problem/1805'),(801,40,'12','1806','부분합','Baekjoon','https://www.acmicpc.net/problem/1806'),(802,40,'14','1807','척 노리스','Baekjoon','https://www.acmicpc.net/problem/1807'),(803,40,'13','1808','숌작업','Baekjoon','https://www.acmicpc.net/problem/1808'),(804,1,'1','1809','Moo','Baekjoon','https://www.acmicpc.net/problem/1809'),(805,40,'13','1810','징검다리 달리기 2','Baekjoon','https://www.acmicpc.net/problem/1810'),(806,8,'6','1811','Adjacent Mastermind','Baekjoon','https://www.acmicpc.net/problem/1811'),(807,8,'7','1812','사탕','Baekjoon','https://www.acmicpc.net/problem/1812'),(808,1,'5','1813','논리학 교수','Baekjoon','https://www.acmicpc.net/problem/1813'),(809,200,'19','1814','지붕 색칠하기','Baekjoon','https://www.acmicpc.net/problem/1814'),(810,0,'0','1815','방송국','Baekjoon','https://www.acmicpc.net/problem/1815'),(811,1,'5','1816','암호 키','Baekjoon','https://www.acmicpc.net/problem/1816'),(812,8,'6','1817','짐 챙기는 숌','Baekjoon','https://www.acmicpc.net/problem/1817'),(813,40,'14','1818','책정리','Baekjoon','https://www.acmicpc.net/problem/1818'),(814,200,'16','1819','불끄기','Baekjoon','https://www.acmicpc.net/problem/1819'),(815,40,'14','1820','Partitioning for fun and profit','Baekjoon','https://www.acmicpc.net/problem/1820'),(816,8,'10','1821','수들의 합 6','Baekjoon','https://www.acmicpc.net/problem/1821'),(817,8,'7','1822','차집합','Baekjoon','https://www.acmicpc.net/problem/1822'),(818,40,'13','1823','수확','Baekjoon','https://www.acmicpc.net/problem/1823'),(819,200,'18','1824','도미노','Baekjoon','https://www.acmicpc.net/problem/1824'),(820,200,'18','1825','순열 만들기','Baekjoon','https://www.acmicpc.net/problem/1825'),(821,40,'14','1826','연료 채우기','Baekjoon','https://www.acmicpc.net/problem/1826'),(822,40,'14','1827','여행가이드','Baekjoon','https://www.acmicpc.net/problem/1827'),(823,40,'12','1828','Traveling Salesman','Baekjoon','https://www.acmicpc.net/problem/1828'),(824,200,'17','1829','사탕 항아리','Baekjoon','https://www.acmicpc.net/problem/1829'),(825,1000,'21','1830','거리','Baekjoon','https://www.acmicpc.net/problem/1830'),(826,200,'16','1831','과수원','Baekjoon','https://www.acmicpc.net/problem/1831'),(827,200,'19','1832','카우보이','Baekjoon','https://www.acmicpc.net/problem/1832'),(828,40,'13','1833','고속철도 설계하기','Baekjoon','https://www.acmicpc.net/problem/1833'),(829,1,'5','1834','나머지와 몫이 같은 수','Baekjoon','https://www.acmicpc.net/problem/1834'),(830,8,'7','1835','카드','Baekjoon','https://www.acmicpc.net/problem/1835'),(831,200,'17','1836','트리의 가짓수 세기','Baekjoon','https://www.acmicpc.net/problem/1836'),(832,1,'3','1837','암호제작','Baekjoon','https://www.acmicpc.net/problem/1837'),(833,40,'15','1838','버블 정렬','Baekjoon','https://www.acmicpc.net/problem/1838'),(834,1000,'22','1839','트리 모델 만들기','Baekjoon','https://www.acmicpc.net/problem/1839'),(835,1000,'24','1840','스도쿠','Baekjoon','https://www.acmicpc.net/problem/1840'),(836,1000,'23','1841','군사 배치','Baekjoon','https://www.acmicpc.net/problem/1841'),(837,1000,'25','1842','게임하기','Baekjoon','https://www.acmicpc.net/problem/1842'),(838,40,'13','1843','방정식','Baekjoon','https://www.acmicpc.net/problem/1843'),(839,0,'0','1844','농지 정리','Baekjoon','https://www.acmicpc.net/problem/1844'),(840,3000,'30','1845','배열 회전','Baekjoon','https://www.acmicpc.net/problem/1845'),(841,40,'12','1846','장기','Baekjoon','https://www.acmicpc.net/problem/1846'),(842,40,'15','1847','볼록다각형 만들기','Baekjoon','https://www.acmicpc.net/problem/1847'),(843,1000,'21','1848','동굴 탐험','Baekjoon','https://www.acmicpc.net/problem/1848'),(844,200,'16','1849','순열','Baekjoon','https://www.acmicpc.net/problem/1849'),(845,8,'10','1850','최대공약수','Baekjoon','https://www.acmicpc.net/problem/1850'),(846,200,'20','1851','추 정렬하기','Baekjoon','https://www.acmicpc.net/problem/1851'),(847,200,'16','1852','수 묶기','Baekjoon','https://www.acmicpc.net/problem/1852'),(848,1000,'21','1853','정사영','Baekjoon','https://www.acmicpc.net/problem/1853'),(849,200,'17','1854','K번째 최단경로 찾기','Baekjoon','https://www.acmicpc.net/problem/1854'),(850,1,'5','1855','암호','Baekjoon','https://www.acmicpc.net/problem/1855'),(851,40,'15','1856','단어 게임','Baekjoon','https://www.acmicpc.net/problem/1856'),(852,200,'20','1857','발레리노','Baekjoon','https://www.acmicpc.net/problem/1857'),(853,200,'16','1858','기울기가 가장 큰 두 점','Baekjoon','https://www.acmicpc.net/problem/1858'),(854,1000,'23','1859','성적','Baekjoon','https://www.acmicpc.net/problem/1859'),(855,200,'19','1860','거미줄','Baekjoon','https://www.acmicpc.net/problem/1860'),(856,0,'0','1861','경로 찾기','Baekjoon','https://www.acmicpc.net/problem/1861'),(857,8,'7','1862','미터계','Baekjoon','https://www.acmicpc.net/problem/1862'),(858,40,'12','1863','스카이라인 쉬운거','Baekjoon','https://www.acmicpc.net/problem/1863'),(859,1,'4','1864','문어 숫자','Baekjoon','https://www.acmicpc.net/problem/1864'),(860,40,'13','1865','웜홀','Baekjoon','https://www.acmicpc.net/problem/1865'),(861,200,'17','1866','택배','Baekjoon','https://www.acmicpc.net/problem/1866'),(862,200,'18','1867','돌멩이 제거','Baekjoon','https://www.acmicpc.net/problem/1867'),(863,3000,'26','1868','보물찾기','Baekjoon','https://www.acmicpc.net/problem/1868'),(864,0,'0','1869','육각형','Baekjoon','https://www.acmicpc.net/problem/1869'),(865,0,'0','1870','지붕 제작','Baekjoon','https://www.acmicpc.net/problem/1870'),(866,1,'4','1871','좋은 자동차 번호판','Baekjoon','https://www.acmicpc.net/problem/1871'),(867,40,'12','1872','로마 숫자','Baekjoon','https://www.acmicpc.net/problem/1872'),(868,1000,'21','1873','색종이 자르기','Baekjoon','https://www.acmicpc.net/problem/1873'),(869,8,'9','1874','스택 수열','Baekjoon','https://www.acmicpc.net/problem/1874'),(870,40,'14','1875','테트리스','Baekjoon','https://www.acmicpc.net/problem/1875'),(871,8,'9','1876','튕기는 볼링공','Baekjoon','https://www.acmicpc.net/problem/1876'),(872,40,'12','1877','끔찍한 수열','Baekjoon','https://www.acmicpc.net/problem/1877'),(873,40,'15','1878','천칭 저울','Baekjoon','https://www.acmicpc.net/problem/1878'),(874,1000,'21','1879','부끄러운 다각형','Baekjoon','https://www.acmicpc.net/problem/1879'),(875,0,'0','1880','Big Brother','Baekjoon','https://www.acmicpc.net/problem/1880'),(876,40,'14','1881','공 바꾸기','Baekjoon','https://www.acmicpc.net/problem/1881'),(877,200,'18','1882','분수 찾기','Baekjoon','https://www.acmicpc.net/problem/1882'),(878,200,'19','1883','1&&3','Baekjoon','https://www.acmicpc.net/problem/1883'),(879,40,'15','1884','고속도로','Baekjoon','https://www.acmicpc.net/problem/1884'),(880,40,'13','1885','비부분수열','Baekjoon','https://www.acmicpc.net/problem/1885'),(881,1000,'21','1886','프리즌 브레이크','Baekjoon','https://www.acmicpc.net/problem/1886'),(882,40,'11','1887','Cow Pizza','Baekjoon','https://www.acmicpc.net/problem/1887'),(883,40,'13','1888','곰팡이','Baekjoon','https://www.acmicpc.net/problem/1888'),(884,40,'12','1889','선물 교환','Baekjoon','https://www.acmicpc.net/problem/1889'),(885,8,'10','1890','점프','Baekjoon','https://www.acmicpc.net/problem/1890'),(886,40,'12','1891','사분면','Baekjoon','https://www.acmicpc.net/problem/1891'),(887,40,'15','1892','가위바위보','Baekjoon','https://www.acmicpc.net/problem/1892'),(888,200,'17','1893','시저 암호','Baekjoon','https://www.acmicpc.net/problem/1893'),(889,1,'5','1894','4번째 점','Baekjoon','https://www.acmicpc.net/problem/1894'),(890,8,'7','1895','필터','Baekjoon','https://www.acmicpc.net/problem/1895'),(891,40,'12','1896','파급효과','Baekjoon','https://www.acmicpc.net/problem/1896'),(892,40,'11','1897','토달기','Baekjoon','https://www.acmicpc.net/problem/1897'),(893,40,'14','1898','이전 수열은 어떤 수열일까','Baekjoon','https://www.acmicpc.net/problem/1898'),(894,0,'0','1899','월드인의 공부 스타일','Baekjoon','https://www.acmicpc.net/problem/1899'),(895,8,'9','1900','레슬러','Baekjoon','https://www.acmicpc.net/problem/1900'),(896,200,'19','1901','논리식','Baekjoon','https://www.acmicpc.net/problem/1901'),(897,40,'13','1902','špilja','Baekjoon','https://www.acmicpc.net/problem/1902'),(898,8,'8','1904','01타일','Baekjoon','https://www.acmicpc.net/problem/1904'),(899,40,'12','1905','상자 쌓기','Baekjoon','https://www.acmicpc.net/problem/1905'),(900,200,'18','1906','자리 바꾸기','Baekjoon','https://www.acmicpc.net/problem/1906'),(901,8,'7','1907','탄소 화합물','Baekjoon','https://www.acmicpc.net/problem/1907'),(902,200,'16','1908','곱셈 전개식','Baekjoon','https://www.acmicpc.net/problem/1908'),(903,1000,'22','1909','냄새 싫어','Baekjoon','https://www.acmicpc.net/problem/1909'),(904,1000,'21','1910','위닝','Baekjoon','https://www.acmicpc.net/problem/1910'),(905,40,'11','1911','흙길 보수하기','Baekjoon','https://www.acmicpc.net/problem/1911'),(906,8,'9','1912','연속합','Baekjoon','https://www.acmicpc.net/problem/1912'),(907,8,'8','1913','달팽이','Baekjoon','https://www.acmicpc.net/problem/1913'),(908,8,'10','1914','하노이 탑','Baekjoon','https://www.acmicpc.net/problem/1914'),(909,40,'12','1915','가장 큰 정사각형','Baekjoon','https://www.acmicpc.net/problem/1915'),(910,40,'11','1916','최소비용 구하기','Baekjoon','https://www.acmicpc.net/problem/1916'),(911,40,'15','1917','정육면체 전개도','Baekjoon','https://www.acmicpc.net/problem/1917'),(912,40,'14','1918','후위 표기식','Baekjoon','https://www.acmicpc.net/problem/1918'),(913,1,'4','1919','애너그램 만들기','Baekjoon','https://www.acmicpc.net/problem/1919'),(914,8,'7','1920','수 찾기','Baekjoon','https://www.acmicpc.net/problem/1920'),(915,3000,'29','1921','트리와 쿼리 20','Baekjoon','https://www.acmicpc.net/problem/1921'),(916,40,'12','1922','네트워크 연결','Baekjoon','https://www.acmicpc.net/problem/1922'),(917,1,'5','1924','2007년','Baekjoon','https://www.acmicpc.net/problem/1924'),(918,8,'7','1925','삼각형','Baekjoon','https://www.acmicpc.net/problem/1925'),(919,8,'10','1926','그림','Baekjoon','https://www.acmicpc.net/problem/1926'),(920,8,'9','1927','최소 힙','Baekjoon','https://www.acmicpc.net/problem/1927'),(921,0,'0','1928','게임고안','Baekjoon','https://www.acmicpc.net/problem/1928'),(922,8,'8','1929','소수 구하기','Baekjoon','https://www.acmicpc.net/problem/1929'),(923,40,'12','1930','정사면체','Baekjoon','https://www.acmicpc.net/problem/1930'),(924,8,'10','1931','회의실 배정','Baekjoon','https://www.acmicpc.net/problem/1931'),(925,8,'10','1932','정수 삼각형','Baekjoon','https://www.acmicpc.net/problem/1932'),(926,40,'15','1933','스카이라인','Baekjoon','https://www.acmicpc.net/problem/1933'),(927,1,'5','1934','최소공배수','Baekjoon','https://www.acmicpc.net/problem/1934'),(928,8,'8','1935','후위 표기식2','Baekjoon','https://www.acmicpc.net/problem/1935'),(929,1000,'24','1936','재미있는 수학 문제','Baekjoon','https://www.acmicpc.net/problem/1936'),(930,40,'13','1937','욕심쟁이 판다','Baekjoon','https://www.acmicpc.net/problem/1937'),(931,40,'14','1938','통나무 옮기기','Baekjoon','https://www.acmicpc.net/problem/1938'),(932,40,'13','1939','중량제한','Baekjoon','https://www.acmicpc.net/problem/1939'),(933,8,'7','1940','주몽','Baekjoon','https://www.acmicpc.net/problem/1940'),(934,40,'13','1941','소문난 칠공주','Baekjoon','https://www.acmicpc.net/problem/1941'),(935,1,'4','1942','디지털시계','Baekjoon','https://www.acmicpc.net/problem/1942'),(936,40,'14','1943','동전 분배','Baekjoon','https://www.acmicpc.net/problem/1943'),(937,40,'15','1944','복제 로봇','Baekjoon','https://www.acmicpc.net/problem/1944'),(938,40,'14','1945','직사각형','Baekjoon','https://www.acmicpc.net/problem/1945'),(939,8,'10','1946','신입 사원','Baekjoon','https://www.acmicpc.net/problem/1946'),(940,40,'13','1947','선물 전달','Baekjoon','https://www.acmicpc.net/problem/1947'),(941,200,'16','1948','임계경로','Baekjoon','https://www.acmicpc.net/problem/1948'),(942,40,'14','1949','우수 마을','Baekjoon','https://www.acmicpc.net/problem/1949'),(943,0,'0','1950','지도','Baekjoon','https://www.acmicpc.net/problem/1950'),(944,8,'8','1951','활자','Baekjoon','https://www.acmicpc.net/problem/1951'),(945,1,'5','1952','달팽이2','Baekjoon','https://www.acmicpc.net/problem/1952'),(946,40,'12','1953','팀배분','Baekjoon','https://www.acmicpc.net/problem/1953'),(947,40,'12','1954','화학실험','Baekjoon','https://www.acmicpc.net/problem/1954'),(948,40,'14','1955','수식 표현','Baekjoon','https://www.acmicpc.net/problem/1955'),(949,40,'12','1956','운동','Baekjoon','https://www.acmicpc.net/problem/1956'),(950,200,'20','1957','앉았다 일어나기','Baekjoon','https://www.acmicpc.net/problem/1957'),(951,40,'12','1958','LCS 3','Baekjoon','https://www.acmicpc.net/problem/1958'),(952,40,'13','1959','달팽이3','Baekjoon','https://www.acmicpc.net/problem/1959'),(953,40,'14','1960','행렬만들기','Baekjoon','https://www.acmicpc.net/problem/1960'),(954,200,'17','1962','한글 ㄴㄴ 수','Baekjoon','https://www.acmicpc.net/problem/1962'),(955,40,'12','1963','소수 경로','Baekjoon','https://www.acmicpc.net/problem/1963'),(956,1,'4','1964','오각형, 오각형, 오각형…','Baekjoon','https://www.acmicpc.net/problem/1964'),(957,8,'9','1965','상자넣기','Baekjoon','https://www.acmicpc.net/problem/1965'),(958,8,'8','1966','프린터 큐','Baekjoon','https://www.acmicpc.net/problem/1966'),(959,40,'12','1967','트리의 지름','Baekjoon','https://www.acmicpc.net/problem/1967'),(960,0,'0','1968','우체부','Baekjoon','https://www.acmicpc.net/problem/1968'),(961,8,'7','1969','DNA','Baekjoon','https://www.acmicpc.net/problem/1969'),(962,200,'16','1970','건배','Baekjoon','https://www.acmicpc.net/problem/1970'),(963,1000,'23','1971','High Spies','Baekjoon','https://www.acmicpc.net/problem/1971'),(964,8,'8','1972','놀라운 문자열','Baekjoon','https://www.acmicpc.net/problem/1972'),(965,0,'0','1973','버스 노선','Baekjoon','https://www.acmicpc.net/problem/1973'),(966,200,'16','1974','Jump Jump Championship','Baekjoon','https://www.acmicpc.net/problem/1974'),(967,1,'4','1975','Number Game','Baekjoon','https://www.acmicpc.net/problem/1975'),(968,40,'12','1976','여행 가자','Baekjoon','https://www.acmicpc.net/problem/1976'),(969,1,'4','1977','완전제곱수','Baekjoon','https://www.acmicpc.net/problem/1977'),(970,1,'4','1978','소수 찾기','Baekjoon','https://www.acmicpc.net/problem/1978'),(971,200,'16','1979','극적인 곱셈','Baekjoon','https://www.acmicpc.net/problem/1979'),(972,8,'7','1980','햄버거 사랑','Baekjoon','https://www.acmicpc.net/problem/1980'),(973,200,'16','1981','배열에서 이동','Baekjoon','https://www.acmicpc.net/problem/1981'),(974,200,'17','1982','호텔예약','Baekjoon','https://www.acmicpc.net/problem/1982'),(975,40,'14','1983','숫자 박스','Baekjoon','https://www.acmicpc.net/problem/1983'),(976,8,'7','1985','디지털 친구','Baekjoon','https://www.acmicpc.net/problem/1985'),(977,8,'10','1986','체스','Baekjoon','https://www.acmicpc.net/problem/1986'),(978,40,'12','1987','알파벳','Baekjoon','https://www.acmicpc.net/problem/1987'),(979,40,'12','1988','낮잠 시간','Baekjoon','https://www.acmicpc.net/problem/1988'),(980,200,'16','1989','부분배열 고르기 2','Baekjoon','https://www.acmicpc.net/problem/1989'),(981,40,'11','1990','소수인팰린드롬','Baekjoon','https://www.acmicpc.net/problem/1990'),(982,8,'10','1991','트리 순회','Baekjoon','https://www.acmicpc.net/problem/1991'),(983,8,'10','1992','쿼드트리','Baekjoon','https://www.acmicpc.net/problem/1992'),(984,1000,'21','1993','경주','Baekjoon','https://www.acmicpc.net/problem/1993'),(985,40,'15','1994','등차수열','Baekjoon','https://www.acmicpc.net/problem/1994'),(986,0,'0','1995','폐쇄회로','Baekjoon','https://www.acmicpc.net/problem/1995'),(987,8,'6','1996','지뢰 찾기','Baekjoon','https://www.acmicpc.net/problem/1996'),(988,40,'11','1997','박스포장','Baekjoon','https://www.acmicpc.net/problem/1997'),(989,40,'15','1998','이미지 압축','Baekjoon','https://www.acmicpc.net/problem/1998'),(990,40,'13','1999','최대최소','Baekjoon','https://www.acmicpc.net/problem/1999'),(991,200,'20','2000','책장제작','Baekjoon','https://www.acmicpc.net/problem/2000'),(992,40,'15','2001','보석 줍기','Baekjoon','https://www.acmicpc.net/problem/2001'),(993,8,'10','2002','추월','Baekjoon','https://www.acmicpc.net/problem/2002'),(994,8,'7','2003','수들의 합 2','Baekjoon','https://www.acmicpc.net/problem/2003'),(995,8,'9','2004','조합 0의 개수','Baekjoon','https://www.acmicpc.net/problem/2004'),(996,200,'17','2005','사발','Baekjoon','https://www.acmicpc.net/problem/2005'),(997,40,'12','2006','Chemistry 101','Baekjoon','https://www.acmicpc.net/problem/2006'),(998,200,'18','2007','수들의 합 3','Baekjoon','https://www.acmicpc.net/problem/2007'),(999,200,'16','2008','사다리 게임','Baekjoon','https://www.acmicpc.net/problem/2008'),(1000,8,'9','2009','Minecraft','Baekjoon','https://www.acmicpc.net/problem/2009'),(1001,1,'3','2010','플러그','Baekjoon','https://www.acmicpc.net/problem/2010'),(1002,40,'11','2011','암호코드','Baekjoon','https://www.acmicpc.net/problem/2011'),(1003,8,'8','2012','등수 매기기','Baekjoon','https://www.acmicpc.net/problem/2012'),(1004,40,'14','2013','선그리기','Baekjoon','https://www.acmicpc.net/problem/2013'),(1005,40,'15','2014','소수의 곱','Baekjoon','https://www.acmicpc.net/problem/2014'),(1006,40,'12','2015','수들의 합 4','Baekjoon','https://www.acmicpc.net/problem/2015'),(1007,40,'11','2016','미팅 주선하기','Baekjoon','https://www.acmicpc.net/problem/2016'),(1008,1000,'21','2017','울타리','Baekjoon','https://www.acmicpc.net/problem/2017'),(1009,8,'6','2018','수들의 합 5','Baekjoon','https://www.acmicpc.net/problem/2018'),(1010,40,'12','2019','다각형개수','Baekjoon','https://www.acmicpc.net/problem/2019'),(1011,200,'16','2020','부분 염기서열','Baekjoon','https://www.acmicpc.net/problem/2020'),(1012,40,'14','2021','최소 환승 경로','Baekjoon','https://www.acmicpc.net/problem/2021'),(1013,40,'12','2022','사다리','Baekjoon','https://www.acmicpc.net/problem/2022'),(1014,40,'11','2023','신기한 소수','Baekjoon','https://www.acmicpc.net/problem/2023'),(1015,40,'13','2024','선분 덮기','Baekjoon','https://www.acmicpc.net/problem/2024'),(1016,3000,'27','2025','나이트투어','Baekjoon','https://www.acmicpc.net/problem/2025'),(1017,40,'14','2026','소풍','Baekjoon','https://www.acmicpc.net/problem/2026'),(1018,200,'18','2027','가장 큰 L','Baekjoon','https://www.acmicpc.net/problem/2027'),(1019,1,'4','2028','자기복제수','Baekjoon','https://www.acmicpc.net/problem/2028'),(1020,8,'7','2029','성냥','Baekjoon','https://www.acmicpc.net/problem/2029'),(1021,200,'16','2030','Burger King','Baekjoon','https://www.acmicpc.net/problem/2030'),(1022,40,'14','2031','이 쿠키 달지 않아!','Baekjoon','https://www.acmicpc.net/problem/2031'),(1023,200,'18','2032','피라미드','Baekjoon','https://www.acmicpc.net/problem/2032'),(1024,1,'5','2033','반올림','Baekjoon','https://www.acmicpc.net/problem/2033'),(1025,8,'7','2034','반음','Baekjoon','https://www.acmicpc.net/problem/2034'),(1026,40,'13','2035','증가수열','Baekjoon','https://www.acmicpc.net/problem/2035'),(1027,40,'12','2036','수열의 점수','Baekjoon','https://www.acmicpc.net/problem/2036'),(1028,1,'5','2037','문자메시지','Baekjoon','https://www.acmicpc.net/problem/2037'),(1029,40,'15','2038','골롱 수열','Baekjoon','https://www.acmicpc.net/problem/2038'),(1030,0,'0','2039','뱀 찾기','Baekjoon','https://www.acmicpc.net/problem/2039'),(1031,40,'12','2040','수 게임','Baekjoon','https://www.acmicpc.net/problem/2040'),(1032,200,'20','2041','숫자채우기','Baekjoon','https://www.acmicpc.net/problem/2041'),(1033,40,'15','2042','구간 합 구하기','Baekjoon','https://www.acmicpc.net/problem/2042'),(1034,200,'19','2043','수 묶기','Baekjoon','https://www.acmicpc.net/problem/2043'),(1035,40,'12','2044','windows','Baekjoon','https://www.acmicpc.net/problem/2044'),(1036,40,'13','2045','마방진','Baekjoon','https://www.acmicpc.net/problem/2045'),(1037,0,'0','2046','이어달리기','Baekjoon','https://www.acmicpc.net/problem/2046'),(1038,200,'17','2047','미로','Baekjoon','https://www.acmicpc.net/problem/2047'),(1039,40,'12','2048','Hello, 2048!','Baekjoon','https://www.acmicpc.net/problem/2048'),(1040,200,'18','2049','가장 먼 두 점','Baekjoon','https://www.acmicpc.net/problem/2049'),(1041,0,'0','2050','타일 게임','Baekjoon','https://www.acmicpc.net/problem/2050'),(1042,200,'19','2051','최소 버텍스 커버','Baekjoon','https://www.acmicpc.net/problem/2051'),(1043,1,'4','2052','지수연산','Baekjoon','https://www.acmicpc.net/problem/2052'),(1044,0,'0','2053','반직선','Baekjoon','https://www.acmicpc.net/problem/2053'),(1045,40,'14','2054','계산 문제','Baekjoon','https://www.acmicpc.net/problem/2054'),(1046,200,'16','2055','삼각형 찾기','Baekjoon','https://www.acmicpc.net/problem/2055'),(1047,40,'12','2056','작업','Baekjoon','https://www.acmicpc.net/problem/2056'),(1048,8,'6','2057','팩토리얼 분해','Baekjoon','https://www.acmicpc.net/problem/2057'),(1049,40,'13','2058','원자의 에너지','Baekjoon','https://www.acmicpc.net/problem/2058'),(1050,0,'0','2059','작업 순서','Baekjoon','https://www.acmicpc.net/problem/2059'),(1051,1000,'22','2060','염소 줄서기','Baekjoon','https://www.acmicpc.net/problem/2060'),(1052,1,'3','2061','좋은 암호','Baekjoon','https://www.acmicpc.net/problem/2061'),(1053,40,'15','2062','곱하기 게임','Baekjoon','https://www.acmicpc.net/problem/2062'),(1054,8,'10','2063','철사 연결','Baekjoon','https://www.acmicpc.net/problem/2063'),(1055,40,'13','2064','IP 주소','Baekjoon','https://www.acmicpc.net/problem/2064'),(1056,40,'14','2065','나룻배','Baekjoon','https://www.acmicpc.net/problem/2065'),(1057,40,'15','2066','카드놀이','Baekjoon','https://www.acmicpc.net/problem/2066'),(1058,0,'0','2067','엘리베이터','Baekjoon','https://www.acmicpc.net/problem/2067'),(1059,0,'0','2068','자전거 경주','Baekjoon','https://www.acmicpc.net/problem/2068'),(1060,40,'13','2069','보이는 산맥','Baekjoon','https://www.acmicpc.net/problem/2069'),(1061,40,'15','2070','목걸이 수열','Baekjoon','https://www.acmicpc.net/problem/2070'),(1062,1000,'21','2071','바둑','Baekjoon','https://www.acmicpc.net/problem/2071'),(1063,8,'9','2072','오목','Baekjoon','https://www.acmicpc.net/problem/2072'),(1064,40,'12','2073','수도배관공사','Baekjoon','https://www.acmicpc.net/problem/2073'),(1065,40,'14','2074','거듭제곱 계산하기','Baekjoon','https://www.acmicpc.net/problem/2074'),(1066,8,'9','2075','N번째 큰 수','Baekjoon','https://www.acmicpc.net/problem/2075'),(1067,200,'19','2076','2차원 벡터','Baekjoon','https://www.acmicpc.net/problem/2076'),(1068,8,'9','2078','무한이진트리','Baekjoon','https://www.acmicpc.net/problem/2078'),(1069,40,'15','2079','팰린드롬','Baekjoon','https://www.acmicpc.net/problem/2079'),(1070,200,'19','2080','겹치는 선분','Baekjoon','https://www.acmicpc.net/problem/2080'),(1071,200,'20','2081','저울추','Baekjoon','https://www.acmicpc.net/problem/2081'),(1072,8,'8','2082','시계','Baekjoon','https://www.acmicpc.net/problem/2082'),(1073,1,'2','2083','럭비 클럽','Baekjoon','https://www.acmicpc.net/problem/2083'),(1074,40,'14','2084','차수열','Baekjoon','https://www.acmicpc.net/problem/2084'),(1075,8,'10','2085','진법','Baekjoon','https://www.acmicpc.net/problem/2085'),(1076,40,'15','2086','피보나치 수의 합','Baekjoon','https://www.acmicpc.net/problem/2086'),(1077,40,'15','2087','암호문','Baekjoon','https://www.acmicpc.net/problem/2087'),(1078,40,'15','2088','트리의 개수','Baekjoon','https://www.acmicpc.net/problem/2088'),(1079,8,'9','2089','-2진수','Baekjoon','https://www.acmicpc.net/problem/2089'),(1080,8,'7','2090','조화평균','Baekjoon','https://www.acmicpc.net/problem/2090'),(1081,40,'13','2091','동전','Baekjoon','https://www.acmicpc.net/problem/2091'),(1082,40,'14','2092','집합의 개수','Baekjoon','https://www.acmicpc.net/problem/2092'),(1083,40,'12','2093','괄호 제거','Baekjoon','https://www.acmicpc.net/problem/2093'),(1084,200,'18','2094','강수량','Baekjoon','https://www.acmicpc.net/problem/2094'),(1085,200,'19','2095','티켓','Baekjoon','https://www.acmicpc.net/problem/2095'),(1086,40,'11','2096','내려가기','Baekjoon','https://www.acmicpc.net/problem/2096'),(1087,8,'6','2097','조약돌','Baekjoon','https://www.acmicpc.net/problem/2097'),(1088,40,'15','2098','외판원 순회','Baekjoon','https://www.acmicpc.net/problem/2098'),(1089,40,'15','2099','The game of death','Baekjoon','https://www.acmicpc.net/problem/2099'),(1090,0,'0','2100','감시 로봇','Baekjoon','https://www.acmicpc.net/problem/2100'),(1091,0,'0','2101','이미지의 에너지','Baekjoon','https://www.acmicpc.net/problem/2101'),(1092,200,'17','2102','보석 줍기','Baekjoon','https://www.acmicpc.net/problem/2102'),(1093,8,'8','2103','직교다각형 복원','Baekjoon','https://www.acmicpc.net/problem/2103'),(1094,200,'16','2104','부분배열 고르기','Baekjoon','https://www.acmicpc.net/problem/2104'),(1095,200,'18','2105','꼬리달린 박성원숭이','Baekjoon','https://www.acmicpc.net/problem/2105'),(1096,0,'0','2106','흑염소 감금하기','Baekjoon','https://www.acmicpc.net/problem/2106'),(1097,40,'11','2107','포함하는 구간','Baekjoon','https://www.acmicpc.net/problem/2107'),(1098,8,'8','2108','통계학','Baekjoon','https://www.acmicpc.net/problem/2108'),(1099,40,'13','2109','순회강연','Baekjoon','https://www.acmicpc.net/problem/2109'),(1100,40,'12','2110','공유기 설치','Baekjoon','https://www.acmicpc.net/problem/2110'),(1101,200,'19','2111','선인장','Baekjoon','https://www.acmicpc.net/problem/2111'),(1102,200,'17','2112','두 부분 문자열','Baekjoon','https://www.acmicpc.net/problem/2112'),(1103,1000,'24','2113','행렬과 피보나치 수','Baekjoon','https://www.acmicpc.net/problem/2113'),(1104,0,'0','2114','동물원 우리','Baekjoon','https://www.acmicpc.net/problem/2114'),(1105,40,'11','2115','갤러리','Baekjoon','https://www.acmicpc.net/problem/2115'),(1106,40,'11','2116','주사위 쌓기','Baekjoon','https://www.acmicpc.net/problem/2116'),(1107,8,'10','2117','원형 댄스','Baekjoon','https://www.acmicpc.net/problem/2117'),(1108,40,'11','2118','두 개의 탑','Baekjoon','https://www.acmicpc.net/problem/2118'),(1109,200,'19','2119','프로그래밍 언어 L','Baekjoon','https://www.acmicpc.net/problem/2119'),(1110,0,'0','2120','셋이 놀기','Baekjoon','https://www.acmicpc.net/problem/2120'),(1111,8,'8','2121','넷이 놀기','Baekjoon','https://www.acmicpc.net/problem/2121'),(1112,200,'18','2122','여섯이서 놀기','Baekjoon','https://www.acmicpc.net/problem/2122'),(1113,200,'16','2123','인간 탑 쌓기','Baekjoon','https://www.acmicpc.net/problem/2123'),(1114,200,'17','2124','블록 쌓기','Baekjoon','https://www.acmicpc.net/problem/2124'),(1115,1000,'23','2125','좀','Baekjoon','https://www.acmicpc.net/problem/2125'),(1116,200,'18','2126','지진','Baekjoon','https://www.acmicpc.net/problem/2126'),(1117,0,'0','2127','Limit Checking','Baekjoon','https://www.acmicpc.net/problem/2127'),(1118,40,'13','2128','마지막 조별 시합','Baekjoon','https://www.acmicpc.net/problem/2128'),(1119,40,'15','2129','드라이브 파이널','Baekjoon','https://www.acmicpc.net/problem/2129'),(1120,40,'15','2130','수조','Baekjoon','https://www.acmicpc.net/problem/2130'),(1121,40,'13','2131','로봇 명령','Baekjoon','https://www.acmicpc.net/problem/2131'),(1122,40,'13','2132','나무 위의 벌레','Baekjoon','https://www.acmicpc.net/problem/2132'),(1123,40,'12','2133','타일 채우기','Baekjoon','https://www.acmicpc.net/problem/2133'),(1124,8,'8','2134','창고 이전','Baekjoon','https://www.acmicpc.net/problem/2134'),(1125,200,'16','2135','문자열 압축하기','Baekjoon','https://www.acmicpc.net/problem/2135'),(1126,40,'15','2136','개미','Baekjoon','https://www.acmicpc.net/problem/2136'),(1127,40,'12','2137','가장 가까운 분수','Baekjoon','https://www.acmicpc.net/problem/2137'),(1128,40,'11','2138','전구와 스위치','Baekjoon','https://www.acmicpc.net/problem/2138'),(1129,1,'4','2139','나는 너가 살아온 날을 알고 있다','Baekjoon','https://www.acmicpc.net/problem/2139'),(1130,40,'12','2140','지뢰찾기','Baekjoon','https://www.acmicpc.net/problem/2140'),(1131,40,'12','2141','우체국','Baekjoon','https://www.acmicpc.net/problem/2141'),(1132,40,'15','2142','정돈된 배열','Baekjoon','https://www.acmicpc.net/problem/2142'),(1133,40,'13','2143','두 배열의 합','Baekjoon','https://www.acmicpc.net/problem/2143'),(1134,40,'15','2144','울타리 넘기','Baekjoon','https://www.acmicpc.net/problem/2144'),(1135,1,'4','2145','숫자 놀이','Baekjoon','https://www.acmicpc.net/problem/2145'),(1136,40,'13','2146','다리 만들기','Baekjoon','https://www.acmicpc.net/problem/2146'),(1137,0,'0','2147','자리 배치하기','Baekjoon','https://www.acmicpc.net/problem/2147'),(1138,8,'9','2148','Super 12','Baekjoon','https://www.acmicpc.net/problem/2148'),(1139,8,'8','2149','암호 해독','Baekjoon','https://www.acmicpc.net/problem/2149'),(1140,200,'16','2150','Strongly Connected Component','Baekjoon','https://www.acmicpc.net/problem/2150'),(1141,40,'13','2151','거울 설치','Baekjoon','https://www.acmicpc.net/problem/2151'),(1142,200,'18','2152','여행 계획 세우기','Baekjoon','https://www.acmicpc.net/problem/2152'),(1143,1,'4','2153','소수 단어','Baekjoon','https://www.acmicpc.net/problem/2153'),(1144,1,'4','2154','수 이어 쓰기 3','Baekjoon','https://www.acmicpc.net/problem/2154'),(1145,40,'12','2155','삼각형의 최단 경로','Baekjoon','https://www.acmicpc.net/problem/2155'),(1146,8,'10','2156','포도주 시식','Baekjoon','https://www.acmicpc.net/problem/2156'),(1147,40,'12','2157','여행','Baekjoon','https://www.acmicpc.net/problem/2157'),(1148,40,'13','2158','산악자전거','Baekjoon','https://www.acmicpc.net/problem/2158'),(1149,40,'14','2159','케익 배달','Baekjoon','https://www.acmicpc.net/problem/2159'),(1150,1,'5','2160','그림 비교','Baekjoon','https://www.acmicpc.net/problem/2160'),(1151,8,'6','2161','카드1','Baekjoon','https://www.acmicpc.net/problem/2161'),(1152,200,'16','2162','선분 그룹','Baekjoon','https://www.acmicpc.net/problem/2162'),(1153,1,'5','2163','초콜릿 자르기','Baekjoon','https://www.acmicpc.net/problem/2163'),(1154,8,'7','2164','카드2','Baekjoon','https://www.acmicpc.net/problem/2164'),(1155,40,'11','2166','다각형의 면적','Baekjoon','https://www.acmicpc.net/problem/2166'),(1156,8,'6','2167','2차원 배열의 합','Baekjoon','https://www.acmicpc.net/problem/2167'),(1157,8,'10','2168','타일 위의 대각선','Baekjoon','https://www.acmicpc.net/problem/2168'),(1158,40,'14','2169','로봇 조종하기','Baekjoon','https://www.acmicpc.net/problem/2169'),(1159,40,'11','2170','선 긋기','Baekjoon','https://www.acmicpc.net/problem/2170'),(1160,40,'11','2171','직사각형의 개수','Baekjoon','https://www.acmicpc.net/problem/2171'),(1161,200,'17','2172','팰린드롬 경로','Baekjoon','https://www.acmicpc.net/problem/2172'),(1162,40,'14','2173','양파깡 만들기','Baekjoon','https://www.acmicpc.net/problem/2173'),(1163,40,'11','2174','로봇 시뮬레이션','Baekjoon','https://www.acmicpc.net/problem/2174'),(1164,40,'12','2175','땅 자르기','Baekjoon','https://www.acmicpc.net/problem/2175'),(1165,40,'14','2176','합리적인 이동경로','Baekjoon','https://www.acmicpc.net/problem/2176'),(1166,0,'0','2177','급료 계산','Baekjoon','https://www.acmicpc.net/problem/2177'),(1167,8,'10','2178','미로 탐색','Baekjoon','https://www.acmicpc.net/problem/2178'),(1168,40,'12','2179','비슷한 단어','Baekjoon','https://www.acmicpc.net/problem/2179'),(1169,200,'16','2180','소방서의 고민','Baekjoon','https://www.acmicpc.net/problem/2180'),(1170,0,'0','2181','Walking the dog','Baekjoon','https://www.acmicpc.net/problem/2181'),(1171,1,'5','2183','테니스 시합','Baekjoon','https://www.acmicpc.net/problem/2183'),(1172,200,'18','2184','김치 배달','Baekjoon','https://www.acmicpc.net/problem/2184'),(1173,200,'19','2185','직사각형의 합집합','Baekjoon','https://www.acmicpc.net/problem/2185'),(1174,40,'13','2186','문자판','Baekjoon','https://www.acmicpc.net/problem/2186'),(1175,40,'11','2187','점 고르기','Baekjoon','https://www.acmicpc.net/problem/2187'),(1176,200,'17','2188','축사 배정','Baekjoon','https://www.acmicpc.net/problem/2188'),(1177,8,'9','2189','Magickology','Baekjoon','https://www.acmicpc.net/problem/2189'),(1178,40,'12','2190','점 고르기 2','Baekjoon','https://www.acmicpc.net/problem/2190'),(1179,200,'17','2191','들쥐의 탈출','Baekjoon','https://www.acmicpc.net/problem/2191'),(1180,200,'18','2192','두 수열','Baekjoon','https://www.acmicpc.net/problem/2192'),(1181,8,'8','2193','이친수','Baekjoon','https://www.acmicpc.net/problem/2193'),(1182,40,'12','2194','유닛 이동시키기','Baekjoon','https://www.acmicpc.net/problem/2194'),(1183,40,'11','2195','문자열 복사','Baekjoon','https://www.acmicpc.net/problem/2195'),(1184,200,'17','2196','이진수 XOR','Baekjoon','https://www.acmicpc.net/problem/2196'),(1185,200,'19','2197','분해 반응','Baekjoon','https://www.acmicpc.net/problem/2197'),(1186,0,'0','2198','버스와 손님','Baekjoon','https://www.acmicpc.net/problem/2198'),(1187,0,'0','2199','DNA 해독 2','Baekjoon','https://www.acmicpc.net/problem/2199'),(1188,8,'8','2200','계산기','Baekjoon','https://www.acmicpc.net/problem/2200'),(1189,40,'14','2201','이친수 찾기','Baekjoon','https://www.acmicpc.net/problem/2201'),(1190,8,'10','2202','Custom table sorter','Baekjoon','https://www.acmicpc.net/problem/2202'),(1191,0,'0','2203','선거구 나누기','Baekjoon','https://www.acmicpc.net/problem/2203'),(1192,1,'5','2204','도비의 난독증 테스트','Baekjoon','https://www.acmicpc.net/problem/2204'),(1193,8,'10','2205','저울 추 만들기','Baekjoon','https://www.acmicpc.net/problem/2205'),(1194,40,'13','2206','벽 부수고 이동하기','Baekjoon','https://www.acmicpc.net/problem/2206'),(1195,200,'17','2207','가위바위보','Baekjoon','https://www.acmicpc.net/problem/2207'),(1196,40,'14','2208','보석 줍기','Baekjoon','https://www.acmicpc.net/problem/2208'),(1197,200,'20','2209','버스 터미널','Baekjoon','https://www.acmicpc.net/problem/2209'),(1198,8,'9','2210','숫자판 점프','Baekjoon','https://www.acmicpc.net/problem/2210'),(1199,40,'14','2211','네트워크 복구','Baekjoon','https://www.acmicpc.net/problem/2211'),(1200,40,'11','2212','센서','Baekjoon','https://www.acmicpc.net/problem/2212'),(1201,40,'15','2213','트리의 독립집합','Baekjoon','https://www.acmicpc.net/problem/2213'),(1202,40,'12','2214','성냥개비와 정사각형','Baekjoon','https://www.acmicpc.net/problem/2214'),(1203,200,'18','2215','원형 네트워크','Baekjoon','https://www.acmicpc.net/problem/2215'),(1204,40,'13','2216','문자열과 점수','Baekjoon','https://www.acmicpc.net/problem/2216'),(1205,8,'7','2217','로프','Baekjoon','https://www.acmicpc.net/problem/2217'),(1206,40,'13','2218','상자 안의 구슬','Baekjoon','https://www.acmicpc.net/problem/2218'),(1207,40,'12','2219','보안 시스템 설치','Baekjoon','https://www.acmicpc.net/problem/2219'),(1208,200,'17','2220','힙 정렬','Baekjoon','https://www.acmicpc.net/problem/2220'),(1209,0,'0','2221','작업 공정','Baekjoon','https://www.acmicpc.net/problem/2221'),(1210,200,'16','2222','아이스크림','Baekjoon','https://www.acmicpc.net/problem/2222'),(1211,8,'8','2223','금화','Baekjoon','https://www.acmicpc.net/problem/2223'),(1212,40,'12','2224','명제 증명','Baekjoon','https://www.acmicpc.net/problem/2224'),(1213,40,'11','2225','합분해','Baekjoon','https://www.acmicpc.net/problem/2225'),(1214,40,'12','2226','이진수','Baekjoon','https://www.acmicpc.net/problem/2226'),(1215,0,'0','2227','Checking Causality','Baekjoon','https://www.acmicpc.net/problem/2227'),(1216,40,'13','2228','구간 나누기','Baekjoon','https://www.acmicpc.net/problem/2228'),(1217,40,'11','2229','조 짜기','Baekjoon','https://www.acmicpc.net/problem/2229'),(1218,40,'11','2230','수 고르기','Baekjoon','https://www.acmicpc.net/problem/2230'),(1219,1,'4','2231','분해합','Baekjoon','https://www.acmicpc.net/problem/2231'),(1220,8,'9','2232','지뢰','Baekjoon','https://www.acmicpc.net/problem/2232'),(1221,40,'14','2233','사과나무','Baekjoon','https://www.acmicpc.net/problem/2233'),(1222,40,'13','2234','성곽','Baekjoon','https://www.acmicpc.net/problem/2234'),(1223,8,'9','2235','GPS Encoding','Baekjoon','https://www.acmicpc.net/problem/2235'),(1224,8,'8','2236','칩 만들기','Baekjoon','https://www.acmicpc.net/problem/2236'),(1225,200,'17','2237','수열 축소','Baekjoon','https://www.acmicpc.net/problem/2237'),(1226,8,'6','2238','경매','Baekjoon','https://www.acmicpc.net/problem/2238'),(1227,40,'12','2239','스도쿠','Baekjoon','https://www.acmicpc.net/problem/2239'),(1228,40,'11','2240','자두나무','Baekjoon','https://www.acmicpc.net/problem/2240'),(1229,200,'17','2241','카멜롯','Baekjoon','https://www.acmicpc.net/problem/2241'),(1230,200,'16','2242','삼각형 만들기','Baekjoon','https://www.acmicpc.net/problem/2242'),(1231,200,'16','2243','사탕상자','Baekjoon','https://www.acmicpc.net/problem/2243'),(1232,200,'17','2244','민코프스키 합','Baekjoon','https://www.acmicpc.net/problem/2244'),(1233,40,'15','2245','배열 정리하기','Baekjoon','https://www.acmicpc.net/problem/2245'),(1234,1,'5','2246','콘도 선정','Baekjoon','https://www.acmicpc.net/problem/2246'),(1235,40,'11','2247','실질적 약수','Baekjoon','https://www.acmicpc.net/problem/2247'),(1236,40,'13','2248','이진수 찾기','Baekjoon','https://www.acmicpc.net/problem/2248'),(1237,0,'0','2249','Olympic Ranking','Baekjoon','https://www.acmicpc.net/problem/2249'),(1238,40,'14','2250','트리의 높이와 너비','Baekjoon','https://www.acmicpc.net/problem/2250'),(1239,40,'11','2251','물통','Baekjoon','https://www.acmicpc.net/problem/2251'),(1240,40,'13','2252','줄 세우기','Baekjoon','https://www.acmicpc.net/problem/2252'),(1241,40,'12','2253','점프','Baekjoon','https://www.acmicpc.net/problem/2253'),(1242,200,'17','2254','감옥 건설','Baekjoon','https://www.acmicpc.net/problem/2254'),(1243,200,'20','2255','트리 만들기','Baekjoon','https://www.acmicpc.net/problem/2255'),(1244,200,'18','2256','젓가락','Baekjoon','https://www.acmicpc.net/problem/2256'),(1245,8,'9','2257','화학식량','Baekjoon','https://www.acmicpc.net/problem/2257'),(1246,40,'12','2258','정육점','Baekjoon','https://www.acmicpc.net/problem/2258'),(1247,40,'13','2259','두더지 잡기','Baekjoon','https://www.acmicpc.net/problem/2259'),(1248,200,'18','2260','핵폭탄','Baekjoon','https://www.acmicpc.net/problem/2260'),(1249,200,'19','2261','가장 가까운 두 점','Baekjoon','https://www.acmicpc.net/problem/2261'),(1250,40,'12','2262','토너먼트 만들기','Baekjoon','https://www.acmicpc.net/problem/2262'),(1251,40,'15','2263','트리의 순회','Baekjoon','https://www.acmicpc.net/problem/2263'),(1252,0,'0','2264','대칭 그림','Baekjoon','https://www.acmicpc.net/problem/2264'),(1253,0,'0','2265','거짓말쟁이','Baekjoon','https://www.acmicpc.net/problem/2265'),(1254,40,'14','2266','금고 테스트','Baekjoon','https://www.acmicpc.net/problem/2266'),(1255,0,'0','2267','Bus Timetable','Baekjoon','https://www.acmicpc.net/problem/2267'),(1256,40,'15','2268','수들의 합 7','Baekjoon','https://www.acmicpc.net/problem/2268'),(1257,0,'0','2269','Prevtree','Baekjoon','https://www.acmicpc.net/problem/2269'),(1258,40,'14','2270','하노이 탑','Baekjoon','https://www.acmicpc.net/problem/2270'),(1259,200,'17','2271','암호화 알고리즘의 약점','Baekjoon','https://www.acmicpc.net/problem/2271'),(1260,200,'20','2272','램프','Baekjoon','https://www.acmicpc.net/problem/2272'),(1261,40,'13','2273','줄 서기','Baekjoon','https://www.acmicpc.net/problem/2273'),(1262,40,'15','2274','Conflicting Strings','Baekjoon','https://www.acmicpc.net/problem/2274'),(1263,40,'15','2275','트리의 높이 줄이기','Baekjoon','https://www.acmicpc.net/problem/2275'),(1264,200,'17','2276','물 채우기','Baekjoon','https://www.acmicpc.net/problem/2276'),(1265,0,'0','2277','금고 털기','Baekjoon','https://www.acmicpc.net/problem/2277'),(1266,40,'15','2278','그래프 복원','Baekjoon','https://www.acmicpc.net/problem/2278'),(1267,200,'18','2279','사각형과 도형','Baekjoon','https://www.acmicpc.net/problem/2279'),(1268,0,'0','2280','정사각형과 점','Baekjoon','https://www.acmicpc.net/problem/2280'),(1269,40,'13','2281','데스노트','Baekjoon','https://www.acmicpc.net/problem/2281'),(1270,200,'19','2282','산맥 그리기','Baekjoon','https://www.acmicpc.net/problem/2282'),(1271,40,'14','2283','구간 자르기','Baekjoon','https://www.acmicpc.net/problem/2283'),(1272,200,'17','2284','레이스','Baekjoon','https://www.acmicpc.net/problem/2284'),(1273,40,'12','2285','우체국','Baekjoon','https://www.acmicpc.net/problem/2285'),(1274,0,'0','2286','비선형 수열','Baekjoon','https://www.acmicpc.net/problem/2286'),(1275,40,'15','2287','모노디지털 표현','Baekjoon','https://www.acmicpc.net/problem/2287'),(1276,40,'11','2288','격자의 분리자','Baekjoon','https://www.acmicpc.net/problem/2288'),(1277,8,'10','2289','Quack','Baekjoon','https://www.acmicpc.net/problem/2289'),(1278,8,'9','2290','LCD Test','Baekjoon','https://www.acmicpc.net/problem/2290'),(1279,40,'14','2291','Sequence','Baekjoon','https://www.acmicpc.net/problem/2291'),(1280,1,'4','2292','벌집','Baekjoon','https://www.acmicpc.net/problem/2292'),(1281,40,'11','2293','동전 1','Baekjoon','https://www.acmicpc.net/problem/2293'),(1282,40,'11','2294','동전 2','Baekjoon','https://www.acmicpc.net/problem/2294'),(1283,40,'12','2295','세 수의 합','Baekjoon','https://www.acmicpc.net/problem/2295'),(1284,40,'12','2296','건물짓기','Baekjoon','https://www.acmicpc.net/problem/2296'),(1285,0,'0','2297','직각 이등변 삼각형','Baekjoon','https://www.acmicpc.net/problem/2297'),(1286,40,'14','2298','Here-There','Baekjoon','https://www.acmicpc.net/problem/2298'),(1287,0,'0','2299','수식 계산','Baekjoon','https://www.acmicpc.net/problem/2299'),(1288,40,'14','2300','기지국','Baekjoon','https://www.acmicpc.net/problem/2300'),(1289,200,'20','2301','마법 구슬','Baekjoon','https://www.acmicpc.net/problem/2301'),(1290,8,'10','2302','극장 좌석','Baekjoon','https://www.acmicpc.net/problem/2302'),(1291,8,'6','2303','숫자 게임','Baekjoon','https://www.acmicpc.net/problem/2303'),(1292,8,'9','2304','창고 다각형','Baekjoon','https://www.acmicpc.net/problem/2304'),(1293,40,'15','2305','자리 배치','Baekjoon','https://www.acmicpc.net/problem/2305'),(1294,40,'13','2306','유전자','Baekjoon','https://www.acmicpc.net/problem/2306'),(1295,40,'15','2307','도로검문','Baekjoon','https://www.acmicpc.net/problem/2307'),(1296,1,'5','2309','일곱 난쟁이','Baekjoon','https://www.acmicpc.net/problem/2309'),(1297,40,'12','2310','어드벤처 게임','Baekjoon','https://www.acmicpc.net/problem/2310'),(1298,200,'19','2311','왕복 여행','Baekjoon','https://www.acmicpc.net/problem/2311'),(1299,8,'8','2312','수 복원하기','Baekjoon','https://www.acmicpc.net/problem/2312'),(1300,40,'11','2313','보석 구매하기','Baekjoon','https://www.acmicpc.net/problem/2313'),(1301,40,'13','2314','이세계 게임','Baekjoon','https://www.acmicpc.net/problem/2314'),(1302,200,'18','2315','가로등 끄기','Baekjoon','https://www.acmicpc.net/problem/2315'),(1303,200,'18','2316','도시 왕복하기 2','Baekjoon','https://www.acmicpc.net/problem/2316'),(1304,40,'12','2317','결혼식','Baekjoon','https://www.acmicpc.net/problem/2317'),(1305,200,'17','2318','상사 찾기','Baekjoon','https://www.acmicpc.net/problem/2318'),(1306,200,'16','2319','문자열 복원하기','Baekjoon','https://www.acmicpc.net/problem/2319'),(1307,40,'15','2320','끝말잇기','Baekjoon','https://www.acmicpc.net/problem/2320'),(1308,1,'3','2321','Crowing','Baekjoon','https://www.acmicpc.net/problem/2321'),(1309,200,'20','2322','아령','Baekjoon','https://www.acmicpc.net/problem/2322'),(1310,200,'20','2323','강강술래','Baekjoon','https://www.acmicpc.net/problem/2323'),(1311,200,'20','2324','이진 행렬','Baekjoon','https://www.acmicpc.net/problem/2324'),(1312,200,'16','2325','개코전쟁','Baekjoon','https://www.acmicpc.net/problem/2325'),(1313,200,'18','2326','최소 편집 문제 2','Baekjoon','https://www.acmicpc.net/problem/2326'),(1314,40,'13','2327','말아톤','Baekjoon','https://www.acmicpc.net/problem/2327'),(1315,200,'16','2328','그래프의 해시','Baekjoon','https://www.acmicpc.net/problem/2328'),(1316,200,'18','2329','장애물 설계','Baekjoon','https://www.acmicpc.net/problem/2329'),(1317,200,'18','2330','미생물 연구실','Baekjoon','https://www.acmicpc.net/problem/2330'),(1318,8,'7','2331','반복수열','Baekjoon','https://www.acmicpc.net/problem/2331'),(1319,40,'12','2332','전화번호','Baekjoon','https://www.acmicpc.net/problem/2332'),(1320,40,'12','2333','생존과 탈출','Baekjoon','https://www.acmicpc.net/problem/2333'),(1321,200,'19','2334','대칭 그림2','Baekjoon','https://www.acmicpc.net/problem/2334'),(1322,40,'13','2335','농부','Baekjoon','https://www.acmicpc.net/problem/2335'),(1323,200,'19','2336','굉장한 학생','Baekjoon','https://www.acmicpc.net/problem/2336'),(1324,200,'19','2337','트리 자르기','Baekjoon','https://www.acmicpc.net/problem/2337'),(1325,1,'1','2338','긴자리 계산','Baekjoon','https://www.acmicpc.net/problem/2338'),(1326,40,'15','2339','석판 자르기','Baekjoon','https://www.acmicpc.net/problem/2339'),(1327,0,'0','2340','이진 수열 회전','Baekjoon','https://www.acmicpc.net/problem/2340'),(1328,40,'13','2341','팩스 문제','Baekjoon','https://www.acmicpc.net/problem/2341'),(1329,40,'13','2342','Dance Dance Revolution','Baekjoon','https://www.acmicpc.net/problem/2342'),(1330,8,'10','2343','기타 레슨','Baekjoon','https://www.acmicpc.net/problem/2343'),(1331,40,'12','2344','거울','Baekjoon','https://www.acmicpc.net/problem/2344'),(1332,0,'0','2345','지뢰 제거','Baekjoon','https://www.acmicpc.net/problem/2345'),(1333,8,'8','2346','풍선 터뜨리기','Baekjoon','https://www.acmicpc.net/problem/2346'),(1334,1000,'22','2347','거울2','Baekjoon','https://www.acmicpc.net/problem/2347'),(1335,0,'0','2349','무선 통신 기지국','Baekjoon','https://www.acmicpc.net/problem/2349'),(1336,40,'14','2350','대운하','Baekjoon','https://www.acmicpc.net/problem/2350'),(1337,200,'20','2351','미지의 다각형','Baekjoon','https://www.acmicpc.net/problem/2351'),(1338,40,'14','2352','반도체 설계','Baekjoon','https://www.acmicpc.net/problem/2352'),(1339,0,'0','2353','오타','Baekjoon','https://www.acmicpc.net/problem/2353'),(1340,40,'13','2354','비교교환','Baekjoon','https://www.acmicpc.net/problem/2354'),(1341,1,'4','2355','시그마','Baekjoon','https://www.acmicpc.net/problem/2355'),(1342,40,'14','2356','제곱 ㄷㄷ 수','Baekjoon','https://www.acmicpc.net/problem/2356'),(1343,40,'15','2357','최솟값과 최댓값','Baekjoon','https://www.acmicpc.net/problem/2357'),(1344,8,'7','2358','평행선','Baekjoon','https://www.acmicpc.net/problem/2358'),(1345,200,'17','2359','드라이브','Baekjoon','https://www.acmicpc.net/problem/2359'),(1346,200,'20','2360','Teleport','Baekjoon','https://www.acmicpc.net/problem/2360'),(1347,200,'18','2361','정원','Baekjoon','https://www.acmicpc.net/problem/2361'),(1348,200,'19','2362','탈출','Baekjoon','https://www.acmicpc.net/problem/2362'),(1349,40,'13','2363','약수부분수열','Baekjoon','https://www.acmicpc.net/problem/2363'),(1350,40,'15','2364','담장 너머로','Baekjoon','https://www.acmicpc.net/problem/2364'),(1351,200,'18','2365','숫자판 만들기','Baekjoon','https://www.acmicpc.net/problem/2365'),(1352,0,'0','2366','이진트리 그리기','Baekjoon','https://www.acmicpc.net/problem/2366'),(1353,200,'17','2367','파티','Baekjoon','https://www.acmicpc.net/problem/2367'),(1354,40,'15','2369','행렬의 부분합','Baekjoon','https://www.acmicpc.net/problem/2369'),(1355,40,'12','2370','시장 선거 포스터','Baekjoon','https://www.acmicpc.net/problem/2370'),(1356,8,'8','2371','파일 구별하기','Baekjoon','https://www.acmicpc.net/problem/2371'),(1357,1,'1','2372','Livestock Count','Baekjoon','https://www.acmicpc.net/problem/2372'),(1358,200,'20','2373','Fibonacci Game','Baekjoon','https://www.acmicpc.net/problem/2373'),(1359,40,'12','2374','같은 수로 만들기','Baekjoon','https://www.acmicpc.net/problem/2374'),(1360,40,'14','2375','농구 골대 세우기','Baekjoon','https://www.acmicpc.net/problem/2375'),(1361,200,'16','2376','단말 정점들의 거리','Baekjoon','https://www.acmicpc.net/problem/2376'),(1362,1,'1','2377','Pottery','Baekjoon','https://www.acmicpc.net/problem/2377'),(1363,40,'13','2378','불필요한 수','Baekjoon','https://www.acmicpc.net/problem/2378'),(1364,200,'17','2379','트리 탐색하기','Baekjoon','https://www.acmicpc.net/problem/2379'),(1365,8,'8','2380','Star','Baekjoon','https://www.acmicpc.net/problem/2380'),(1366,40,'13','2381','최대 거리','Baekjoon','https://www.acmicpc.net/problem/2381'),(1367,0,'0','2382','키워드 매칭','Baekjoon','https://www.acmicpc.net/problem/2382'),(1368,0,'0','2383','Ferries','Baekjoon','https://www.acmicpc.net/problem/2383'),(1369,0,'0','2384','I’m a Frayed Knot','Baekjoon','https://www.acmicpc.net/problem/2384'),(1370,200,'18','2385','Secret Sharing','Baekjoon','https://www.acmicpc.net/problem/2385'),(1371,1,'4','2386','도비의 영어 공부','Baekjoon','https://www.acmicpc.net/problem/2386'),(1372,1,'3','2387','Howl','Baekjoon','https://www.acmicpc.net/problem/2387'),(1373,200,'16','2388','블록 쌓기','Baekjoon','https://www.acmicpc.net/problem/2388'),(1374,200,'20','2389','세상의 중심에서...','Baekjoon','https://www.acmicpc.net/problem/2389'),(1375,1000,'23','2390','⎐','Baekjoon','https://www.acmicpc.net/problem/2390'),(1376,1,'4','2391','Sascha','Baekjoon','https://www.acmicpc.net/problem/2391'),(1377,200,'18','2392','다각형의 분할','Baekjoon','https://www.acmicpc.net/problem/2392'),(1378,1,'1','2393','Rook','Baekjoon','https://www.acmicpc.net/problem/2393'),(1379,200,'16','2394','드라이브 투어','Baekjoon','https://www.acmicpc.net/problem/2394'),(1380,40,'15','2395','순열의 개수','Baekjoon','https://www.acmicpc.net/problem/2395'),(1381,1000,'22','2396','같은 길이 막대기 만들기','Baekjoon','https://www.acmicpc.net/problem/2396'),(1382,200,'18','2397','보이는 정사각형','Baekjoon','https://www.acmicpc.net/problem/2397'),(1383,40,'15','2398','3인통화','Baekjoon','https://www.acmicpc.net/problem/2398'),(1384,1,'4','2399','거리의 합','Baekjoon','https://www.acmicpc.net/problem/2399'),(1385,200,'19','2401','최대 문자열 붙여넣기','Baekjoon','https://www.acmicpc.net/problem/2401'),(1386,40,'14','2402','거짓말','Baekjoon','https://www.acmicpc.net/problem/2402'),(1387,40,'13','2403','게시판 구멍 가리기','Baekjoon','https://www.acmicpc.net/problem/2403'),(1388,8,'10','2404','단위 분수로 분할','Baekjoon','https://www.acmicpc.net/problem/2404'),(1389,40,'12','2405','세 수, 두 M','Baekjoon','https://www.acmicpc.net/problem/2405'),(1390,40,'13','2406','안정적인 네트워크','Baekjoon','https://www.acmicpc.net/problem/2406'),(1391,8,'8','2407','조합','Baekjoon','https://www.acmicpc.net/problem/2407'),(1392,1,'4','2408','큰 수 계산','Baekjoon','https://www.acmicpc.net/problem/2408'),(1393,0,'0','2409','파이프 자르기','Baekjoon','https://www.acmicpc.net/problem/2409'),(1394,40,'11','2410','2의 멱수의 합','Baekjoon','https://www.acmicpc.net/problem/2410'),(1395,40,'12','2411','아이템 먹기','Baekjoon','https://www.acmicpc.net/problem/2411'),(1396,40,'12','2412','암벽 등반','Baekjoon','https://www.acmicpc.net/problem/2412'),(1397,40,'14','2413','비슷한 순열','Baekjoon','https://www.acmicpc.net/problem/2413'),(1398,200,'18','2414','게시판 구멍 막기','Baekjoon','https://www.acmicpc.net/problem/2414'),(1399,200,'20','2415','직사각형','Baekjoon','https://www.acmicpc.net/problem/2415'),(1400,200,'18','2416','문','Baekjoon','https://www.acmicpc.net/problem/2416'),(1401,8,'7','2417','정수 제곱근','Baekjoon','https://www.acmicpc.net/problem/2417'),(1402,40,'11','2418','단어 격자','Baekjoon','https://www.acmicpc.net/problem/2418'),(1403,200,'20','2419','사수아탕','Baekjoon','https://www.acmicpc.net/problem/2419'),(1404,1,'1','2420','사파리월드','Baekjoon','https://www.acmicpc.net/problem/2420'),(1405,40,'11','2421','저금통','Baekjoon','https://www.acmicpc.net/problem/2421'),(1406,8,'7','2422','한윤정이 이탈리아에 가서 아이스크림을 사먹는데','Baekjoon','https://www.acmicpc.net/problem/2422'),(1407,40,'15','2423','전구를 켜라','Baekjoon','https://www.acmicpc.net/problem/2423'),(1408,200,'17','2424','부산의 해적','Baekjoon','https://www.acmicpc.net/problem/2424'),(1409,0,'0','2425','Lego','Baekjoon','https://www.acmicpc.net/problem/2425'),(1410,200,'20','2426','세계적인 석유 재벌','Baekjoon','https://www.acmicpc.net/problem/2426'),(1411,1000,'22','2427','2012 지구 멸망','Baekjoon','https://www.acmicpc.net/problem/2427'),(1412,8,'8','2428','표절','Baekjoon','https://www.acmicpc.net/problem/2428'),(1413,200,'19','2429','길이','Baekjoon','https://www.acmicpc.net/problem/2429'),(1414,1000,'25','2430','거울대칭트리 그래프','Baekjoon','https://www.acmicpc.net/problem/2430'),(1415,200,'20','2431','신호 장애','Baekjoon','https://www.acmicpc.net/problem/2431'),(1416,1000,'24','2432','순위 정렬','Baekjoon','https://www.acmicpc.net/problem/2432'),(1417,200,'16','2433','The Sound of Silence','Baekjoon','https://www.acmicpc.net/problem/2433'),(1418,200,'19','2434','점 연결하기','Baekjoon','https://www.acmicpc.net/problem/2434'),(1419,1,'5','2435','기상청 인턴 신현수','Baekjoon','https://www.acmicpc.net/problem/2435'),(1420,40,'11','2436','공약수','Baekjoon','https://www.acmicpc.net/problem/2436'),(1421,40,'14','2437','저울','Baekjoon','https://www.acmicpc.net/problem/2437'),(1422,1,'1','2438','별 찍기 - 1','Baekjoon','https://www.acmicpc.net/problem/2438'),(1423,1,'2','2439','별 찍기 - 2','Baekjoon','https://www.acmicpc.net/problem/2439'),(1424,1,'2','2440','별 찍기 - 3','Baekjoon','https://www.acmicpc.net/problem/2440'),(1425,1,'3','2441','별 찍기 - 4','Baekjoon','https://www.acmicpc.net/problem/2441'),(1426,1,'3','2442','별 찍기 - 5','Baekjoon','https://www.acmicpc.net/problem/2442'),(1427,1,'3','2443','별 찍기 - 6','Baekjoon','https://www.acmicpc.net/problem/2443'),(1428,1,'3','2444','별 찍기 - 7','Baekjoon','https://www.acmicpc.net/problem/2444'),(1429,1,'3','2445','별 찍기 - 8','Baekjoon','https://www.acmicpc.net/problem/2445'),(1430,1,'3','2446','별 찍기 - 9','Baekjoon','https://www.acmicpc.net/problem/2446'),(1431,40,'11','2447','별 찍기 - 10','Baekjoon','https://www.acmicpc.net/problem/2447'),(1432,40,'12','2448','별 찍기 - 11','Baekjoon','https://www.acmicpc.net/problem/2448'),(1433,200,'18','2449','전구','Baekjoon','https://www.acmicpc.net/problem/2449'),(1434,40,'14','2450','모양 정돈','Baekjoon','https://www.acmicpc.net/problem/2450'),(1435,200,'17','2451','모둠','Baekjoon','https://www.acmicpc.net/problem/2451'),(1436,200,'20','2452','그리드 게임','Baekjoon','https://www.acmicpc.net/problem/2452'),(1437,200,'19','2453','부서 배치','Baekjoon','https://www.acmicpc.net/problem/2453'),(1438,200,'19','2454','트리 분할','Baekjoon','https://www.acmicpc.net/problem/2454'),(1439,1,'3','2455','지능형 기차','Baekjoon','https://www.acmicpc.net/problem/2455'),(1440,1,'5','2456','나는 학급회장이다','Baekjoon','https://www.acmicpc.net/problem/2456'),(1441,40,'13','2457','공주님의 정원','Baekjoon','https://www.acmicpc.net/problem/2457'),(1442,40,'12','2458','키 순서','Baekjoon','https://www.acmicpc.net/problem/2458'),(1443,40,'12','2459','철사 자르기','Baekjoon','https://www.acmicpc.net/problem/2459'),(1444,1,'3','2460','지능형 기차 2','Baekjoon','https://www.acmicpc.net/problem/2460'),(1445,40,'15','2461','대표 선수','Baekjoon','https://www.acmicpc.net/problem/2461'),(1446,200,'17','2462','보도블록','Baekjoon','https://www.acmicpc.net/problem/2462'),(1447,200,'16','2463','비용','Baekjoon','https://www.acmicpc.net/problem/2463'),(1448,40,'15','2464','비밀번호','Baekjoon','https://www.acmicpc.net/problem/2464'),(1449,200,'18','2465','줄 세우기','Baekjoon','https://www.acmicpc.net/problem/2465'),(1450,1000,'22','2466','책장','Baekjoon','https://www.acmicpc.net/problem/2466'),(1451,40,'11','2467','용액','Baekjoon','https://www.acmicpc.net/problem/2467'),(1452,8,'10','2468','안전 영역','Baekjoon','https://www.acmicpc.net/problem/2468'),(1453,40,'11','2469','사다리 타기','Baekjoon','https://www.acmicpc.net/problem/2469'),(1454,40,'11','2470','두 용액','Baekjoon','https://www.acmicpc.net/problem/2470'),(1455,200,'19','2471','모빌 이진수','Baekjoon','https://www.acmicpc.net/problem/2471'),(1456,200,'20','2472','체인점','Baekjoon','https://www.acmicpc.net/problem/2472'),(1457,40,'13','2473','세 용액','Baekjoon','https://www.acmicpc.net/problem/2473'),(1458,200,'19','2474','교차 선분','Baekjoon','https://www.acmicpc.net/problem/2474'),(1459,1,'1','2475','검증수','Baekjoon','https://www.acmicpc.net/problem/2475'),(1460,1,'3','2476','주사위 게임','Baekjoon','https://www.acmicpc.net/problem/2476'),(1461,8,'9','2477','참외밭','Baekjoon','https://www.acmicpc.net/problem/2477'),(1462,200,'16','2478','자물쇠','Baekjoon','https://www.acmicpc.net/problem/2478'),(1463,40,'12','2479','경로 찾기','Baekjoon','https://www.acmicpc.net/problem/2479'),(1464,1,'2','2480','주사위 세개','Baekjoon','https://www.acmicpc.net/problem/2480'),(1465,40,'14','2481','해밍 경로','Baekjoon','https://www.acmicpc.net/problem/2481'),(1466,40,'13','2482','색상환','Baekjoon','https://www.acmicpc.net/problem/2482'),(1467,1000,'25','2483','병원','Baekjoon','https://www.acmicpc.net/problem/2483'),(1468,1,'4','2484','주사위 네개','Baekjoon','https://www.acmicpc.net/problem/2484'),(1469,8,'7','2485','가로수','Baekjoon','https://www.acmicpc.net/problem/2485'),(1470,200,'19','2486','그레이 코드','Baekjoon','https://www.acmicpc.net/problem/2486'),(1471,40,'12','2487','섞기 수열','Baekjoon','https://www.acmicpc.net/problem/2487'),(1472,200,'19','2488','줄다리기','Baekjoon','https://www.acmicpc.net/problem/2488'),(1473,1000,'25','2489','응급센터','Baekjoon','https://www.acmicpc.net/problem/2489'),(1474,1,'3','2490','윷놀이','Baekjoon','https://www.acmicpc.net/problem/2490'),(1475,8,'7','2491','수열','Baekjoon','https://www.acmicpc.net/problem/2491'),(1476,40,'13','2492','보석','Baekjoon','https://www.acmicpc.net/problem/2492'),(1477,40,'11','2493','탑','Baekjoon','https://www.acmicpc.net/problem/2493'),(1478,200,'16','2494','숫자 맞추기','Baekjoon','https://www.acmicpc.net/problem/2494'),(1479,1,'4','2495','연속구간','Baekjoon','https://www.acmicpc.net/problem/2495'),(1480,200,'18','2496','금강석','Baekjoon','https://www.acmicpc.net/problem/2496'),(1481,200,'18','2497','횡단도로','Baekjoon','https://www.acmicpc.net/problem/2497'),(1482,200,'18','2498','중앙문자열','Baekjoon','https://www.acmicpc.net/problem/2498'),(1483,200,'16','2499','의좋은 형제','Baekjoon','https://www.acmicpc.net/problem/2499'),(1484,200,'19','2500','복불복','Baekjoon','https://www.acmicpc.net/problem/2500'),(1485,1,'3','2501','약수 구하기','Baekjoon','https://www.acmicpc.net/problem/2501'),(1486,8,'10','2502','떡 먹는 호랑이','Baekjoon','https://www.acmicpc.net/problem/2502'),(1487,8,'8','2503','숫자 야구','Baekjoon','https://www.acmicpc.net/problem/2503'),(1488,40,'11','2504','괄호의 값','Baekjoon','https://www.acmicpc.net/problem/2504'),(1489,200,'16','2505','두 번 뒤집기','Baekjoon','https://www.acmicpc.net/problem/2505'),(1490,1,'3','2506','점수계산','Baekjoon','https://www.acmicpc.net/problem/2506'),(1491,200,'18','2507','공주 구하기','Baekjoon','https://www.acmicpc.net/problem/2507'),(1492,8,'6','2508','사탕 박사 고창영','Baekjoon','https://www.acmicpc.net/problem/2508'),(1493,8,'9','2509','쉬운 매췽','Baekjoon','https://www.acmicpc.net/problem/2509'),(1494,0,'0','2510','어려운 매췽','Baekjoon','https://www.acmicpc.net/problem/2510'),(1495,1,'4','2511','카드놀이','Baekjoon','https://www.acmicpc.net/problem/2511'),(1496,8,'9','2512','예산','Baekjoon','https://www.acmicpc.net/problem/2512'),(1497,40,'13','2513','통학버스','Baekjoon','https://www.acmicpc.net/problem/2513'),(1498,200,'17','2514','자동분무기','Baekjoon','https://www.acmicpc.net/problem/2514'),(1499,40,'14','2515','전시장','Baekjoon','https://www.acmicpc.net/problem/2515'),(1500,200,'17','2516','원숭이','Baekjoon','https://www.acmicpc.net/problem/2516'),(1502,40,'D4','7733','치즈 도둑','Swea','https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AWrDOdQqRCUDFARG'),(1503,8,'D2','2001','파리 퇴치','Swea','https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PzOCKAigDFAUq'),(1504,0,'Unrated','1949','[모의 SW 역량테스트] 등산로 조성','Swea','https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PoOKKAPIDFAUq'),(1505,40,'D4','6109','추억의 2048게임','Swea','https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AWbrg9uabZsDFAWQ'),(1506,8,'9','5397','키로거','Baekjoon','https://www.acmicpc.net/problem/5397'),(1507,40,'12','6987','월드컵','Baekjoon','https://www.acmicpc.net/problem/6987'),(1508,8,'6','7568','덩치','Baekjoon','https://www.acmicpc.net/problem/7568'),(1509,40,'11','7576','토마토','Baekjoon','https://www.acmicpc.net/problem/7576'),(1510,40,'13','7579','앱','Baekjoon','https://www.acmicpc.net/problem/7579'),(1511,8,'8','24060','알고리즘 수업 - 병합 정렬 1','Baekjoon','https://www.acmicpc.net/problem/24060'),(1512,8,'10','21314','민겸 수','Baekjoon','https://www.acmicpc.net/problem/21314'),(1513,8,'8','20365','블로그2','Baekjoon','https://www.acmicpc.net/problem/20365'),(1514,40,'13','20303','할로윈의 양아치','Baekjoon','https://www.acmicpc.net/problem/20303'),(1515,8,'8','20300','서강근육맨','Baekjoon','https://www.acmicpc.net/problem/20300'),(1516,8,'8','20115','에너지 드링크','Baekjoon','https://www.acmicpc.net/problem/20115'),(1517,8,'6','18511','큰 수 구성하기','Baekjoon','https://www.acmicpc.net/problem/18511'),(1518,8,'8','17626','Four Squares','Baekjoon','https://www.acmicpc.net/problem/17626'),(1519,8,'8','17484','진우의 달 여행 (Small)','Baekjoon','https://www.acmicpc.net/problem/17484'),(1520,40,'15','17472','다리 만들기 2','Baekjoon','https://www.acmicpc.net/problem/17472'),(1521,8,'8','17413','단어 뒤집기 2','Baekjoon','https://www.acmicpc.net/problem/17413'),(1522,40,'12','17406','배열 돌리기 4','Baekjoon','https://www.acmicpc.net/problem/17406'),(1523,40,'12','17281','⚾','Baekjoon','https://www.acmicpc.net/problem/17281'),(1524,40,'12','17144','미세먼지 안녕!','Baekjoon','https://www.acmicpc.net/problem/17144'),(1525,40,'13','17142','연구소 3','Baekjoon','https://www.acmicpc.net/problem/17142'),(1526,40,'12','17141','연구소 2','Baekjoon','https://www.acmicpc.net/problem/17141'),(1527,40,'13','17135','캐슬 디펜스','Baekjoon','https://www.acmicpc.net/problem/17135'),(1528,40,'11','16987','계란으로 계란치기','Baekjoon','https://www.acmicpc.net/problem/16987'),(1529,8,'9','16953','A → B','Baekjoon','https://www.acmicpc.net/problem/16953'),(1530,8,'8','16937','두 스티커','Baekjoon','https://www.acmicpc.net/problem/16937'),(1531,40,'13','16919','봄버맨 2','Baekjoon','https://www.acmicpc.net/problem/16919'),(1532,8,'6','16435','스네이크버드','Baekjoon','https://www.acmicpc.net/problem/16435'),(1533,40,'12','16398','행성 연결','Baekjoon','https://www.acmicpc.net/problem/16398'),(1534,40,'13','16236','아기 상어','Baekjoon','https://www.acmicpc.net/problem/16236'),(1535,40,'12','16234','인구 이동','Baekjoon','https://www.acmicpc.net/problem/16234'),(1536,8,'10','16206','롤케이크','Baekjoon','https://www.acmicpc.net/problem/16206'),(1537,40,'12','15961','회전 초밥','Baekjoon','https://www.acmicpc.net/problem/15961'),(1538,40,'11','15686','치킨 배달','Baekjoon','https://www.acmicpc.net/problem/15686'),(1539,40,'12','15683','감시','Baekjoon','https://www.acmicpc.net/problem/15683'),(1540,40,'11','15661','링크와 스타트','Baekjoon','https://www.acmicpc.net/problem/15661'),(1541,8,'7','12873','기념품','Baekjoon','https://www.acmicpc.net/problem/12873'),(1542,8,'8','15652','N과 M (4)','Baekjoon','https://www.acmicpc.net/problem/15652'),(1543,8,'10','14675','단절점과 단절선','Baekjoon','https://www.acmicpc.net/problem/14675'),(1544,8,'10','14888','연산자 끼워넣기','Baekjoon','https://www.acmicpc.net/problem/14888'),(1545,8,'10','14889','스타트와 링크','Baekjoon','https://www.acmicpc.net/problem/14889'),(1546,8,'8','15649','N과 M (1)','Baekjoon','https://www.acmicpc.net/problem/15649'),(1547,8,'8','15650','N과 M (2)','Baekjoon','https://www.acmicpc.net/problem/15650'),(1548,40,'2','42586','기능개발','Programmers',NULL),(1549,1,'4','2798','블랙잭','Baekjoon','https://www.acmicpc.net/problem/2798'),(1550,1,'0','120805','몫 구하기','Programmers','https://school.programmers.co.kr/learn/courses/30/lessons/120805'),(1551,1,'4','27160','할리갈리','Baekjoon','https://www.acmicpc.net/problem/27160'),(1552,8,'8','11478','서로 다른 부분 문자열의 개수','Baekjoon','https://www.acmicpc.net/problem/11478'),(1553,1,'5','10798','세로읽기','Baekjoon','https://www.acmicpc.net/problem/10798'),(1554,8,'7','10828','스택','Baekjoon','https://www.acmicpc.net/problem/10828'),(1555,8,'1','92334','신고 결과 받기','Programmers',NULL),(1556,40,'D3','19185','육십갑자','Swea',NULL),(1557,8,'D2','1859','백만 장자 프로젝트','Swea',NULL),(1558,1000,'4','60060','가사 검색','Programmers',NULL),(1559,40,'13','2812','크게 만들기','Baekjoon','https://www.acmicpc.net/problem/2812'),(1560,40,'13','2638','치즈','Baekjoon','https://www.acmicpc.net/problem/2638'),(1561,40,'11','12919','A와 B 2','Baekjoon','https://www.acmicpc.net/problem/12919'),(1562,8,'1','42748','K번째수','Programmers',NULL),(1563,8,'D2','1989','초심자의 회문 검사','Swea',NULL),(1564,8,'7','14425','문자열 집합','Baekjoon','https://www.acmicpc.net/problem/14425'),(1565,8,'6','11866','요세푸스 문제 0','Baekjoon','https://www.acmicpc.net/problem/11866');
/*!40000 ALTER TABLE `problem` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `solved_problem`
--

DROP TABLE IF EXISTS `solved_problem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `solved_problem` (
  `solved_problem_id` int NOT NULL AUTO_INCREMENT,
  `code_length` varchar(255) DEFAULT NULL,
  `language` varchar(255) DEFAULT NULL,
  `memo` text,
  `memory` varchar(255) DEFAULT NULL,
  `runtime` varchar(255) DEFAULT NULL,
  `submission_code` text,
  `submission_id` varchar(255) DEFAULT NULL,
  `submission_time` varchar(255) DEFAULT NULL,
  `visible` bit(1) DEFAULT NULL,
  `problem_id` int DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  PRIMARY KEY (`solved_problem_id`),
  KEY `FKhpbpcr0jd5h75huf5dqi8saqp` (`problem_id`),
  KEY `FKj7uqiqs04o5d3xws8ox272cdq` (`user_id`),
  CONSTRAINT `FKhpbpcr0jd5h75huf5dqi8saqp` FOREIGN KEY (`problem_id`) REFERENCES `problem` (`problem_id`),
  CONSTRAINT `FKj7uqiqs04o5d3xws8ox272cdq` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=136 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `solved_problem`
--

LOCK TABLES `solved_problem` WRITE;
/*!40000 ALTER TABLE `solved_problem` DISABLE KEYS */;
INSERT INTO `solved_problem` VALUES (1,'2,668','JAVA','<h1>?메모</h1><p></p><p></p>','94,840 KB','423 ms','import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayDeque;\nimport java.util.Queue;\nimport java.util.StringTokenizer;\n\nclass Point {\n  int r;\n  int c;\n\n  public Point(int r, int c) {\n    this.r = r;\n    this.c = c;\n  }\n}\n\npublic class Solution {\n  static int N;\n  static int[][] map;\n  static boolean[][] visit;\n  static int result, maxTaste;\n  static int dr[] = { 1, -1, 0, 0 }; // 하 상 우 좌\n  static int dc[] = { 0, 0, 1, -1 };\n\n  public static void main(String[] args) throws IOException {\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    StringTokenizer st;\n\n    int T = Integer.parseInt(br.readLine());\n    for (int tc = 1; tc <= T; tc++) {\n      N = Integer.parseInt(br.readLine()); // 2 ≤ N ≤ 100\n\n      map = new int[N][N];\n      maxTaste = 0;\n      for (int r = 0; r < N; r++) {\n        st = new StringTokenizer(br.readLine(), \" \");\n        for (int c = 0; c < N; c++) {\n          map[r][c] = Integer.parseInt(st.nextToken()); // 1 ~ 100의 값\n          maxTaste = Math.max(maxTaste, map[r][c]);\n        }\n      }\n\n      result = 0;\n      // 해당 날짜와 같은 맛있는 정도 치즈 먹기\n      for (int i = 0; i <= maxTaste; i++) {\n\n        if (result > (N * N / 2))\n          break;\n\n        // 해당 날짜와 맛 정도 같은지 검사\n        for (int r = 0; r < N; r++) {\n          for (int c = 0; c < N; c++) {\n            if (map[r][c] == i) {\n              map[r][c] = 0;\n            }\n          }\n        }\n\n\n        // 덩어리 개수 검사\n        Queue<Point> lump = new ArrayDeque<>();\n\n        visit = new boolean[N][N];\n        int tmp = 0;\n        for (int r = 0; r < N; r++) {\n          for (int c = 0; c < N; c++) {\n            // 방문한 곳이 아니고 이미 먹은 곳이 아니면\n            if (map[r][c] != 0) {\n              if (!visit[r][c]) {\n                lump.add(new Point(r, c));\n                visit[r][c] = true;\n                bfs(lump);\n                tmp++;\n              }\n            }\n          }\n        }\n        result = Math.max(result, tmp);\n      }\n      System.out.println(\"#\" + tc + \" \" + result);\n    }\n\n  }\n\n  // 덩어리 검사\n  private static void bfs(Queue<Point> lump) {\n    while (!lump.isEmpty()) {\n      Point curr = lump.poll();\n      int r = curr.r;\n      int c = curr.c;\n\n      for (int d = 0; d < 4; d++) {\n        int nr = r + dr[d];\n        int nc = c + dc[d];\n\n        // 범위를 벗어나거나 이미 방문한 곳, 먹은 곳이면 이면 다음 위치로\n        if (nr < 0 || nr >= N || nc < 0 || nc >= N || visit[nr][nc] || map[nr][nc] == 0)\n          continue;\n        visit[nr][nc] = true;\n        lump.add(new Point(nr, nc));\n      }\n    }\n  }\n\n}',NULL,'2024-02-15',_binary '\0',1502,1),(2,'318','Python 3',NULL,'31120','52','for _ in range(int(input())):\r\n    x1, y1, r1, x2, y2, r2 = map(int, input().split())\r\n    r3 = (x1-x2)**2 + (y1-y2)**2\r\n    r4 = (r1+r2)**2\r\n    if(r3 == 0 and r1 == r2):\r\n        print(-1)\r\n    elif(r3 == r4 or (r1-r2)**2 == r3):\r\n        print(1)\r\n    elif((r1-r2)**2 < r3 < r4):\r\n        print(2)\r\n    else:\r\n        print(0)','72458574','2024-01-15',_binary '\0',3,1),(3,'1278','Python 3',NULL,'31500','52','import sys\r\nsys.setrecursionlimit(10**6)\r\ninput = sys.stdin.readline\r\n\r\ndirs = ((1, 0), (0, 1), (-1, 0), (0, -1)) # 우상좌하\r\n\r\ndef dfs(x: int, y: int):\r\n    field[x][y] = 2 # 방문했다는 값으로 2\r\n    for dx, dy in dirs:\r\n        nx = x + dx\r\n        ny = y + dy\r\n        # nx, ny가 범위를 벗어나지 않고 배추가 심어져있으면서 방문하지 않은 곳일 경우 다시 재귀\r\n        if 0 <= nx < M and 0 <= ny < N and field[nx][ny] == 1:\r\n            dfs(nx, ny)\r\n\r\nfor _ in range(int(input())):\r\n    M, N, K = map(int, input().split()) # M: 가로길이, N: 세로길이, K: 심어진 배추 위치\r\n    cabbage, field = [], [[0]*N for _ in range(M)] #cabbage: 심어진 배추 위치, field: 밭\r\n    ans = 0 # 해충수\r\n    for _ in range(K): # K의 최대값인 2500이 최대\r\n        x, y = map(int, input().split())\r\n        field[x][y] = 1 # 심어진 배추 값 1\r\n        cabbage.append([x, y])\r\n\r\n    # 아래 for문의 최대는 2500*5000 = 12,500,000?\r\n    for x, y in cabbage: # K의 최대값인 2500이 최대\r\n        if(field[x][y] != 2): # 해충이 배치되지 않았으면(방문하지 않은 곳이면)\r\n            dfs(x, y) # 해충의 최대수는 2500/2인 1250 추측 -> dfs 각각 4번씩 for문 돌면 5000\r\n            ans += 1\r\n    print(ans)','72552124','2024-01-15',_binary '\0',13,1),(4,'455','Python 3',NULL,'31120','88','N, M = map(int, input().split())\r\ndata = [list(input()) for _ in range(N)]\r\nresult = 64\r\nfor row in range(N - 7):\r\n    for column in range(M - 7):\r\n        tmp = 0\r\n        for i in range(8): #행\r\n            for j in range(8): #열\r\n                if((data[row+i][column+j] == \'W\' and (row+column+i+j)%2 == 0) or (data[row+i][column+j] == \'B\' and (row+column+i+j)%2 == 1)):\r\n                    tmp += 1\r\n        result = min(result, tmp, 64 - tmp)\r\nprint(result)','72555277','2024-01-15',_binary '\0',19,1),(5,'219','Python 3',NULL,'30840','108','N = int(input())\r\nresult = 0\r\nif(N <= 99):\r\n    print(N)\r\nelse:\r\n    for i in range(100, N+1):\r\n        tmp = list(map(int, str(i)))\r\n        if(tmp[0] - tmp[1] == tmp[1] - tmp[2]):\r\n            result += 1\r\n    print(99+result)','52312832','2024-01-17',_binary '\0',66,1),(6,'1311','Java 11',NULL,'14192','124','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n	static int N, R, C, value;\r\n	public static void main(String[] args) throws IOException {\r\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n		StringTokenizer st = new StringTokenizer(br.readLine());\r\n		\r\n		N = Integer.parseInt(st.nextToken());\r\n		R = Integer.parseInt(st.nextToken());\r\n		C = Integer.parseInt(st.nextToken());\r\n\r\n		N = (int)Math.pow(2, N);\r\n		value = 0;\r\n		divider(0, 0, N);\r\n		System.out.println(value);\r\n	}\r\n	\r\n	private static void divider(int x, int y, int size) {\r\n		if (size == 2) {\r\n			if ((R - x == 1) && (C - y == 1)) {\r\n				value += 3;\r\n			} else if (R - x == 1) {\r\n				value += 2;\r\n			} else if (C - y == 1) {\r\n				value += 1;\r\n			}\r\n			return;\r\n		}\r\n\r\n		int half = size/2;\r\n\r\n		if (R < x + half && C < y + half) {\r\n			//1사분면 \r\n			divider(x, y, half);\r\n		} else if (R < x + half && C >= y + half) {\r\n			//2사분면\r\n			value += half * half;\r\n			divider(x, y + half, half);\r\n		}else if (R >= x + half && C < y + half) {\r\n			//3사분면\r\n			value += (half * half) * 2;\r\n			divider(x + half, y, half);\r\n		} else if (R >= x + half && C >= y + half) {\r\n			//4사분면\r\n			value += (half * half) * 3;\r\n			divider(x + half, y + half, half);\r\n		}\r\n	}\r\n}\r\n','72551391','2024-01-17',_binary '\0',75,1),(7,'456','PyPy3',NULL,'114328','120','import sys\r\ninput = sys.stdin.readline\r\n\r\nN = int(input())\r\nhome = [[0,0,0]]\r\ndp = [[0,0,0]]\r\nfor _ in range(N):\r\n    home.append(list(map(int, input().split())))\r\n    dp.append([0,0,0])\r\n\r\ndp[1][0], dp[1][1], dp[1][2] = home[1][0], home[1][1], home[1][2]\r\n\r\nfor i in range(2, N+1):\r\n    dp[i][0] = min(dp[i-1][1], dp[i-1][2]) + home[i][0]\r\n    dp[i][1] = min(dp[i-1][0], dp[i-1][2]) + home[i][1]\r\n    dp[i][2] = min(dp[i-1][0], dp[i-1][1]) + home[i][2]\r\nprint(min(dp[N]))','56671340','2024-01-19',_binary '\0',150,1),(8,'927','Python 3',NULL,'31120','960','class Circle:\r\n    class Node:\r\n        def __init__(self, data):\r\n            self.data = data\r\n            self.next = None\r\n    def __init__(self):\r\n        self.last = None\r\n        self.size = 0\r\n    def insert(self, data):\r\n        newNode = self.Node(data)\r\n        if(not self.size):\r\n            newNode.next = newNode\r\n            self.last = newNode\r\n        else:\r\n            newNode.next = self.last.next\r\n            self.last.next = newNode\r\n            self.last = newNode\r\n        self.size += 1\r\n    def delete(self, K):\r\n        node = self.last\r\n        for _ in range(K):\r\n            self.last = node\r\n            node = node.next\r\n        self.last.next = node.next\r\n        return node.data\r\nN, K = map(int, input().split())\r\nc = Circle()\r\nfor i in range(1, N+1):\r\n    c.insert(i)\r\nprint(\'<\',end=\'\')\r\nfor i in range(N):\r\n    if(i == N-1):\r\n        print(f\'{c.delete(K)}>\', end= \'\')\r\n    else:\r\n        print(f\'{c.delete(K)}, \', end= \'\')','72558409','2024-01-19',_binary '\0',159,1),(9,'2403','Java 11',NULL,'16128','144','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayDeque;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static class Point {\r\n    int r, c, level, keys;\r\n\r\n    Point(int r, int c, int level, int keys) {\r\n      this.r = r;\r\n      this.c = c;\r\n      this.level = level;\r\n      this.keys = keys;\r\n    }\r\n  }\r\n\r\n  static int N, M, result;\r\n  static char[][] map;\r\n  static boolean[][][] visit;\r\n  static Point sp;\r\n  static int[] dr = { -1, 1, 0, 0 };\r\n  static int[] dc = { 0, 0, -1, 1 };\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n\r\n    map = new char[N][M];\r\n    for (int i = 0; i < N; i++) {\r\n      String row = br.readLine();\r\n      for (int j = 0; j < M; j++) {\r\n        map[i][j] = row.charAt(j);\r\n        if (map[i][j] == \'0\') {\r\n          sp = new Point(i, j, 0, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    visit = new boolean[N][M][65];\r\n    System.out.println(move());\r\n  }\r\n\r\n  private static int move() {\r\n    Queue<Point> q = new ArrayDeque<>();\r\n    q.add(sp);\r\n\r\n    while (!q.isEmpty()) {\r\n      Point tmp = q.poll();\r\n\r\n      visit[tmp.r][tmp.c][tmp.keys] = true;\r\n\r\n      int nr, nc;\r\n      for (int d = 0; d < 4; d++) {\r\n        nr = tmp.r + dr[d];\r\n        nc = tmp.c + dc[d];\r\n\r\n        if (nr < 0 || nr >= N || nc < 0 || nc >= M || visit[nr][nc][tmp.keys] || map[nr][nc] == \'#\')\r\n          continue;\r\n\r\n        if (map[nr][nc] == \'.\' || map[nr][nc] == \'0\') {\r\n          visit[nr][nc][tmp.keys] = true;\r\n          q.add(new Point(nr, nc, tmp.level + 1, tmp.keys));\r\n        } else if ((map[nr][nc] - \'A\') >= 0 && (map[nr][nc] - \'A\') <= 5) {\r\n          int value = map[nr][nc] - \'A\';\r\n          if ((tmp.keys & (1 << value)) != 0) {\r\n            visit[nr][nc][tmp.keys] = true;\r\n            q.add(new Point(nr, nc, tmp.level + 1, tmp.keys));\r\n          }\r\n        } else if ((map[nr][nc] - \'a\') >= 0 && (map[nr][nc] - \'a\') <= 5) {\r\n          int value = map[nr][nc] - \'a\';\r\n          visit[nr][nc][tmp.keys] = true;\r\n          q.add(new Point(nr, nc, tmp.level + 1, tmp.keys | (1 << value)));\r\n        } else if (map[nr][nc] == \'1\') {\r\n          return tmp.level + 1;\r\n        }\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n}\r\n','66026289','2024-01-20',_binary '\0',195,1),(10,'1856','Java 11',NULL,'134448','1540','import java.io.BufferedReader;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.PriorityQueue;\r\nimport java.util.Stack;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n\r\n  static class Jewel implements Comparable<Jewel> {\r\n    int m, v;\r\n\r\n    Jewel(int m, int v) {\r\n      this.m = m;\r\n      this.v = v;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Jewel o) {\r\n      return Integer.compare(this.m, o.m);\r\n    }\r\n  }\r\n\r\n  static int N, K;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n\r\n    N = Integer.parseInt(st.nextToken()); // 보석 개수\r\n    K = Integer.parseInt(st.nextToken()); // 가방 개수\r\n\r\n    ArrayList<Jewel> jewels = new ArrayList<>();\r\n    for (int i = 0; i < N; i++) {\r\n      st = new StringTokenizer(br.readLine());\r\n      jewels.add(new Jewel(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken())));\r\n    }\r\n\r\n    Collections.sort(jewels);\r\n\r\n    ArrayList<Integer> bags = new ArrayList<>();\r\n    for (int i = 0; i < K; i++) {\r\n      bags.add(Integer.parseInt(br.readLine()));\r\n    }\r\n    Collections.sort(bags);\r\n\r\n    PriorityQueue<Integer> tmp = new PriorityQueue<>(Comparator.reverseOrder());\r\n    long result = 0;\r\n    int startIdx = 0;\r\n    for (int i = 0; i < K; i++) {\r\n      for (int j = startIdx; j < N; j++) {\r\n        Jewel jewel = jewels.get(j);\r\n        if (jewel.m <= bags.get(i)) {\r\n          tmp.offer(jewel.v);\r\n          startIdx++;\r\n        } else {\r\n          jewels.add(jewel);\r\n          break;\r\n        }\r\n      }\r\n      if (!tmp.isEmpty()) {\r\n        result += tmp.poll();\r\n      }\r\n    }\r\n\r\n    System.out.println(result);\r\n  }\r\n}','71521432','2024-01-20',_binary '\0',203,1),(11,'2410','Java 11',NULL,'55052','2284','import java.io.BufferedReader;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\nimport java.util.PriorityQueue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n\r\n  static class Vertex implements Comparable<Vertex> {\r\n    int e, w;\r\n\r\n    Vertex(int e, int w) {\r\n      this.e = e;\r\n      this.w = w;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Vertex o) {\r\n      return Integer.compare(this.w, o.w);\r\n    }\r\n  }\r\n\r\n  static int N, M, X;\r\n  static int[][] adj;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n    X = Integer.parseInt(st.nextToken()); // 모이는 곳\r\n\r\n    // 간선 정보 받기\r\n    adj = new int[N + 1][N + 1];\r\n    for (int i = 0; i < M; i++) {\r\n      st = new StringTokenizer(br.readLine());\r\n\r\n      int s = Integer.parseInt(st.nextToken());\r\n      int e = Integer.parseInt(st.nextToken());\r\n      int w = Integer.parseInt(st.nextToken());\r\n\r\n      adj[s][e] = w;\r\n    }\r\n\r\n    // 특정 지점에서 도착 X로 최소값\r\n    int[] resToX = new int[N + 1];\r\n    for (int i = 1; i <= N; i++) {\r\n      resToX[i] = dijkstra(i)[X];\r\n    }\r\n\r\n    // x에서 특정 지점까지 최솟값\r\n    int[] resFromX = new int[N + 1];\r\n    resFromX = dijkstra(X);\r\n\r\n    // 가장 오래 걸리는 학생의 소요시간 구하기\r\n    int maxValue = 0;\r\n    for (int i = 1; i <= N; i++) {\r\n      maxValue = Math.max(maxValue, resToX[i] + resFromX[i]);\r\n    }\r\n\r\n    System.out.println(maxValue);\r\n  }\r\n\r\n  private static int[] dijkstra(int start) {\r\n    // 방문배열\r\n    boolean[] visit = new boolean[N + 1];\r\n    // 거리배열\r\n    int[] dist = new int[N + 1];\r\n\r\n    Arrays.fill(dist, Integer.MAX_VALUE);\r\n    dist[start] = 0;\r\n    PriorityQueue<Vertex> q = new PriorityQueue<Vertex>();\r\n    q.add(new Vertex(start, 0));\r\n\r\n    while (!q.isEmpty()) {\r\n      Vertex p = q.poll();\r\n\r\n      if (visit[p.e])\r\n        continue;\r\n\r\n      visit[p.e] = true;\r\n      for (int j = 1; j <= N; j++) {\r\n        if (adj[p.e][j] == 0)\r\n          continue;\r\n\r\n        if (!visit[j] && dist[j] > dist[p.e] + adj[p.e][j]) {\r\n          dist[j] = dist[p.e] + adj[p.e][j];\r\n          q.add(new Vertex(j, dist[j]));\r\n        }\r\n      }\r\n    }\r\n    return dist;\r\n  }\r\n\r\n}','71311143','2024-01-21',_binary '\0',239,1),(12,'1906','Java 11',NULL,'14056','128','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static int N;\r\n  static int[] onOff;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st;\r\n    StringBuilder sb = new StringBuilder();\r\n\r\n    // 스위치 불 켜짐 여부 값 저장\r\n    N = Integer.parseInt(br.readLine()); // 스위치 개수\r\n    onOff = new int[N + 1];\r\n    st = new StringTokenizer(br.readLine(), \" \");\r\n    for (int i = 1; i <= N; i++) {\r\n      onOff[i] = Integer.parseInt(st.nextToken());\r\n    }\r\n\r\n    // 학생의 성별과 받은 수 저장\r\n    int M = Integer.parseInt(br.readLine()); // 학생수\r\n    for (int i = 0; i < M; i++) {\r\n      st = new StringTokenizer(br.readLine(), \" \");\r\n      int gender = Integer.parseInt(st.nextToken());\r\n      int num = Integer.parseInt(st.nextToken());\r\n      // 스위치 불 변환\r\n      if (gender == 1) {\r\n        // 남자이면\r\n        changeMale(num);\r\n      } else {\r\n        changeFemale(num);\r\n      }\r\n    }\r\n\r\n    // 출력\r\n    for (int i = 1; i <= N; i++) {\r\n      sb.append(onOff[i]).append(\" \");\r\n      if (i % 20 == 0) {\r\n        sb.append(\"\\n\");\r\n      }\r\n    }\r\n    System.out.println(sb.toString());\r\n  }\r\n\r\n  // 성별이 남자일 때 스위치 변경\r\n  private static void changeMale(int num) {\r\n    for (int i = num; i <= N; i += num) {\r\n      onOff[i] = onOff[i] == 1 ? 0 : 1;\r\n    }\r\n  }\r\n\r\n  // 성별이 여자일 때 스위치 변경\r\n  private static void changeFemale(int num) {\r\n    int i = 1;\r\n    onOff[num] = onOff[num] == 1 ? 0 : 1;\r\n    while (true) {\r\n      if ((num - i) < 1 || (num + i) > N || (onOff[num - i] != onOff[num + i])) {\r\n        break;\r\n      }\r\n      onOff[num - i] = onOff[num - i] == 1 ? 0 : 1;\r\n      onOff[num + i] = onOff[num + i] == 1 ? 0 : 1;\r\n      i++;\r\n    }\r\n  }\r\n\r\n}','73082321','2024-01-22',_binary '\0',245,1),(13,'492','Python 3',NULL,'31256','40','#팰린드롬 확인\r\ndef check(s, count):\r\n    tmp = len(s)\r\n    for i in range(tmp//2): #짝수 자리면 ex)6이면 3 -> i: 0 ~ 2, 홀수 자리면 ex)5이면 2 -> i: 0 ~ 1\r\n        #팰린드롬이 아닐경우\r\n        if s[i] != s[tmp-i-1]:\r\n            return 0\r\n    return count\r\n\r\np = input()\r\nfor i in range(len(p)):\r\n    result = check(p[i:], len(p)+i)\r\n    #팰린드롬이 아니면 계속 반복하고\r\n    #맞을 경우 출력하고 break\r\n    if result:\r\n        print(result)\r\n        break','61026898','2024-01-23',_binary '\0',255,1),(14,'356','Python 3',NULL,'31120','44','N = int(input())\r\n\r\nresult = 0\r\nfor _ in range(N):\r\n    data = input()\r\n    g = list(data[0])\r\n    pre = data[0]\r\n    tmp = True\r\n    for i in data[1:]:\r\n        if(pre != i):\r\n            if i in g:\r\n                tmp = False\r\n                break\r\n            else:\r\n                pre = i\r\n                g.append(i)\r\n    if(tmp):\r\n        result += 1\r\nprint(result)','73093803','2024-01-23',_binary '\0',317,1),(15,'606','Python 3',NULL,'31120','44','data = input()\r\nnum, op = [], []\r\ntmp = \'\'\r\nfor i in data:\r\n    if(i == \'-\' or i == \'+\' ):\r\n        num.append(str(int(tmp)))\r\n        tmp = \'\'\r\n        op.append(i)\r\n    else:\r\n         tmp += i\r\nnum.append(str(int(tmp)))\r\n\r\ntmp = num[0]\r\ntmp2 = \'\'\r\nfor i in range(len(op)):\r\n    if(tmp2 == \'\'):\r\n        if(op[i] == \'-\'):\r\n            tmp2 += \'-\' + \'(\' + num[i+1]\r\n        else:\r\n            tmp += \'+\' + num[i+1]\r\n    else:\r\n        if(op[i] == \'-\'):\r\n            tmp += tmp2 + \')\'\r\n            tmp2 = \'-\' + \'(\' + num[i+1]\r\n        else:\r\n            tmp2 += \'+\' + num[i+1]\r\nif(tmp2 != \'\'):\r\n    tmp += tmp2 + \')\'\r\nprint(eval(tmp))','73447473','2024-01-24',_binary '\0',538,1),(16,'555','Python','<h1>?메모</h1><p></p><h2>- 문제 요약</h2><p></p><p></p><h2>- 사용한 알고리즘</h2><ul><li><p>단순탐색</p><p></p></li></ul><h2>- 풀이</h2><p></p>','51,364 KB','132 ms','T = int(input())\n \nfor test_case in range(1, T+1):\n    N, M = map(int, input().split())\n    board = [list(map(int, input().split())) for i in range(N)]\n    maxBug = 0\n    for rows in range(N):\n        if(rows + M > N):\n            break\n        for column in range(N):\n            temp = 0\n            if(column + M > N):\n                break\n            for row in range(rows, rows + M):\n                temp += sum(board[row][column:column+M])\n            if(maxBug < temp):\n                maxBug = temp\n    print(\'#{0} {1}\'.format(test_case, maxBug))',NULL,'2024-01-27',_binary '',1503,1),(17,'2,513','JAVA','<h1>?메모</h1><p></p><h2>- 문제 요약</h2><p></p><p></p><h2>- 사용한 알고리즘</h2><ul><li><p></p></li><li><p></p></li></ul><h2>- 풀이</h2><p>어려웠다...</p>','21,436 KB','143 ms','import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\npublic class Solution {\n\n  static int N, K;\n  static boolean[][] visit;\n  static int[] dx = { 0, 1, 0, -1 }; // 우 하 좌 상\n  static int[] dy = { 1, 0, -1, 0 };\n  static int[][] map;\n  // static boolean isAllUnion = true;\n  static int result;\n\n  public static void main(String[] args) throws IOException {\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    StringTokenizer st;\n\n    int T = Integer.parseInt(br.readLine());\n    for (int tc = 1; tc <= T; tc++) {\n      st = new StringTokenizer(br.readLine(), \" \");\n      N = Integer.parseInt(st.nextToken()); // 지도의 한 변의 길이\n      K = Integer.parseInt(st.nextToken()); // 최대 공사 가능 깊이\n\n      // 봉우리 높이 값 저장\n      map = new int[N][N];\n      int sp = 0; // 가장 높은 봉우리, 시작점\n      for (int i = 0; i < N; i++) {\n        st = new StringTokenizer(br.readLine(), \" \");\n        for (int j = 0; j < N; j++) {\n          map[i][j] = Integer.parseInt(st.nextToken());\n          sp = Math.max(map[i][j], sp);\n        }\n      }\n\n      // 등산로 구하기\n      result = 0;\n      for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n          if (map[i][j] == sp) {\n            visit = new boolean[N][N];\n            visit[i][j] = true;\n            dfs(i, j, false, 1);\n          }\n        }\n      }\n      // 결과값 출력\n      System.out.printf(\"#%d %d\\n\", tc, result);\n    }\n  }\n\n  // x, y값, flag: 봉우리 깍은 지 여부, cnt: 등산한 거리의 값\n  private static void dfs(int x, int y, boolean flag, int cnt) {\n    result = Math.max(result, cnt);\n    int nx, ny;\n    for (int d = 0; d < 4; d++) {\n      nx = x + dx[d];\n      ny = y + dy[d];\n\n      // 범위 벗어나거나 방문한 곳이면\n      if (nx < 0 || nx >= N || ny < 0 || ny >= N || visit[nx][ny])\n        continue;\n\n      // 이전에 간 봉우리가 현재의 봉우리보다 클 경우\n      visit[nx][ny] = true;\n      if (map[x][y] > map[nx][ny]) {\n        dfs(nx, ny, flag, cnt + 1);\n      } else {\n        // 이전에 간 봉우리보다 현재의 봉우리가 크거나 같을 경우 지형을 깎음\n        int diff = map[nx][ny] - map[x][y];\n        if (diff < K && flag == false) {\n          // 이전에 간 봉우리와 현재의 봉우리의 차이가 K보다 작으면 깎음\n          map[nx][ny] = map[nx][ny] - diff - 1; // 지형깎음\n          dfs(nx, ny, true, cnt + 1);\n          map[nx][ny] += diff + 1; // 원래값으로 복귀\n        }\n      }\n      visit[nx][ny] = false;\n    }\n  }\n}',NULL,'2024-01-27',_binary '',1504,1),(18,'3,311','JAVA',NULL,'31,876 KB','164 ms','import java.io.*;\nimport java.util.ArrayDeque;\nimport java.util.Queue;\nimport java.util.StringTokenizer;\n\npublic class Solution {\n  static int[] dr = { -1, 1, 0, 0 }; // 상 하 좌 우\n  static int[] dc = { 0, 0, -1, 1 };\n  static int N;\n  static int[][] map, result;\n  static Queue<Integer> s1 = new ArrayDeque<>();\n  static Queue<Integer> s2 = new ArrayDeque<>();\n\n  public static void main(String[] args) throws IOException {\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n    StringBuilder sb = new StringBuilder();\n    StringTokenizer st;\n\nint T = Integer.parseInt(br.readLine());\nfor (int tc = 1; tc <= T; tc++) {\n  st = new StringTokenizer(br.readLine());\n  N = Integer.parseInt(st.nextToken()); //정사각형 크기\n  String d = st.nextToken(); //up down left right\n\n  // 2048 게임 값 받기\n  map = new int[N][N];\n  for (int i = 0; i < N; i++) {\n    st = new StringTokenizer(br.readLine());\n    for (int j = 0; j < N; j++) {\n      map[i][j] = Integer.parseInt(st.nextToken());\n    }\n  }\n //입력된 방향으로 움직임\n  result = new int[N][N];\n  switch (d) {\n    case \"up\":\n      moveUp();\n      break;\n    case \"down\":\n      moveDown();\n      break;\n    case \"left\":\n     moveLeft();\n      break;\n    case \"right\":\n      moveLight();\n      break;\n  }\n  \n//출력\n  sb.append(\"#\").append(tc).append(\"\\n\");\n  for (int i = 0; i < N; i++) {\n	  for (int j = 0; j < N; j++) {\n		  sb.append(result[i][j]).append(\" \");\n	  }\n	  sb.append(\"\\n\");\n  }\n}\nbw.write(sb.toString());\nbw.flush();\n  }\n\n/*k: 움직일 방향이 row인지 column인지 0일때는 row, 1일때는 column\n * add: row나 column을 어디 방향으로 옮길지 1이면 증가하는 방향(오른쪽, 아래), -1이면 감소하는 방향(왼쪽, 위)\n  */\nprivate static void oneLineChange(int k, int row, int column, int add) {\n    while (!s1.isEmpty()) {\n      Integer tmp = s1.poll();\n      // s2에 비어있다면 -> 합칠 것이 없음 -> s1에서 뺴서 s2로 넣어줌\n      if (tmp.equals(0))\n        continue;\n      if (s2.isEmpty()) {\n        s2.add(tmp);\n        continue;\n      }\n      // s2의 마지막 값과 s1에서 뽑아낸 값이 같음 -> 합칠 수 있음\n      if (s2.peek().equals(tmp)) {\n    	  result[row][column] = tmp * 2;\n        s2.poll();\n      } else {\n        // s2의 마지막 값과 s1에서 뽑아낸 값이 다름\n    	  result[row][column] = s2.poll();\n        s2.add(tmp);\n      }\n      if (k == 0) {\n    	  row += add;    	  \n      } else {\n    	  column += add;    	      	  \n      }\n    }\n    if (!s2.isEmpty()) {\n    	result[row][column] = s2.poll();\n    }\n  }\n\n  private static void moveUp() {\n\n// N만큼 돌림\n	for (int i = 0; i < N; i++) {\n	  for (int j = 0; j < N; j++) {\n	    s1.add(map[j][i]); // 열 한줄씩 검사\n	  }\n	  oneLineChange(0, 0, i, 1);\n		}\n	 }\n  \n  private static void moveDown() {\n	  for (int i = 0; i < N; i++) {\n		  for (int j = N-1; j >= 0; j--) {\n		    s1.add(map[j][i]); // 열 한줄씩 검사\n		  }\n		  oneLineChange(0, N - 1, i, -1);\n		}\n		 }\n  private static void moveLight() {\n	  for (int i = 0; i < N; i++) {\n		for (int j = N-1; j >= 0; j--) {\n			s1.add(map[i][j]);\n		}\n		oneLineChange(1, i, N - 1, -1);\n	}\n  }\n  \n  private static void moveLeft() {\n	  for (int i = 0; i < N; i++) {\n		  for (int j = 0; j < N; j++) {\n			  s1.add(map[i][j]);\n		  }\n		  oneLineChange(1, i, 0, 1);\n	  }\n  }\n}',NULL,'2024-01-30',_binary '\0',1505,1),(19,'87','Python 3',NULL,'31120','52','N, *data = map(int, open(0).read().split())\r\nprint(sum(i/max(data)*100 for i in data)/N)','73094359','2024-01-31',_binary '\0',543,1),(20,'252','Python 3',NULL,'57976','7608','N, M = map(int, input().split())\r\npokemon = {input():str(i) for i in range(1, N+1)}\r\npokemon2 = list(pokemon)\r\ntest = list(input() for _ in range(M))\r\n\r\nfor data in test:\r\n    try:\r\n        print(pokemon[data])\r\n    except:\r\n        print(pokemon2[int(data)-1])','73081320','2024-02-02',_binary '\0',617,1),(21,'592','Java 11',NULL,'17756','208','import java.util.Scanner;\r\n\r\npublic class Main {\r\n  public static void main(String[] args) {\r\n    Scanner sc = new Scanner(System.in);\r\n    int N = sc.nextInt();\r\n    int M = sc.nextInt();\r\n    int L = sc.nextInt();\r\n\r\n    int[] p = new int[N + 1];\r\n    int idx = 1;\r\n    int count = 0;\r\n    p[1] = 1;\r\n    while (p[idx] != M) {\r\n      if (p[idx] % 2 == 1) { // 홀수면 시계방향\r\n        idx = idx + L > N ? (idx + L) - N : idx + L;\r\n      } else {\r\n        idx = idx - L > 0 ? idx - L : N - (L - idx);\r\n      }\r\n      p[idx] += 1;\r\n      count++;\r\n    }\r\n    System.out.println(count);\r\n    sc.close();\r\n  }\r\n}','63880673','2024-02-03',_binary '',589,1),(22,'1393','Java 11','<h1>?메모</h1><p></p><h2>- 문제 요약</h2><p>BFS 사용하여 탐색</p><p></p><h2>- 사용한 알고리즘</h2><ul><li><p>너비우선탐색</p></li><li><p></p></li></ul><h2>- 풀이</h2><p>방문한 곳을 판별하기 위한 visit 배열생성</p><p>큐에 처음 들어갈 때 도달까지 걸린 시간도 같이 넣어주기 위해 pair&lt;int, int&gt; 형 큐 선언</p><p>ex) {4, <strong>1</strong>} , {6, <strong>1</strong>}, {10, <strong>1</strong>}</p><p></p><p></p><p>DFS를이용한방식도고려해보는것이좋을듯ㄹㄹ</p>','17580','164','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayDeque;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n	\r\n	static int N, K;\r\n	static boolean find;\r\n	static Queue<Integer> q;\r\n	static boolean[] visit = new boolean[200000];\r\n\r\n	public static void main(String[] args) throws IOException {\r\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n		StringTokenizer st = new StringTokenizer(br.readLine());\r\n		\r\n		N = Integer.parseInt(st.nextToken());\r\n		K = Integer.parseInt(st.nextToken());\r\n		\r\n		if (N == K) {\r\n			System.out.println(0);\r\n		} else if (N > K) {\r\n			System.out.println(N - K);\r\n		} else {\r\n			q = new ArrayDeque<>();\r\n			q.add(N);\r\n			System.out.println(move());			\r\n		}\r\n		\r\n	}\r\n	\r\n	\r\n	private static int move() {\r\n		int result = 0;\r\n		L: while(!q.isEmpty()) {\r\n			int size = q.size();\r\n			int tmp;\r\n			result++;\r\n			for (int i = 0; i < size; i++) {\r\n				tmp = q.poll();\r\n				if (tmp * 2 == K) break L;\r\n				if (tmp - 1 == K) break L;\r\n				if (tmp + 1 == K) break L;\r\n				if (tmp < 100000 && tmp != 0 && !visit[tmp*2]) {\r\n					visit[tmp*2] = true;\r\n					q.add(tmp * 2);					\r\n				}\r\n				if (tmp < 100000 && !visit[tmp+1]) {\r\n					visit[tmp+1] = true;\r\n					q.add(tmp + 1);\r\n				}\r\n				if (tmp > 0 && !visit[tmp-1]) {\r\n					visit[tmp-1] = true;\r\n					q.add(tmp - 1);					\r\n				}\r\n			}\r\n		}\r\n		return result;\r\n	}\r\n}','66148888','2024-02-04',_binary '',694,1),(23,'195','Python 3',NULL,'42108','4020','N, M = map(int, input().split())\r\nnoHear = set(input() for _ in range(N))\r\nnoLook = set(input() for _ in range(M))\r\nresult = sorted(noHear & noLook)\r\n\r\nprint(len(result))\r\nfor i in result:\r\n    print(i)','52174792','2024-02-04',_binary '',760,1),(24,'487','Python 3',NULL,'36968','244','import sys\r\nfrom collections import deque\r\n\r\ninput = sys.stdin.readline\r\n\r\nN = int(input())\r\ndata = deque([int(input()) for _ in range(N)])\r\nstack, result = [], []\r\nnum = 1\r\n\r\nwhile(data):\r\n    if(stack == [] or stack[-1] != data[0]):\r\n        if(num == N+1):\r\n            break\r\n        stack.append(num)\r\n        result.append(\'+\')\r\n        num += 1\r\n    else:\r\n        result.append(\'-\')\r\n        stack.pop()\r\n        data.popleft()\r\n\r\nif(data):\r\n    print(\'NO\')\r\nelse:\r\n    for i in result:\r\n        print(i)\r\n','55012861','2024-02-04',_binary '',869,1),(25,'534','PyPy3',NULL,'115592','148','from collections import deque\r\nimport sys\r\ninput = sys.stdin.readline\r\n\r\nN = int(input())\r\nspace = [list(map(int, input().split())) for _ in range(N)]\r\ndp = [[0 for _ in range(N)] for _ in range(N)]\r\nq = deque([(0,0)])\r\ndp[0][0] = 1\r\nfor i in range(N):\r\n    for j in range(N):\r\n        if i == N - 1 and j == N - 1:\r\n            break\r\n        if dp[i][j]: #0이 아닐 때\r\n            m = space[i][j]\r\n            if i+m < N:\r\n                dp[i+m][j] += dp[i][j]\r\n            if j+m < N:\r\n                dp[i][j+m] += dp[i][j]\r\nprint(dp[N-1][N-1])','57071919','2024-02-05',_binary '',885,1),(26,'269','Python 3',NULL,'38828','80','N = int(input())\r\nnum = list(map(int, input().split()))\r\ndp = [0 for _ in range(N)]\r\ndp[0] = num[0]\r\nans = dp[0]\r\n\r\nfor i in range(1, N):\r\n    if dp[i-1] > 0:\r\n        dp[i] = dp[i-1] + num[i]\r\n    else:\r\n        dp[i] = num[i]\r\n\r\n    if ans < dp[i]:\r\n        ans = dp[i]\r\nprint(ans)','73080455','2024-02-05',_binary '',906,1),(27,'944','Java 11',NULL,'43452','524','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n	private static int N;\r\n	private static int[][] map;\r\n\r\n	public static void main(String[] args) throws IOException {\r\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n		StringTokenizer st;\r\n		\r\n		N = Integer.parseInt(br.readLine()); // 개수\r\n		map = new int[N][2]; // 회의실 값\r\n		for (int i = 0; i < N; i++) {\r\n			st = new StringTokenizer(br.readLine());\r\n			map[i][0] = Integer.parseInt(st.nextToken());\r\n			map[i][1] = Integer.parseInt(st.nextToken());\r\n		}\r\n		\r\n		\r\n		Arrays.sort(map, (o1, o2) -> {\r\n			return o1[1] != o2[1] ? o1[1] - o2[1] : o1[0] - o2[0];\r\n		});\r\n\r\n		int result = 1;\r\n		int pre = map[0][1];\r\n		for (int i = 1; i < N; i++) {\r\n			if (map[i][0] < pre) continue;\r\n			pre = map[i][1];\r\n			result++;\r\n		}\r\n		\r\n		System.out.println(result);\r\n		\r\n	}\r\n}\r\n','64905847','2024-02-05',_binary '',924,1),(28,'1351','Java 11',NULL,'15264','840','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static int R, C, result;\r\n  static int[][] map;\r\n  static int[] dx = { 0, 0, -1, 1 }; // 우 좌 상 하\r\n  static int[] dy = { 1, -1, 0, 0 };\r\n  static boolean[] visit = new boolean[26];\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\r\n    R = Integer.parseInt(st.nextToken()); // 세로 R\r\n    C = Integer.parseInt(st.nextToken()); // 가로 C\r\n\r\n    map = new int[R][C];\r\n    for (int i = 0; i < R; i++) {\r\n      String s = br.readLine();\r\n      for (int j = 0; j < C; j++) {\r\n        map[i][j] = s.charAt(j) - \'A\';\r\n      }\r\n    }\r\n\r\n    visit[map[0][0]] = true;\r\n    dfs(0, 0, 1);\r\n    System.out.println(result);\r\n  }\r\n\r\n  private static void dfs(int x, int y, int cnt) {\r\n    result = Math.max(result, cnt);\r\n    if (result >= R * C || result == 26)\r\n      return;\r\n\r\n    int nx, ny;\r\n    for (int d = 0; d < 4; d++) {\r\n      nx = x + dx[d];\r\n      ny = y + dy[d];\r\n\r\n      if (nx < 0 || nx >= R || ny < 0 || ny >= C || visit[map[nx][ny]])\r\n        continue;\r\n\r\n      visit[map[nx][ny]] = true;\r\n      dfs(nx, ny, cnt + 1);\r\n      visit[map[nx][ny]] = false;\r\n    }\r\n  }\r\n}\r\n','65273841','2024-02-05',_binary '',978,1),(29,'1410','Java 11',NULL,'14432','144','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayDeque;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static int N, M;\r\n  static int[][] maze;\r\n  static Queue<int[]> q;\r\n  static int[] dx = { 0, 0, -1, 1 }; // 우 좌 상 하\r\n  static int[] dy = { 1, -1, 0, 0 };\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n\r\n    // 미로 값 받기\r\n    maze = new int[N][M];\r\n    for (int i = 0; i < N; i++) {\r\n      String s = br.readLine();\r\n      for (int j = 0; j < M; j++) {\r\n        maze[i][j] = (int) (s.charAt(j) - \'0\');\r\n      }\r\n    }\r\n\r\n    q = new ArrayDeque<>();\r\n    q.add(new int[] { 0, 0 });\r\n    bfs();\r\n    System.out.println(maze[N - 1][M - 1]);\r\n  }\r\n\r\n  private static void bfs() {\r\n    while (!q.isEmpty()) {\r\n      int[] tmp = q.poll();\r\n      int x = tmp[0];\r\n      int y = tmp[1];\r\n      int nx, ny;\r\n      for (int d = 0; d < 4; d++) {\r\n        nx = x + dx[d];\r\n        ny = y + dy[d];\r\n\r\n        if (nx < 0 || nx >= N || ny < 0 || ny >= M || maze[nx][ny] != 1)\r\n          continue;\r\n        maze[nx][ny] = maze[x][y] + 1;\r\n        q.add(new int[] { nx, ny });\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n','64888857','2024-02-06',_binary '',1167,1),(30,'1900','Java 11',NULL,'115368','664','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayDeque;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static class Point {\r\n    int x, y, level, k;\r\n\r\n    public Point(int x, int y, int level, int k) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.level = level;\r\n      this.k = k;\r\n    }\r\n\r\n  }\r\n\r\n  static int N, M, result = Integer.MAX_VALUE;\r\n  static char[][] map;\r\n  static boolean[][][] visit;\r\n  static int[] dx = { 1, -1, 0, 0 };\r\n  static int[] dy = { 0, 0, 1, -1 };\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n\r\n    map = new char[N][M];\r\n    for (int i = 0; i < N; i++) {\r\n      map[i] = br.readLine().toCharArray();\r\n    }\r\n    visit = new boolean[N][M][2];\r\n    move(0, 0);\r\n    System.out.println(result == Integer.MAX_VALUE ? -1 : result);\r\n  }\r\n\r\n  private static void move(int x, int y) {\r\n    Queue<Point> q = new ArrayDeque<>();\r\n    q.add(new Point(0, 0, 1, 1));\r\n    int nx, ny;\r\n    while (!q.isEmpty()) {\r\n      Point tmp = q.poll();\r\n\r\n      if (tmp.x == N - 1 && tmp.y == M - 1) {\r\n        result = Math.min(result, tmp.level);\r\n        return;\r\n      }\r\n\r\n      for (int d = 0; d < 4; d++) {\r\n        nx = tmp.x + dx[d];\r\n        ny = tmp.y + dy[d];\r\n\r\n        if (nx < 0 || nx >= N || ny < 0 || ny >= M)\r\n          continue;\r\n\r\n        if (map[nx][ny] == \'0\' && visit[nx][ny][tmp.k] == false) {\r\n          visit[nx][ny][tmp.k] = true;\r\n          q.add(new Point(nx, ny, tmp.level + 1, tmp.k));\r\n        }\r\n        if (map[nx][ny] == \'1\' && tmp.k == 1) {\r\n          visit[nx][ny][1] = true;\r\n          q.add(new Point(nx, ny, tmp.level + 1, 0));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n','65960112','2024-02-06',_binary '',1194,1),(31,'201','PyPy3',NULL,'113248','104','N = int(input())\r\nresult = 0\r\nfor i in range(1, len(str(N)) * 9 + 1):\r\n    if(N <= i):\r\n        break\r\n    target = N - i + sum(map(int,str(N - i)))\r\n    if(N == target):\r\n        result = N - i\r\nprint(result)','51973724','2024-02-08',_binary '',1219,1),(32,'1485','Python 3',NULL,'88836','4180','import sys\r\ninput = sys.stdin.readline\r\n\r\nclass Node:\r\n    def __init__(self, data, p, n):\r\n        self.data = data\r\n        self.pre = p\r\n        self.next = n\r\nclass DualLikedList:\r\n    def __init__(self):\r\n        self.head = Node(None, None, None)\r\n        self.cursor = self.head\r\n    def insert(self, data):\r\n        newNode = Node(data, self.cursor, self.cursor.next)\r\n        if(newNode.next != None): # 맨 마지막에 값 추가\r\n            newNode.next.pre = newNode\r\n        self.cursor.next = newNode\r\n        self.cursor = newNode\r\n    def delete(self):\r\n        if(self.head != self.cursor):\r\n            self.cursor.pre.next = self.cursor.next\r\n            if(self.cursor.next != None):\r\n                self.cursor.next.pre = self.cursor.pre\r\n            self.cursor = self.cursor.pre\r\n    def moveLeft(self):\r\n        if(self.head != self.cursor):\r\n            self.cursor = self.cursor.pre\r\n    def moveLight(self):\r\n        if(self.cursor.next != None):\r\n            self.cursor = self.cursor.next\r\n    def print(self):\r\n        self.cursor = self.head\r\n        while(self.cursor.next != None):\r\n            self.cursor = self.cursor.next\r\n            print(self.cursor.data, end=\"\")\r\n        print()\r\n\r\nN = int(input())\r\nfor _ in range(N):\r\n    d = DualLikedList()\r\n    r = input().strip()\r\n    for i in r:\r\n        if(i == \'<\'):\r\n            d.moveLeft()\r\n        elif(i == \'>\'):\r\n            d.moveLight()\r\n        elif(i == \'-\'):\r\n            d.delete()\r\n        else:\r\n            d.insert(i)\r\n    d.print()','53679042','2024-02-08',_binary '',1506,1),(33,'1963','Java 11',NULL,'14244','124','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static int[][] input = new int[6][3];;\r\n  static int[][] output = new int[6][3];;\r\n  static int[][] match = new int[15][2];\r\n  static boolean isPossible;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st;\r\n\r\n    // match 상대\r\n    int k = 0;\r\n    for (int i = 0; i < 6; i++) {\r\n      for (int j = i + 1; j < 6; j++) {\r\n        match[k][0] = i;\r\n        match[k][1] = j;\r\n        k++;\r\n      }\r\n    }\r\n\r\n    // 게임의 승부결과 값받기\r\n    for (int tc = 0; tc < 4; tc++) {\r\n      st = new StringTokenizer(br.readLine(), \" \");\r\n      for (int i = 0; i < 6; i++) {\r\n        for (int j = 0; j < 3; j++) {\r\n          input[i][j] = Integer.parseInt(st.nextToken());\r\n        }\r\n      }\r\n      // 가능한 결과인지 확인\r\n      isPossible = false;\r\n      recursive(0);\r\n      System.out.print(isPossible ? 1 : 0);\r\n      System.out.print(\" \");\r\n    }\r\n  }\r\n\r\n  private static void recursive(int idx) {\r\n    if (idx == 15) {\r\n      for (int i = 0; i < 6; i++) {\r\n        for (int j = 0; j < 3; j++) {\r\n          if (input[i][j] != 0) {\r\n            isPossible = false;\r\n            return;\r\n          }\r\n        }\r\n      }\r\n      isPossible = true;\r\n      return;\r\n    }\r\n    if (isPossible)\r\n      return;\r\n\r\n    int[] team = match[idx];\r\n    int m2 = 1;\r\n    for (int m1 = 0; m1 < 3; m1++) {\r\n      switch (m1) {\r\n        case 0:\r\n          m2 = 2;\r\n          break;\r\n        case 1:\r\n          m2 = 1;\r\n          break;\r\n        case 2:\r\n          m2 = 0;\r\n          break;\r\n      }\r\n      if (input[team[0]][m1] - 1 >= 0 && input[team[1]][m2] - 1 >= 0) {\r\n        input[team[0]][m1]--;\r\n        input[team[1]][m2]--;\r\n        recursive(idx + 1);\r\n        input[team[0]][m1]++;\r\n        input[team[1]][m2]++;\r\n      }\r\n    }\r\n  }\r\n}','64724181','2024-02-08',_binary '',1507,1),(34,'357','Python 3',NULL,'31388','44','N = int(input())\r\ndata = [list(map(int, input().split())) for _ in range(N)]\r\nresult = [1 for _ in range(N)]\r\n\r\nfor i in range(N-1):\r\n    for j in range(i+1, N):\r\n        if(data[i][0] > data[j][0] and data[i][1] > data[j][1]):\r\n            result[j] += 1\r\n        elif(data[i][0] < data[j][0] and data[i][1] < data[j][1]):\r\n            result[i] += 1\r\nprint(*result)','52022140','2024-02-09',_binary '',1508,1),(35,'2311','Java 11',NULL,'103168','568','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayDeque;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n   static int M, N, date;\r\n   static int[][] map;\r\n   static int dr[] = {1, -1, 0, 0}; //하 상 우 좌, 우상 우하 좌하 좌상\r\n   static int dc[] = {0, 0, 1, -1};\r\n\r\n   public static void main(String[] args) throws IOException {\r\n	   BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n		StringTokenizer st;\r\n			st = new StringTokenizer(br.readLine(), \" \");\r\n			M = Integer.parseInt(st.nextToken());\r\n			N = Integer.parseInt(st.nextToken());\r\n			\r\n			//입력값 받기,토마토가 하나 이상 있는 경우만 존재\r\n			map = new int[N][M];\r\n			boolean isAllRipe = true;\r\n			Queue<int[]> q = new ArrayDeque<>();\r\n			int zeroCnt = 0; //0이 있는 총개수\r\n			for (int i = 0; i < N; i++) {\r\n				st = new StringTokenizer(br.readLine(), \" \");\r\n				for (int j = 0; j < M; j++) {\r\n					map[i][j] = Integer.parseInt(st.nextToken()); //1은 익은 토마토, 정수 0은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸\r\n					if (map[i][j] == 1) {\r\n						q.offer(new int[] {i, j});\r\n					} else if(map[i][j] == 0) {\r\n						isAllRipe = false;\r\n						zeroCnt++;\r\n						//익지 않은 토마토가 하나라도 있으면 모두 익은 것이 아님\r\n					}\r\n				}\r\n			}\r\n			//처음부터 토마토가 모두 익은 상태면 0출력하고 종료\r\n			if (isAllRipe) {\r\n				System.out.println(0);\r\n				System.exit(0);\r\n			}\r\n\r\n			//토마토가 모두 익을 때까지의 최소 날짜 구하기\r\n            //-1 ~ maxResult(토마토가 익지않은 총개수): 0일때 초기에 이미 익음, -1은 모두 익힐 수 없음\r\n			int zeroToOne = 0;\r\n			int ans = 0;\r\n\r\n			while(!q.isEmpty()) {\r\n				ans++;\r\n				if (zeroToOne == zeroCnt) break;\r\n				int lenStack = q.size();\r\n				for (int i = 0; i < lenStack; i++) {\r\n					int[] s = q.poll();\r\n					int nr, nc;\r\n					for (int d = 0; d < 4; d++) {\r\n						nr = s[0] + dr[d];\r\n						nc = s[1] + dc[d];\r\n						\r\n						if (nr < 0 || nr >= N || nc < 0 || nc >= M || map[nr][nc] != 0) continue;\r\n						map[nr][nc] = 1;\r\n						zeroToOne++;\r\n						q.offer(new int[] {nr, nc});\r\n					}\r\n				}\r\n				\r\n			}\r\n\r\n			System.out.println(zeroCnt == zeroToOne ? ans - 1 : -1);\r\n		}\r\n		\r\n}','64818733','2024-02-09',_binary '',1509,1),(36,'1157','Java 11',NULL,'14268','140','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st1;\r\n    StringTokenizer st2;\r\n\r\n    st1 = new StringTokenizer(br.readLine());\r\n    int N = Integer.parseInt(st1.nextToken());\r\n    int M = Integer.parseInt(st1.nextToken());\r\n\r\n    int[] m = new int[N + 1];\r\n    int[] c = new int[N + 1];\r\n\r\n    st1 = new StringTokenizer(br.readLine());\r\n    st2 = new StringTokenizer(br.readLine());\r\n    int sumC = 0;\r\n    for (int i = 0; i < N; i++) {\r\n      m[i + 1] = Integer.parseInt(st1.nextToken());\r\n      c[i + 1] = Integer.parseInt(st2.nextToken());\r\n      sumC += c[i + 1];\r\n    }\r\n\r\n    sumC++;\r\n    int result = sumC;\r\n    int[] dp = new int[sumC];\r\n    for (int i = 1; i < N + 1; i++) {\r\n      for (int j = result - 1; j - c[i] >= 0; j--) {\r\n        dp[j] = Math.max(dp[j], dp[j - c[i]] + m[i]);\r\n        if (dp[j] >= M) {\r\n          result = Math.min(result, j);\r\n        }\r\n      }\r\n    }\r\n    System.out.println(result);\r\n  }\r\n}','67916492','2024-02-09',_binary '',1510,1),(37,'915','Python 3',NULL,'89616','2836','def merge_sort(A, p, r):\r\n    if(p < r):\r\n        q = (p+r)//2\r\n        merge_sort(A, p, q)\r\n        merge_sort(A, q+1, r)\r\n        merge(A, p, q, r)\r\n    if(result > 0):\r\n        return\r\n\r\ndef merge(A, p, q, r):\r\n    global M, result\r\n    i, j, t = p, q+1, 0\r\n    while(i <= q and j <= r):\r\n        if(A[i] <= A[j]):\r\n            tmp[t] = A[i]\r\n            i += 1\r\n        else:\r\n            tmp[t] = A[j]\r\n            j += 1\r\n        t += 1\r\n    while(i <= q):\r\n        tmp[t] = A[i]\r\n        t += 1\r\n        i += 1\r\n    while(j <= r):\r\n        tmp[t] = A[j]\r\n        t += 1\r\n        j += 1\r\n    i, t = p, 0\r\n    while(i <= r):\r\n        A[i] = tmp[t]\r\n        M -= 1\r\n        if(M == 0):\r\n            result = tmp[t]\r\n            return\r\n        i += 1\r\n        t += 1\r\n\r\nglobal M, result, tmp\r\nresult = -1\r\nN, M = map(int, input().split())\r\ndata = list(map(int, input().split()))\r\ntmp = [0 for _ in range(N)]\r\nmerge_sort(data,0, len(data)-1)\r\nprint(result)','52653466','2024-02-09',_binary '',1511,1),(38,'595','Python 3',NULL,'31388','44','m = input()\r\n\r\ndef strToNum(s):\r\n    l = len(s) - 1\r\n    if s[-1] == \'K\':\r\n        return 10**l*5\r\n    else:\r\n        return 10**l\r\n\r\nmaxNum, minNum = \'\', \'\'\r\ntmp = \'\'\r\nfor i in m:\r\n    if i == \'K\':\r\n        if tmp == \'\':\r\n            minNum += \'5\'\r\n        else:\r\n            minNum += str(strToNum(tmp)) + \'5\' #K 이전까지 자르고 K의 값을 십집수로 변경하여 붙임, MMK -> MM K -> 10 5\r\n        tmp += i #K를 붙임\r\n        maxNum += str(strToNum(tmp))\r\n        tmp = \'\'\r\n    else:\r\n        tmp += i\r\nif tmp:\r\n    minNum += str(strToNum(tmp))\r\n    maxNum += len(tmp)*\'1\'\r\n\r\nprint(maxNum)\r\nprint(minNum)','60038949','2024-02-10',_binary '\0',1512,1),(39,'152','Python 3',NULL,'35652','124','n=int(input())\r\np = list(input().strip())\r\nans = 1\r\ncolor = p[0]\r\n\r\nfor i in range(1,n):\r\n    if p[i] != color and p[i] != p[i-1]:\r\n        ans += 1\r\nprint(ans)','60075572','2024-02-11',_binary '',1513,1),(40,'2583','Java 11',NULL,'40964','568','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static int N, M, K, result;\r\n  static int[] candy;\r\n  static int[][] parents;\r\n  static List<int[]> cList;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n    K = Integer.parseInt(st.nextToken());\r\n\r\n    candy = new int[N + 1];\r\n    st = new StringTokenizer(br.readLine());\r\n    for (int i = 1; i <= N; i++) {\r\n      candy[i] = Integer.parseInt(st.nextToken());\r\n    }\r\n\r\n    parents = new int[3][N + 1];\r\n    for (int i = 1; i <= N; i++) {\r\n      parents[0][i] = i;\r\n      parents[1][i] = candy[i];\r\n      parents[2][i] = 1;\r\n    }\r\n\r\n    for (int i = 0; i < M; i++) {\r\n      st = new StringTokenizer(br.readLine());\r\n      int a = Integer.parseInt(st.nextToken());\r\n      int b = Integer.parseInt(st.nextToken());\r\n      union(a, b);\r\n    }\r\n\r\n    for (int i = 1; i < N + 1; i++) {\r\n      if (parents[0][i] != i) {\r\n        int p = find(i);\r\n        parents[1][p] += parents[1][i];\r\n        parents[2][p] += parents[2][i];\r\n      }\r\n    }\r\n\r\n    cList = new ArrayList<>();\r\n    for (int i = 1; i < N + 1; i++) {\r\n      if (parents[0][i] == i && parents[2][i] < K) {\r\n        cList.add(new int[] { parents[2][i], parents[1][i] });\r\n      }\r\n    }\r\n      \r\n    if (cList.size() == 1) {\r\n      result = cList.get(0)[1];\r\n    } else if (cList.size() > 1) {\r\n      findMaxCandy();\r\n    }\r\n      \r\n    System.out.println(result);\r\n\r\n  }\r\n\r\n  private static int find(int a) {\r\n    if (parents[0][a] == a)\r\n      return a;\r\n    return parents[0][a] = find(parents[0][a]);\r\n  }\r\n\r\n  private static void union(int a, int b) {\r\n    int v1 = find(a);\r\n    int v2 = find(b);\r\n\r\n    if (v1 == v2)\r\n      return;\r\n    if (v1 < v2) {\r\n      parents[0][v2] = v1;\r\n    } else {\r\n      parents[0][v1] = v2;\r\n    }\r\n  }\r\n\r\n  private static void findMaxCandy() {\r\n    int[] dp = new int[K];\r\n    int[] curP = cList.get(0);\r\n    int idx = curP[0];\r\n    dp[0] = 0;\r\n    dp[idx] = curP[1];\r\n\r\n    for (int i = 1; i < cList.size(); i++) {\r\n      curP = cList.get(i);\r\n      for (int j = K - 1; j >= 0; j--) {\r\n        if (j != 0 && dp[j] == 0)\r\n          continue;\r\n        idx = j + curP[0];\r\n        if (idx < K) {\r\n          dp[idx] = Math.max(dp[idx], dp[j] + curP[1]);\r\n          result = Math.max(dp[idx], result);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}','67899791','2024-02-12',_binary '',1514,1),(41,'238','Python 3',NULL,'32464','52','n = int(input())\r\ne = list(map(int, input().split()))\r\nif n%2 == 1: #n이 홀수일 경우 근손실 값으로 0추가\r\n    e.append(0)\r\n\r\ne.sort()\r\nans = e[0] + e[-1]\r\nfor i in range(len(e)//2):\r\n    ans = max(ans, e[i]+e[len(e)-i-1])\r\nprint(ans)','59991404','2024-02-12',_binary '',1515,1),(42,'132','Python 3',NULL,'42172','68','n = int(input())\r\ne = list(map(int,input().split()))\r\n\r\nmaxE = max(e)\r\ntmp = sum(e)-maxE\r\nprint(maxE + (tmp//2 if tmp%2 == 0 else tmp/2))','59645471','2024-02-14',_binary '',1516,1),(43,'1489','Python 3',NULL,'31256','40','import sys\r\ninput = sys.stdin.readline\r\n\r\nN, K = map(int, input().split()) #N: 원하는 값, K: 구성 원소 개수\r\nnum = sorted(list(map(int, input().split())), reverse=True) #num: 구성 원소 숫자\r\nans = [] #ans: N과 같거나 작은 제일 큰 숫자\r\nbig = False #big: 제일 큰 숫자로 입력\r\nbigNum = max(num)\r\n\r\nif N < int(str(min(num))*len(str(N))):\r\n    print(str(max(num))*(len(str(N))-1))\r\n    exit()\r\n\r\nfor n in str(N):\r\n    for i in range(len(num)):\r\n        if(not big):\r\n            if(int(n) >= num[i]):\r\n                ans.append(num[i])\r\n                if(int(n) > num[i]): #N의 자릿수의 값보다 작은 값을 쓰므로써 N보다는 작은수 확정.\r\n                    big = True\r\n                break\r\n            elif int(n) < min(num):\r\n                big = False\r\n                for j in range(len(ans)-1,-1,-1):\r\n                    for u in num:\r\n                        if(ans[j] > u):\r\n                            big = True\r\n                            ans[j] = u\r\n                            for m in range(j+1,len(ans)):\r\n                                ans[m] = bigNum\r\n                            break\r\n                    if(big):\r\n                        break\r\n                ans.append(bigNum)\r\n            if(big):\r\n                break\r\n\r\n        else: #앞 자리의 수가 작아서 N보다 작아진 상태가 확실히 되면 뒷자리 수들은 가장 큰 수가 와도 됨.\r\n            ans.append(bigNum)\r\n            break\r\nprint(\'\'.join(map(str, ans)))','55391473','2024-02-15',_binary '',1517,1),(44,'213','PyPy3',NULL,'115396','168','N = int(input())\r\ndp = [0 for _ in range(N+1)]\r\ndp[1] = 1\r\n\r\nfor i in range(2, N+1):\r\n    dp[i] = 5\r\n    for j in range(1, i):\r\n        if j**2 > i:\r\n            break\r\n        dp[i] = min(dp[i-j**2]+1, dp[i])\r\nprint(dp[N])','56634313','2024-02-15',_binary '',1518,1),(45,'681','PyPy3',NULL,'115592','156','from collections import deque\r\ndir = [(1, 0), (1, -1), (1, 1)] #직진, 왼쪽아래대각선, 오른쪽아래대각선\r\n\r\nn, m = map(int, input().split())\r\ngraph = [list(map(int, input().split())) for _ in range(n)]\r\nans = 10000\r\nq = deque()\r\nfor i in range(m):\r\n    q.append([-1, 0, i, graph[0][i]]) #방향, x값, y값, 누적값\r\n    while q:\r\n        d, x, y, acc = q.popleft()\r\n        if x == n - 1:\r\n            ans = min(ans, acc)\r\n        for idx, v in enumerate(dir):\r\n            if idx == d:\r\n                continue\r\n            nx = x + v[0]\r\n            ny = y + v[1]\r\n            if 0 <= nx < n and 0 <= ny < m:\r\n                q.append([idx, nx, ny, acc+graph[nx][ny]])\r\nprint(ans)','59593127','2024-02-15',_binary '',1519,1),(46,'3347','Java 11',NULL,'14260','124','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\nimport java.util.PriorityQueue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static class Vertex implements Comparable<Vertex> {\r\n    int e, w;\r\n\r\n    public Vertex(int e, int w) {\r\n      super();\r\n      this.e = e;\r\n      this.w = w;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Vertex o) {\r\n      return this.w - o.w;\r\n    }\r\n\r\n  }\r\n\r\n  static int N, M;\r\n  static int[][] map;\r\n  static int[][] adjMatrix;\r\n  static int[] dx = { 0, 0, -1, 1 };\r\n  static int[] dy = { 1, -1, 0, 0 };\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n\r\n    map = new int[N][M];\r\n    for (int i = 0; i < N; i++) {\r\n      st = new StringTokenizer(br.readLine(), \" \");\r\n      for (int j = 0; j < M; j++) {\r\n        map[i][j] = Integer.parseInt(st.nextToken()) - 1;\r\n      }\r\n    }\r\n\r\n    int group = 1;\r\n    for (int i = 0; i < N; i++) {\r\n      for (int j = 0; j < M; j++) {\r\n        if (map[i][j] == 0) {\r\n          map[i][j] = group;\r\n          findIsland(i, j, group++);\r\n        }\r\n      }\r\n    }\r\n\r\n    adjMatrix = new int[group][group];\r\n    for (int i = 1; i < group; i++) {\r\n      Arrays.fill(adjMatrix[i], Integer.MAX_VALUE);\r\n    }\r\n    for (int i = 0; i < N; i++) {\r\n      for (int j = 0; j < M; j++) {\r\n        if (map[i][j] != -1) {\r\n          connect(i, j, map[i][j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    int result = 0;\r\n    boolean[] visit = new boolean[group];\r\n\r\n    PriorityQueue<Vertex> q = new PriorityQueue<>();\r\n    q.add(new Vertex(1, 0));\r\n    int cnt = 0;\r\n    boolean isBridge = false;\r\n    while (!q.isEmpty()) {\r\n      Vertex tmp = q.poll();\r\n\r\n      if (visit[tmp.e])\r\n        continue;\r\n\r\n      visit[tmp.e] = true;\r\n      result += tmp.w;\r\n      cnt++;\r\n      if (cnt == group - 1) {\r\n        isBridge = true;\r\n        break;\r\n      }\r\n\r\n      for (int i = 1; i < group; i++) {\r\n        int next = adjMatrix[tmp.e][i];\r\n\r\n        if (!visit[i] && next != Integer.MAX_VALUE) {\r\n          q.add(new Vertex(i, next));\r\n        }\r\n      }\r\n    }\r\n    if (isBridge) {\r\n      System.out.println(result);\r\n    } else {\r\n      System.out.println(-1);\r\n    }\r\n  }\r\n\r\n  private static void connect(int x, int y, int gNum) {\r\n    int nx = x, ny = y;\r\n    for (int d = 0; d < 4; d++) {\r\n      int cnt = 0;\r\n      int value;\r\n      while (true) {\r\n        nx += dx[d];\r\n        ny += dy[d];\r\n\r\n        if (nx < 0 || nx >= N || ny < 0 || ny >= M)\r\n          break;\r\n\r\n        value = map[nx][ny];\r\n        if (value == gNum)\r\n          break;\r\n\r\n        if (value != -1) {\r\n          if (cnt >= 2) {\r\n            adjMatrix[gNum][value] = Math.min(adjMatrix[gNum][value], cnt);\r\n            adjMatrix[value][gNum] = Math.min(adjMatrix[value][gNum], cnt);\r\n          }\r\n          break;\r\n        }\r\n        cnt++;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  private static void findIsland(int x, int y, int group) {\r\n    int nx, ny;\r\n    for (int d = 0; d < 4; d++) {\r\n      nx = x + dx[d];\r\n      ny = y + dy[d];\r\n\r\n      if (nx < 0 || nx >= N || ny < 0 || ny >= M || map[nx][ny] == -1)\r\n        continue;\r\n\r\n      if (map[nx][ny] == 0) {\r\n        map[nx][ny] = group;\r\n        findIsland(nx, ny, group);\r\n      }\r\n    }\r\n  }\r\n}','65521711','2024-02-15',_binary '',1520,1),(47,'1209','Java 11',NULL,'34536','1272','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\r\n    String str = br.readLine();\r\n    Deque<Character> deque = new LinkedList<>();\r\n    boolean isTag = false;\r\n\r\n    for (int i = 0; i < str.length(); i++) {\r\n\r\n      if (str.charAt(i) == \'<\') {\r\n        popWord(deque); // \'<\'나오기 전 단어 뒤집기\r\n        isTag = true;\r\n        deque.add(str.charAt(i));\r\n      } else if (str.charAt(i) == \'>\') {\r\n        // 1. \'>\'이 들어올경우 태그이므로 앞에서 뽑아냄\r\n        deque.add(\'>\');\r\n        while (!deque.isEmpty()) {\r\n          System.out.print(deque.poll());\r\n        }\r\n        isTag = false;\r\n      } else if (!isTag && str.charAt(i) == \' \') {\r\n        // 2.태그가 아니고 단어일때\r\n        popWord(deque);\r\n        System.out.print(\" \");\r\n      } else {\r\n        deque.add(str.charAt(i));\r\n      }\r\n    }\r\n    popWord(deque);\r\n  }\r\n\r\n  private static void popWord(Deque<Character> deque) {\r\n    while (!deque.isEmpty()) {\r\n      System.out.print(deque.pollLast());\r\n    }\r\n  }\r\n}','63997762','2024-02-15',_binary '',1521,1),(48,'3139','Java 11',NULL,'18660','252','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\nclass Point {\r\n  int x, y;\r\n\r\n  Point(int x, int y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n\r\npublic class Main {\r\n\r\n  private static int N, M, K, result = 10000;\r\n  private static int[][] map, tmp;\r\n  private static int[][] rotateInput;\r\n  static int[] dx = { 1, 0, -1, 0 }; // 하 우 상 좌\r\n  static int[] dy = { 0, 1, 0, -1 };\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n    K = Integer.parseInt(st.nextToken()); // 연산 개수\r\n\r\n    // 배열 값 받기\r\n    map = new int[N][M];\r\n    for (int i = 0; i < N; i++) {\r\n      st = new StringTokenizer(br.readLine());\r\n      for (int j = 0; j < M; j++) {\r\n        map[i][j] = Integer.parseInt(st.nextToken());\r\n      }\r\n    }\r\n\r\n    // 회전 연산 값 받기\r\n    rotateInput = new int[K][3];\r\n    for (int k = 0; k < K; k++) {\r\n      st = new StringTokenizer(br.readLine());\r\n      rotateInput[k][0] = Integer.parseInt(st.nextToken());\r\n      rotateInput[k][1] = Integer.parseInt(st.nextToken());\r\n      rotateInput[k][2] = Integer.parseInt(st.nextToken());\r\n    }\r\n\r\n    tmp = new int[N][M];\r\n    int[] sel = new int[K];\r\n    boolean[] visit = new boolean[K];\r\n    combination(0, sel, visit);\r\n    System.out.println(result);\r\n  }\r\n\r\n  private static void combination(int idx, int[] sel, boolean[] visit) {\r\n    if (idx == K) {\r\n      // 새로운 회전 연산위해 초기 입력값 배열 복사\r\n      for (int i = 0; i < N; i++) {\r\n        System.arraycopy(map[i], 0, tmp[i], 0, map[i].length);\r\n      }\r\n      // 순서대로 회전 연산\r\n      for (int i = 0; i < K; i++) {\r\n        int[] rcs = rotateInput[sel[i]];\r\n        rotate(rcs[0], rcs[1], rcs[2]);\r\n\r\n      }\r\n      // 돌리는 함수에서 배열의 행 값을 계산\r\n      getRowMin();\r\n      return;\r\n    }\r\n\r\n    for (int i = 0; i < K; i++) {\r\n      if (!visit[i]) {\r\n        visit[i] = true;\r\n        sel[idx] = i;\r\n        combination(idx + 1, sel, visit);\r\n        visit[i] = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  private static void getRowMin() {\r\n    for (int i = 0; i < N; i++) {\r\n      int rowSum = 0;\r\n      for (int j = 0; j < M; j++) {\r\n        rowSum += tmp[i][j];\r\n      }\r\n      result = Math.min(result, rowSum);\r\n    }\r\n  }\r\n\r\n  // 하나의 회전 연산\r\n  private static void rotate(int r, int c, int s) {\r\n    Point sp = new Point(r - s - 1, c - s - 1);\r\n    Point ep = new Point(r + s - 1, c + s - 1);\r\n\r\n    int count = (ep.x - sp.x) / 2;\r\n    for (int i = 0; i < count; i++) {\r\n      int x = sp.x + i;\r\n      int y = sp.y + i;\r\n\r\n      int a = tmp[x][y];\r\n      int d = 0;\r\n      while (d < 4) {\r\n        int nx = x + dx[d];\r\n        int ny = y + dy[d];\r\n\r\n        if (nx < sp.x + i || nx > ep.x - i || ny < sp.y + i || ny > ep.y - i) {\r\n          d++;\r\n          continue;\r\n        }\r\n\r\n        tmp[x][y] = tmp[nx][ny];\r\n        x = nx;\r\n        y = ny;\r\n      }\r\n      tmp[sp.x + i][sp.y + i + 1] = a;\r\n\r\n    }\r\n  }\r\n}\r\n','64887302','2024-02-15',_binary '',1522,1),(49,'1994','Java 11',NULL,'69904','636','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n\r\n  static final int SIZE = 9;\r\n  static int N, ans, result;\r\n  static int[][] value;\r\n  static boolean[] runner;\r\n  static int[] lineup = new int[SIZE];\r\n  static boolean[] visit = new boolean[SIZE];\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringBuilder sb = new StringBuilder();\r\n    StringTokenizer st;\r\n    N = Integer.parseInt(br.readLine());\r\n\r\n    value = new int[N][SIZE];\r\n    for (int i = 0; i < N; i++) {\r\n    	st = new StringTokenizer(br.readLine());\r\n    	for (int j = 0; j < SIZE; j++) {\r\n			value[i][j] = Integer.parseInt(st.nextToken());\r\n		}\r\n	}\r\n      \r\n    lineup[3] = 0;\r\n    visit[0] = true; \r\n    combination(0);\r\n    System.out.println(ans);\r\n  }\r\n\r\n  private static void combination(int k) {\r\n	  \r\n	  if (k == 3) {\r\n		  combination(k+1);\r\n		  return;\r\n	  }\r\n	  \r\n	  if (k == SIZE) {\r\n		  result = 0;\r\n		  int startIdx = 0;\r\n		  for (int i = 0; i < N; i++) {\r\n			  runner = new boolean[4];\r\n			int out = 0;\r\n			while(true) {\r\n				switch(value[i][lineup[startIdx]]) {\r\n				case 1:\r\n					run(1);\r\n					break;\r\n				case 2:\r\n					run(2);\r\n					break;\r\n				case 3:\r\n					run(3);\r\n					break;\r\n				case 4:\r\n					run(4);\r\n					break;\r\n				case 0:\r\n					out++;\r\n					break;\r\n				}\r\n				startIdx++;\r\n				if (startIdx == 9) {\r\n					startIdx = 0;\r\n				}\r\n				if (out == 3) {\r\n					break;\r\n				}\r\n			}\r\n		  }\r\n		  ans = Math.max(result, ans);\r\n		  return;\r\n	  }\r\n	  \r\n	  for (int i = 0; i < SIZE; i++) {\r\n		  if (!visit[i]) {\r\n			  visit[i] = true;\r\n			  lineup[k] = i;\r\n			  combination(k + 1);\r\n			  visit[i] = false;\r\n		  }\r\n	}\r\n  }\r\n\r\n  private static void run(int cnt) {\r\n	  runner[0] = true;\r\n	  for (int i = runner.length - 1; i >= 0; i--) {\r\n		if (runner[i]) {\r\n			if (i + cnt > 3) {\r\n				result++;\r\n			} else {\r\n				runner[i+cnt] = true;				\r\n			}\r\n			runner[i] = false;\r\n		}\r\n	}\r\n  }\r\n}','65550214','2024-02-15',_binary '',1523,1),(50,'3350','Java 11',NULL,'74056','352','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayDeque;\r\nimport java.util.Arrays;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static class Point {\r\n    int r, c;\r\n    int curV;\r\n\r\n    Point(int r, int c, int curV) {\r\n      this.r = r;\r\n      this.c = c;\r\n      this.curV = curV;\r\n    }\r\n  }\r\n\r\n  static int R, C, T;\r\n  static int[][] map;\r\n  static Point air;\r\n  static int[] dr = { -1, 0, 1, 0 };\r\n  static int[] dc = { 0, 1, 0, -1 };\r\n  static int[] dr2 = { 1, 0, -1, 0 };\r\n  static int[] dc2 = { 0, 1, 0, -1 };\r\n  static int ans;\r\n  static Queue<Point> q;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n\r\n    R = Integer.parseInt(st.nextToken());\r\n    C = Integer.parseInt(st.nextToken());\r\n    T = Integer.parseInt(st.nextToken());\r\n\r\n    map = new int[R][C];\r\n    ans = 0;\r\n    q = new ArrayDeque<>();\r\n    for (int i = 0; i < R; i++) {\r\n      st = new StringTokenizer(br.readLine());\r\n      for (int j = 0; j < C; j++) {\r\n        map[i][j] = Integer.parseInt(st.nextToken());\r\n        if (map[i][j] == -1) {\r\n          air = new Point(i, j, 0);\r\n        } else if (map[i][j] >= 5) {\r\n          q.add(new Point(i, j, map[i][j]));\r\n          map[i][j] = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    air.r -= 1;\r\n      \r\n    for (int i = 0; i < T; i++) {\r\n      int size = q.size();\r\n      for (int j = 0; j < size; j++) {\r\n        spread(q.poll());\r\n      }\r\n\r\n      upClean();\r\n      downClean();\r\n      addDust();\r\n    }\r\n    System.out.println(ans);\r\n  }\r\n\r\n  private static void spread(Point curP) {\r\n    int tmp = 0;\r\n\r\n    int nr, nc;\r\n    for (int d = 0; d < dr.length; d++) {\r\n      nr = curP.r + dr[d];\r\n      nc = curP.c + dc[d];\r\n\r\n      if (nr < 0 || nr >= R || nc < 0 || nc >= C || map[nr][nc] == -1)\r\n        continue;\r\n\r\n      tmp++;\r\n      map[nr][nc] += curP.curV / 5;\r\n    }\r\n\r\n    map[curP.r][curP.c] += curP.curV - (curP.curV / 5 * tmp);\r\n  }\r\n\r\n  private static void upClean() {\r\n    int nr = air.r, nc = air.c;\r\n    int r = nr, c = nc;\r\n    for (int d = 0; d < dr.length; d++) {\r\n\r\n      while (true) {\r\n        r = nr;\r\n        c = nc;\r\n        nr += dr[d];\r\n        nc += dc[d];\r\n\r\n        if (nr < 0 || nr >= R || nc < 0 || nc >= C || nr > air.r)\r\n          break;\r\n        if (map[r][c] == -1)\r\n          continue;\r\n\r\n        map[r][c] = map[nr][nc];\r\n      }\r\n      nr = r;\r\n      nc = c;\r\n    }\r\n    map[air.r][air.c] = -1;\r\n    map[air.r][air.c + 1] = 0;\r\n  }\r\n\r\n  private static void downClean() {\r\n    int nr = air.r + 1, nc = air.c;\r\n    int r = nr, c = nc;\r\n    for (int d = 0; d < dr.length; d++) {\r\n      while (true) {\r\n        r = nr;\r\n        c = nc;\r\n        nr += dr2[d];\r\n        nc += dc2[d];\r\n\r\n        if (nr < 0 || nr >= R || nc < 0 || nc >= C || nr <= air.r)\r\n          break;\r\n        if (map[r][c] == -1)\r\n          continue;\r\n\r\n        map[r][c] = map[nr][nc];\r\n      }\r\n      nr = r;\r\n      nc = c;\r\n    }\r\n    map[air.r + 1][air.c] = -1;\r\n    map[air.r + 1][air.c + 1] = 0;\r\n  }\r\n\r\n  private static void addDust() {\r\n    ans = 0;\r\n    for (int i = 0; i < R; i++) {\r\n      for (int j = 0; j < C; j++) {\r\n        ans += map[i][j];\r\n        if (map[i][j] >= 5) {\r\n          q.add(new Point(i, j, map[i][j]));\r\n          map[i][j] = 0;\r\n        }\r\n      }\r\n    }\r\n    ans += 2;\r\n  }\r\n}','68133303','2024-02-15',_binary '',1524,1),(51,'2530','Java 11',NULL,'27792','236','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayDeque;\r\nimport java.util.ArrayList;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n\r\n	  static int N, M, zeroCnt, result = Integer.MAX_VALUE;\r\n	  static int[][] map, copyMap;\r\n	  static boolean[][] visit;\r\n	  static ArrayList<int[]> virus;\r\n	  static int[] sel;\r\n	  static Queue<int[]> q = new ArrayDeque<>();\r\n	  static int[] dx = { -1, 1, 0, 0 };\r\n	  static int[] dy = { 0, 0, -1, 1 };\r\n\r\n	  public static void main(String[] args) throws IOException {\r\n	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n	    StringTokenizer st = new StringTokenizer(br.readLine());\r\n\r\n	    N = Integer.parseInt(st.nextToken());\r\n	    M = Integer.parseInt(st.nextToken());\r\n\r\n	    map = new int[N][N];\r\n	    virus = new ArrayList<>();\r\n	    for (int i = 0; i < N; i++) {\r\n	      st = new StringTokenizer(br.readLine());\r\n	      for (int j = 0; j < N; j++) {\r\n	        map[i][j] = Integer.parseInt(st.nextToken());\r\n	        if (map[i][j] == 2) {\r\n	        	map[i][j] = -1;\r\n	        	virus.add(new int[] { i, j});\r\n	        } else if (map[i][j] == 0) {\r\n	        	zeroCnt++;\r\n	        } \r\n	      }\r\n	    }\r\n\r\n	    sel = new int[M];\r\n	    combi(0, 0);\r\n	    System.out.println(result == Integer.MAX_VALUE ? -1 : result);\r\n	  }\r\n	  \r\n	  private static void combi(int idx, int k) {\r\n		  if (k == M) {\r\n\r\n			  q.clear();\r\n			  visit = new boolean[N][N];\r\n			  for (int i = 0; i < sel.length; i++) {\r\n				  int x = virus.get(sel[i])[0];\r\n				  int y = virus.get(sel[i])[1];\r\n\r\n				  visit[x][y] = true;\r\n				  q.add(new int[] {x, y});\r\n				  \r\n			  } \r\n			  spread(zeroCnt);\r\n			  return;\r\n		  }\r\n		  \r\n		  for (int i = idx; i < virus.size(); i++) {\r\n			  sel[k] = i;\r\n			  int x = virus.get(i)[0];\r\n			  int y = virus.get(i)[1];\r\n\r\n			  combi(i + 1, k + 1);\r\n		  }\r\n	  }\r\n	  \r\n	  private static void spread(int cnt) {\r\n		  int nx, ny;\r\n		  int time = 0;\r\n		  while(!q.isEmpty()) {\r\n			  if (time >= result) return;\r\n			  if (cnt == 0) {\r\n				  result = Math.min(result, time);\r\n				  return;\r\n			  }\r\n\r\n			  int size = q.size();\r\n			  \r\n			  for (int i = 0; i < size; i++) {\r\n				  int[] v = q.poll();\r\n				  for (int d = 0; d < 4; d++) {\r\n						nx = v[0] + dx[d];\r\n						ny = v[1] + dy[d];\r\n						\r\n						if (nx < 0 || nx >= N || ny < 0 || ny >= N || visit[nx][ny] || map[nx][ny] == 1) continue;\r\n						\r\n						visit[nx][ny] = true;\r\n						if (map[nx][ny] != -1 )cnt--;\r\n						q.add(new int[] {nx, ny});\r\n					  }\r\n			  }\r\n			  time++;\r\n\r\n			  \r\n			  \r\n		  }\r\n	  }\r\n}','66202859','2024-02-15',_binary '',1525,1),(52,'2451','Java 11',NULL,'33788','236','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayDeque;\r\nimport java.util.ArrayList;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static int N, M, zeroCnt, result = Integer.MAX_VALUE;\r\n  static int[][] map, copyMap;\r\n  static ArrayList<int[]> virus;\r\n  static int[] sel;\r\n  static Queue<int[]> q = new ArrayDeque<>();\r\n  static int[] dx = { -1, 1, 0, 0 };\r\n  static int[] dy = { 0, 0, -1, 1 };\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n    ;\r\n\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n\r\n    map = new int[N][N];\r\n    virus = new ArrayList<>();\r\n    for (int i = 0; i < N; i++) {\r\n      st = new StringTokenizer(br.readLine());\r\n      for (int j = 0; j < N; j++) {\r\n        map[i][j] = Integer.parseInt(st.nextToken());\r\n        if (map[i][j] == 2) {\r\n        map[i][j] = 0;\r\n          virus.add(new int[] { i, j, 0 });\r\n        } else if (map[i][j] == 0) {\r\n          zeroCnt++;\r\n        }\r\n      }\r\n    }\r\n\r\n    sel = new int[M];\r\n    combination(0, 0);\r\n    if (result == Integer.MAX_VALUE) {\r\n      System.out.println(-1);\r\n    } else {\r\n      System.out.println(result);\r\n    }\r\n  }\r\n\r\n  private static void combination(int idx, int k) {\r\n    if (k == M) {\r\n      copyMap = new int[N][N];\r\n      for (int i = 0; i < N; i++) {\r\n        System.arraycopy(map[i], 0, copyMap[i], 0, map[i].length);\r\n      }\r\n      \r\n       for (int i = 0; i < M; i++) {\r\n		int[] tmp = virus.get(sel[i]);\r\n		copyMap[tmp[0]][tmp[1]] = 2;\r\n		q.add(new int[] {tmp[0], tmp[1], 0});\r\n	}\r\n\r\n      spread(zeroCnt + virus.size() - M);\r\n      return;\r\n    }\r\n\r\n    for (int i = idx; i < virus.size(); i++) {\r\n      sel[k] = i;\r\n      combination(i + 1, k + 1);\r\n    }\r\n  }\r\n\r\n  private static void spread(int cnt) {\r\n	  int[] v = new int[] {};\r\n	  int x, y;\r\n    while (!q.isEmpty()) {\r\n      v = q.poll();\r\n\r\n      for (int d = 0; d < 4; d++) {\r\n        x = v[0] + dx[d];\r\n        y = v[1] + dy[d];\r\n\r\n        if (x < 0 || x >= N || y < 0 || y >= N || copyMap[x][y] != 0)\r\n          continue;\r\n\r\n        if (copyMap[x][y] == 0) {\r\n        	cnt--;\r\n        	copyMap[x][y] = v[2] + 1;\r\n          q.add(new int[] { x, y, copyMap[x][y] });\r\n        }\r\n      }\r\n    }\r\n    if (cnt == 0) {\r\n      result = Math.min(result, v[2]);\r\n      return;\r\n    }\r\n  }\r\n}','65780321','2024-02-15',_binary '',1526,1),(53,'2798','Java 11',NULL,'23664','388','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static class Point {\r\n    int x, y;\r\n\r\n    Point(int x, int y) {\r\n      this.x = x;\r\n      this.y = y;\r\n    }\r\n  }\r\n\r\n  static int N, M, D, ans, result;\r\n  static List<Point> enemy;\r\n  static int[] sel;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n    D = Integer.parseInt(st.nextToken());\r\n\r\n    int tmp;\r\n    enemy = new ArrayList<>();\r\n    for (int i = 0; i < N; i++) {\r\n      st = new StringTokenizer(br.readLine());\r\n      for (int j = 0; j < M; j++) {\r\n        tmp = Integer.parseInt(st.nextToken());\r\n        if (tmp == 1) {\r\n          enemy.add(new Point(i, j));\r\n        }\r\n      }\r\n    }\r\n    sel = new int[3];\r\n\r\n    combination(0, 0);\r\n    System.out.println(ans);\r\n  }\r\n\r\n  private static void combination(int idx, int start) {\r\n    if (idx == 3) {\r\n      result = 0;\r\n      ArrayList<Point> copyE = new ArrayList<>();\r\n      for (int i = 0; i < enemy.size(); i++) {\r\n        Point t = enemy.get(i);\r\n        copyE.add(new Point(t.x, t.y));\r\n      }\r\n      Point tmp;\r\n      ArrayList<Point> killE;\r\n      int dis = 0;\r\n      for (int row = 0; row < N; row++) {\r\n        killE = new ArrayList<>();\r\n        if (copyE.isEmpty())\r\n          break;\r\n        for (int i = 0; i < sel.length; i++) { // 궁수\r\n          int minIdx = Integer.MAX_VALUE, minD = Integer.MAX_VALUE;\r\n          for (int j = 0; j < copyE.size(); j++) { // 적\r\n            tmp = copyE.get(j);\r\n            dis = N - tmp.x + Math.abs(tmp.y - sel[i]);\r\n            if (dis <= D) {\r\n              if (dis < minD) {\r\n                minIdx = j;\r\n                minD = dis;\r\n              } else if (dis == minD) {\r\n                if (tmp.y < copyE.get(minIdx).y) {\r\n                  minIdx = j;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (minIdx != Integer.MAX_VALUE)\r\n            killE.add(copyE.get(minIdx));\r\n        }\r\n        for (int i = 0; i < killE.size(); i++) {\r\n          for (int j = 0; j < copyE.size(); j++) {\r\n            if (killE.get(i) == copyE.get(j)) {\r\n              copyE.remove(j--);\r\n              result++;\r\n            }\r\n          }\r\n        }\r\n\r\n        for (int i = 0; i < copyE.size(); i++) {\r\n          copyE.get(i).x++;\r\n          if (copyE.get(i).x == N) {\r\n            copyE.remove(i--);\r\n          }\r\n        }\r\n      }\r\n      ans = Math.max(ans, result);\r\n      return;\r\n    }\r\n\r\n    for (int i = start; i < M; i++) {\r\n      sel[idx] = i;\r\n      combination(idx + 1, i + 1);\r\n    }\r\n  }\r\n}\r\n','65662736','2024-02-15',_binary '',1527,1),(54,'1512','Java 11',NULL,'20040','312','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static int N, result;\r\n  static int[][] eggs;\r\n  static boolean isBroken;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st;\r\n\r\n    N = Integer.parseInt(br.readLine());\r\n\r\n    eggs = new int[N][2];\r\n    for (int i = 0; i < N; i++) {\r\n      st = new StringTokenizer(br.readLine());\r\n      eggs[i][0] = Integer.parseInt(st.nextToken());\r\n      eggs[i][1] = Integer.parseInt(st.nextToken());\r\n    }\r\n\r\n    hitEgg(0, 0);\r\n    System.out.println(result);\r\n  }\r\n\r\n  private static void hitEgg(int idx, int cnt) {\r\n    if (idx == N) {\r\n      result = Math.max(result, cnt);\r\n      return;\r\n    }\r\n    if (eggs[idx][0] <= 0) {\r\n      hitEgg(idx + 1, cnt);\r\n      return;\r\n    }\r\n\r\n    isBroken = true;\r\n    for (int j = 0; j < N; j++) {\r\n      if (idx == j)\r\n        continue;\r\n\r\n      if (eggs[j][0] > 0) {\r\n        isBroken = false;\r\n        eggs[idx][0] -= eggs[j][1];\r\n        eggs[j][0] -= eggs[idx][1];\r\n        if (eggs[idx][0] <= 0 && eggs[j][0] <= 0) {\r\n          hitEgg(idx + 1, cnt + 2);\r\n        } else if (eggs[idx][0] <= 0 || eggs[j][0] <= 0) {\r\n          hitEgg(idx + 1, cnt + 1);\r\n        } else {\r\n          hitEgg(idx + 1, cnt);\r\n        }\r\n        eggs[idx][0] += eggs[j][1];\r\n        eggs[j][0] += eggs[idx][1];\r\n      }\r\n    }\r\n    if (isBroken) {\r\n      hitEgg(N, cnt);\r\n    }\r\n  }\r\n}\r\n','65349975','2024-02-15',_binary '',1528,1),(55,'324','Python 3',NULL,'31256','56','a, b = map(int, input().split())\r\nans = 1\r\n\r\nwhile b > a:\r\n    strB = str(b)\r\n    if strB[-1] == \'1\':\r\n        b = int(strB[:-1])\r\n        ans += 1\r\n    elif b%2 == 0:\r\n        b = b//2\r\n        ans += 1\r\n    else: #끝자리가 1이 아니고 2로 나누어지지 않을때\r\n        ans = -1\r\n        break\r\n\r\nprint(ans if b == a else -1)','59689311','2024-02-15',_binary '',1529,1),(56,'1023','Python 3',NULL,'31256','76','import sys\r\ninput = sys.stdin.readline\r\nfrom itertools import combinations\r\n\r\nh, w = map(int, input().split())\r\nn = int(input())\r\nsticker = []\r\nfor _ in range(n):\r\n    sticker.append(list(map(int, input().split())))\r\n\r\nans = 0\r\nfor x, y in combinations(range(n), 2):\r\n    for a, b, c, d in (0,0,1,1), (0,1,1,0): #x의 인덱스(a,c), y의 인덱스(b,d) #1번째: 회전 x, 2번째: 회전 o\r\n        r1 = sticker[x][a] + sticker[y][b]\r\n        r2 = sticker[x][c] + sticker[y][d]\r\n        tmp = sticker[x][0]*sticker[x][1] + sticker[y][0]*sticker[y][1]\r\n        if r1 <= h and max(sticker[x][c], sticker[y][d]) <= w: # 0 0 h 1 1, 0 1 h 1 0\r\n            ans = max(ans, tmp)\r\n        elif r1 <= w and max(sticker[x][c], sticker[y][d]) <= h: #0 0 w 1 1, 0 1 w 1 0\r\n            ans = max(ans, tmp)\r\n        elif r2 <= h and max(sticker[x][a], sticker[y][b]) <= w: #1 1 h 0 0, 1 0 h 0 1\r\n            ans = max(ans, tmp)\r\n        elif r2 <= w and max(sticker[x][a], sticker[y][b]) <= h: #1 1 w 0 0, 1 0 w 0 1\r\n            ans = max(ans, tmp)\r\nprint(ans)','59264803','2024-02-15',_binary '',1530,1),(57,'2299','Java 11',NULL,'16580','196','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Stack;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static int R, C, N;\r\n  static StringBuilder[] map1, map2;\r\n  static int[] dx = { 0, 0, -1, 1 };\r\n  static int[] dy = { 1, -1, 0, 0 };\r\n  static Stack<int[]> booms;\r\n  static StringBuilder sb1;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n    sb1 = new StringBuilder();\r\n    R = Integer.parseInt(st.nextToken());\r\n    C = Integer.parseInt(st.nextToken());\r\n    N = Integer.parseInt(st.nextToken());\r\n    map1 = new StringBuilder[R];\r\n    map2 = new StringBuilder[R];\r\n\r\n    if (N == 1) {\r\n      for (int i = 0; i < R; i++) {\r\n        sb1.append(br.readLine()).append(\"\\n\");\r\n      }\r\n      System.out.println(sb1.toString());\r\n      System.exit(0);\r\n    }\r\n\r\n    if (N % 2 == 0) {\r\n      allBoom(map1);\r\n      print(map1);\r\n      System.exit(0);\r\n    }\r\n\r\n    StringBuilder sb2;\r\n    for (int i = 0; i < R; i++) {\r\n      sb2 = new StringBuilder(br.readLine());\r\n      map1[i] = sb2;\r\n    }\r\n\r\n    booms = new Stack<>();\r\n    allBoom(map2);\r\n    boom(map1, map2);\r\n\r\n    if (N % 4 == 1) {\r\n      allBoom(map1);\r\n      boom(map2, map1);\r\n      print(map1);\r\n      System.exit(0);\r\n    }\r\n    print(map2);\r\n  }\r\n\r\n  private static void allBoom(StringBuilder[] map) {\r\n    for (int i = 0; i < R; i++) {\r\n      StringBuilder sb2 = new StringBuilder();\r\n      for (int j = 0; j < C; j++) {\r\n        sb2.append(\'O\');\r\n      }\r\n      map[i] = sb2;\r\n    }\r\n  }\r\n\r\n  private static void boom(StringBuilder[] map1, StringBuilder[] map2) {\r\n    for (int i = 0; i < R; i++) {\r\n      for (int j = 0; j < C; j++) {\r\n        if (map1[i].charAt(j) == \'O\') {\r\n          map2[i].setCharAt(j, \'.\');\r\n\r\n          int x, y;\r\n          for (int d = 0; d < 4; d++) {\r\n            x = i + dx[d];\r\n            y = j + dy[d];\r\n\r\n            if (x < 0 || x >= R || y < 0 || y >= C)\r\n              continue;\r\n\r\n            map2[x].setCharAt(y, \'.\');\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private static void print(StringBuilder[] map) {\r\n    for (int i = 0; i < R; i++) {\r\n      sb1.append(map[i]).append(\"\\n\");\r\n    }\r\n    System.out.println(sb1.toString());\r\n  }\r\n}\r\n','65234496','2024-02-15',_binary '',1531,1),(58,'947','Java 11',NULL,'14468','140','import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    static int N, L;\r\n\r\n    public static void main(String[] args) throws NumberFormatException, IOException {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        StringTokenizer st;\r\n\r\n        st = new StringTokenizer(br.readLine());\r\n        N = Integer.parseInt(st.nextToken()); // 과일의 수\r\n        L = Integer.parseInt(st.nextToken()); //뱀의 길이\r\n        \r\n        PriorityQueue<Integer> q = new PriorityQueue<>();\r\n        st = new StringTokenizer(br.readLine(), \" \");\r\n        \r\n        int idx = 0;\r\n        for (int i = 0; i < N; i++) {\r\n            int v = Integer.parseInt(st.nextToken());\r\n            if (v <= L) {\r\n                L++;\r\n            } else {\r\n                q.offer(v);\r\n            }\r\n        }\r\n        while(!q.isEmpty()) {\r\n            if (q.poll() <= L) L++;\r\n        }\r\n        \r\n        System.out.println(L);\r\n    }        \r\n}','64947321','2024-02-15',_binary '',1532,1),(59,'1434','Java 11',NULL,'113856','888','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.PriorityQueue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static class Vertex implements Comparable<Vertex> {\r\n    int e, w;\r\n\r\n    Vertex(int e, int w) {\r\n      this.e = e;\r\n      this.w = w;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Vertex o) {\r\n      return this.w - o.w;\r\n    }\r\n  }\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st;\r\n\r\n    int N = Integer.parseInt(br.readLine());\r\n\r\n    int[][] adjMatrix = new int[N][N];\r\n    for (int i = 0; i < N; i++) {\r\n      st = new StringTokenizer(br.readLine());\r\n      for (int j = 0; j < N; j++) {\r\n        adjMatrix[i][j] = Integer.parseInt(st.nextToken());\r\n      }\r\n    }\r\n\r\n    PriorityQueue<Vertex> q = new PriorityQueue<>();\r\n    q.add(new Vertex(0, 0));\r\n    int cnt = 0;\r\n    Long result = 0L;\r\n    boolean[] visit = new boolean[N];\r\n\r\n    while (!q.isEmpty()) {\r\n      Vertex tmp = q.poll();\r\n\r\n      if (visit[tmp.e])\r\n        continue;\r\n\r\n      visit[tmp.e] = true;\r\n\r\n      result += tmp.w;\r\n\r\n      if (cnt++ == N - 1) {\r\n        break;\r\n      }\r\n\r\n      for (int i = 0; i < adjMatrix.length; i++) {\r\n        if (!visit[i] && adjMatrix[tmp.e][i] != 0) {\r\n          q.add(new Vertex(i, adjMatrix[tmp.e][i]));\r\n        }\r\n      }\r\n    }\r\n\r\n    System.out.println(result);\r\n  }\r\n}\r\n','65528066','2024-02-15',_binary '',1533,1),(60,'3196','Java 11',NULL,'14616','136','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.PriorityQueue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static class Point implements Comparable<Point> {\r\n    int x, y, level;\r\n\r\n    Point() {\r\n      this.level = 0;\r\n    };\r\n\r\n    Point(int x, int y, int level) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.level = level;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Point o) {\r\n      if (o.level == this.level) {\r\n        if (o.x == this.x) {\r\n          return this.y - o.y;\r\n        }\r\n        return this.x - o.x;\r\n      }\r\n      return this.level - o.level;\r\n    }\r\n  }\r\n\r\n  static int N, result;\r\n  static int[][] map;\r\n  static int dx[] = { -1, 0, 0, 1 };\r\n  static int dy[] = { 0, -1, 1, 0 };\r\n  static int sharkSize, eatCnt;\r\n  static int[] fishCnt = new int[7];\r\n  static boolean[][] visit;\r\n  static PriorityQueue<Point> q = new PriorityQueue<>();\r\n  static PriorityQueue<Point> tmpQ = new PriorityQueue<>();\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st;\r\n\r\n    st = new StringTokenizer(br.readLine());\r\n    N = Integer.parseInt(st.nextToken());\r\n\r\n    Point target = new Point();\r\n    map = new int[N][N];\r\n    for (int i = 0; i < N; i++) {\r\n      st = new StringTokenizer(br.readLine());\r\n      for (int j = 0; j < N; j++) {\r\n        map[i][j] = Integer.parseInt(st.nextToken());\r\n        if (map[i][j] == 9) {\r\n          target.x = i;\r\n          target.y = j;\r\n        } else if (map[i][j] != 0) {\r\n          fishCnt[map[i][j]]++;\r\n        }\r\n      }\r\n    }\r\n\r\n    sharkSize = 2;\r\n    eatCnt = 0;\r\n    q = new PriorityQueue<Point>();\r\n    map[target.x][target.y] = 0;\r\n    q.add(new Point(target.x, target.y, target.level));\r\n    int fish = 0;\r\n    for (int i = 1; i < sharkSize; i++) {\r\n      fish += fishCnt[i];\r\n    }\r\n    visit = new boolean[N][N];\r\n    visit[target.x][target.y] = true;\r\n    eat(fish);\r\n    System.out.println(result);\r\n  }\r\n\r\n  private static void eat(int fish) {\r\n    Point tmp;\r\n    int x, y, nx, ny, level;\r\n    while (!q.isEmpty()) {\r\n      if (fish == 0)\r\n        return;\r\n      int size = q.size();\r\n      for (int i = 0; i < size; i++) {\r\n		\r\n    	  tmp = q.poll();\r\n    	  x = tmp.x;\r\n    	  y = tmp.y;\r\n    	  level = tmp.level;\r\n    	  for (int d = 0; d < 4; d++) {\r\n    		  nx = x + dx[d];\r\n    		  ny = y + dy[d];\r\n    		  \r\n    		  if (nx < 0 || nx >= N || ny < 0 || ny >= N || map[nx][ny] > sharkSize || visit[nx][ny])\r\n    			  continue;\r\n    		  \r\n    		  visit[nx][ny] = true;\r\n \r\n    		  if (map[nx][ny] != 0 && map[nx][ny] < sharkSize) {\r\n    			  tmpQ.add(new Point(nx, ny, level + 1));\r\n    		  } else {\r\n    			  q.add(new Point(nx, ny, level + 1));\r\n    		  }\r\n    	  	}\r\n\r\n      }\r\n      if (!tmpQ.isEmpty()) {\r\n    	  Point f = tmpQ.poll();\r\n    	  tmpQ.clear();\r\n    	  map[f.x][f.y] = 0;\r\n    	  q.clear();\r\n    	  q.add(f);\r\n    	  visit = new boolean[N][N];\r\n    	  visit[f.x][f.y] = true;\r\n    	  fish--;\r\n    	  eatCnt++;\r\n    	  result = f.level;\r\n    	  if (eatCnt == sharkSize) {\r\n    		  if (sharkSize <= 6) {\r\n    			  fish += fishCnt[sharkSize];\r\n    		  }\r\n    		  sharkSize++;\r\n    		  eatCnt = 0;\r\n    	  }\r\n      }\r\n    }\r\n  }\r\n}','65238989','2024-01-19',_binary '',1534,1),(61,'3315','Java 11',NULL,'119260','1044','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Stack;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n\r\n  static int N, L, R;\r\n  static boolean[][] visit;\r\n  static int[] dx = { 0, 1, 0, -1 }; // 우 하 좌 상\r\n  static int[] dy = { 1, 0, -1, 0 };\r\n  static int[][] map;\r\n  static boolean isAllUnion = true;\r\n  static int sum, result;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\r\n\r\n    N = Integer.parseInt(st.nextToken()); // N * N 크기의 땅\r\n    L = Integer.parseInt(st.nextToken()); // 인구 차이 L명 이상\r\n    R = Integer.parseInt(st.nextToken()); // 인구 차이 R명 이하\r\n\r\n    // 나라별 인구수 값 저장\r\n    map = new int[N][N];\r\n    for (int i = 0; i < N; i++) {\r\n      st = new StringTokenizer(br.readLine(), \" \");\r\n      for (int j = 0; j < N; j++) {\r\n        map[i][j] = Integer.parseInt(st.nextToken());\r\n      }\r\n    }\r\n\r\n    // 연합 나라 구하기\r\n    Stack<Integer[]> union = new Stack<>();\r\n    while (isAllUnion) {\r\n      visit = new boolean[N][N];\r\n\r\n      for (int r = 0; r < N; r++) {\r\n        for (int c = 0; c < N; c++) {\r\n          if (!visit[r][c]) {\r\n            sum = map[r][c];\r\n            union.push(new Integer[] { r, c });\r\n            visit[r][c] = true;\r\n            findUnion(r, c, union);\r\n            movePeople(union);\r\n          }\r\n        }\r\n      }\r\n      // 연합인 나라가 없을 경우(true) false 값으로 바꿔서 연합 나라 구하는 것 종료\r\n      // 인구이동을 했을 때(isAllUnion 값이 false일때) 결과값 + 1을 하고 계속 연합 나라가 있는 지 탐색위해 true로 변경\r\n      if (!isAllUnion) {\r\n        isAllUnion = true;\r\n        result++;\r\n      } else {\r\n        isAllUnion = false;\r\n      }\r\n    }\r\n    System.out.println(result);\r\n\r\n  }\r\n\r\n  // 인구이동이 가능한 즉 연합인 나라를 찾음\r\n  // 현재 x y값, union: 연합인 나라의 위치 저장, sum: 연합인 나라의 인구수 합 저장\r\n  private static void findUnion(int x, int y, Stack<Integer[]> union) {\r\n    int nx, ny;\r\n\r\n    for (int d = 0; d < dx.length; d++) {\r\n      nx = x + dx[d];\r\n      ny = y + dy[d];\r\n\r\n      if (!chkRange(nx, ny))\r\n        continue;\r\n      // 방문하지 않은 곳이면 탐색\r\n      if (!visit[nx][ny]) {\r\n        // 인접한 두 나라의 인구수 차기가 범위 안이면\r\n        int tmp = Math.abs(map[x][y] - map[nx][ny]);\r\n        if (L <= tmp && tmp <= R) {\r\n          visit[nx][ny] = true;\r\n          union.add(new Integer[] { nx, ny });\r\n          sum += map[nx][ny];\r\n          findUnion(nx, ny, union);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // 연합인 나라들의 인구를 이동\r\n  private static void movePeople(Stack<Integer[]> union) {\r\n    int population = sum / union.size();\r\n    // 인구이동할 연합나라있는 경우(union값이 2이상인경우)\r\n    if (union.size() > 1) {\r\n      isAllUnion = false;\r\n    }\r\n    while (!union.isEmpty()) {\r\n      Integer[] tmp = union.pop();\r\n      map[tmp[0]][tmp[1]] = population;\r\n    }\r\n    union.clear();\r\n  }\r\n\r\n  private static boolean chkRange(int nx, int ny) {\r\n    if (nx < 0 || nx >= N || ny < 0 || ny >= N) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}','64596817','2024-01-11',_binary '',1535,1),(62,'2973','Java 11',NULL,'16320','164','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static int M;\r\n  static int result = 0;\r\n  static List<Integer> mulTen;\r\n  static int notMulTen = 0;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\r\n\r\n    int N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n\r\n    st = new StringTokenizer(br.readLine(), \" \");\r\n\r\n    mulTen = new ArrayList<>();\r\n\r\n    // 롤케이크 길이 값 받기\r\n    for (int i = 0; i < N; i++) {\r\n      int tmp = Integer.parseInt(st.nextToken());\r\n\r\n      if (tmp == 10) {\r\n        // 10이면 자를 필요없으므로 결과값에 + 1\r\n        result++;\r\n      } else if (M != 0 && tmp == 20) {\r\n        // 롤케이크 길이 중 20이 1번에 2개의 케이크를 가질 수 있기 때문에 우선으로 자름, M이 0일 때는 자를 수 없움\r\n        result += 2;\r\n        M--;\r\n      } else if (tmp < 10) {\r\n        // 10보다 작으면 자를 수 없으므로 저장x\r\n        continue;\r\n      } else if (tmp % 10 == 0) {\r\n        // 10의 배수 저장\r\n        mulTen.add(tmp);\r\n      } else {\r\n        // 10의 배수가 아닌 나머지를 10으로 나눈 값을 저장(한번 나눌때 한 개의 조각이 생김)\r\n        notMulTen += tmp / 10;\r\n      }\r\n    }\r\n\r\n    // 자를 수 있는 케이크가 있는 지 검사\r\n    chkCut();\r\n    // 10의 배수 길이인 케이크를 작은 순부터 검사 -> 케이크를 모두 10으로 잘랐을 때 자른 횟수보다 +1이 됨 => ex) 30을 2번\r\n    // 나누면 3개, 50을 2번 나누면 2개\r\n    Collections.sort(mulTen);\r\n    // 10의 배수 케이크 자르는 메서드\r\n    chkMultipleTen(mulTen);\r\n    chkCut();\r\n    // 10의 배수가 아닌 케이크들을 자를 수 있는 총 횟수보다 M이 작으면 M만큼 자름, 아니면 총 횟수만큼 자름(한번 자르면 1개의 조각)\r\n    result += notMulTen <= M ? notMulTen : M;\r\n\r\n    // 모든 롤케이크가 10보다 작은 경우 0출력\r\n    // 자를 수 있는 최대 횟수를 다 안썼을 경우 이때까지 저장된 자른 케이크 값\r\n    System.out.println(result);\r\n  }\r\n\r\n  // 자를 수 있는 횟수를\r\n  private static void chkCut() {\r\n    if (M == 0 || (mulTen.isEmpty() && notMulTen == 0)) {\r\n      System.out.println(result);\r\n      System.exit(0);\r\n    }\r\n  }\r\n\r\n  private static void chkMultipleTen(List<Integer> list) {\r\n    int tmp;\r\n    for (Integer num : list) {\r\n      tmp = num / 10 - 1;\r\n      // 롤케이크 길이를 10으로 자를 수 있는 횟수가 M보다 작거나 같을 경우 자를 수 있는 만큼 자름\r\n      if (M >= tmp) {\r\n        M -= tmp;\r\n        result += tmp + 1;\r\n      } else {\r\n        result += M;\r\n        M = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n','64364623','2024-01-09',_binary '',1536,1),(63,'1801','Java 11',NULL,'170944','556','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static int N, D, K, C;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n    N = Integer.parseInt(st.nextToken()); // 접시의 수\r\n    D = Integer.parseInt(st.nextToken()); // 초밥의 가짓수\r\n    K = Integer.parseInt(st.nextToken()); // 연속해서 먹는 접시의 수\r\n    C = Integer.parseInt(st.nextToken()); // 쿠폰 번호\r\n\r\n    int[] isEat = new int[D + 1];\r\n    int tmp;\r\n    int result = 0;\r\n    int cnt = 0;\r\n    int[] value = new int[N];\r\n    int idx = 0;\r\n    for (int i = 0; i < N; i++) {\r\n      tmp = Integer.parseInt(br.readLine());\r\n      value[i] = tmp;\r\n      if (i - K >= 0) {\r\n        if (isEat[value[idx]] == 1) {\r\n          cnt--;\r\n          isEat[value[idx]] = 0;\r\n        } else if (isEat[value[idx]] > 0) {\r\n          isEat[value[idx]] -= 1;\r\n        }\r\n        idx++;\r\n      }\r\n\r\n      if (isEat[tmp] == 0) {\r\n        cnt++;\r\n      }\r\n      isEat[tmp] += 1;\r\n      if (isEat[C] == 0) {\r\n        result = Math.max(result, cnt + 1);\r\n      } else {\r\n        result = Math.max(result, cnt);\r\n      }\r\n    }\r\n    tmp = 0;\r\n    for (int i = idx; i < N - 1; i++) {\r\n      if (isEat[value[i]] == 1) {\r\n        cnt--;\r\n        isEat[value[i]] = 0;\r\n      } else if (isEat[value[i]] > 0) {\r\n        isEat[value[i]] -= 1;\r\n      }\r\n\r\n      if (isEat[value[tmp]] == 0) {\r\n        cnt++;\r\n      }\r\n      isEat[value[tmp]] += 1;\r\n      tmp++;\r\n\r\n      if (isEat[C] == 0) {\r\n        result = Math.max(result, cnt + 1);\r\n      } else {\r\n        result = Math.max(result, cnt);\r\n      }\r\n\r\n    }\r\n    System.out.println(result);\r\n  }\r\n\r\n}','66148897','2024-01-24',_binary '',1537,1),(64,'2345','Java 11',NULL,'18704','300','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Stack;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n	private static int N, M, result = Integer.MAX_VALUE;\r\n	private static int[][] map;\r\n	private static int[] sel;\r\n	private static int[][] selChickenMap;\r\n	private static Stack<int[]> chicken, house;\r\n	private static int dx[] = {1, -1, 0, 0}; //하 상 우 좌\r\n	private static int dy[] = {0, 0, 1, -1};\r\n\r\n	public static void main(String[] args) throws IOException {\r\n		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n		StringTokenizer st;\r\n		\r\n		st = new StringTokenizer(br.readLine());\r\n		N = Integer.parseInt(st.nextToken()); // map의 크기\r\n		M = Integer.parseInt(st.nextToken()); // 도시에 있는 치킨집 중에서 최대 M개를 고르기\r\n		\r\n		//map값 받기, 0은 빈 칸, 1은 집(1 < 집 <= 2N - 1개), 2는 치킨집(M <= 치킨집 <= 13)\r\n		map = new int[N][N];\r\n		house = new Stack<>();\r\n		chicken = new Stack<>(); //최대 13까지 가능하므로 치킨 집 저장\r\n		for (int i = 0; i < N; i++) {\r\n			st = new StringTokenizer(br.readLine());\r\n			for (int j = 0; j < N; j++) {\r\n				map[i][j] = Integer.parseInt(st.nextToken());\r\n				if (map[i][j] == 2) {\r\n					chicken.add(new int[] {i, j});\r\n				} else if (map[i][j] == 1) {\r\n					house.add(new int[] {i, j});\r\n				}\r\n			}\r\n		}\r\n		\r\n		//폐업시키지 않을 치킨집을 최대 M개를 골랐을 때, 도시의 치킨 거리의 최솟값을 구하기\r\n		//폐업시키지 않을 치킨집을 M개부터 하고 bfs로 집과 가장 가까운 치킨집을 골랐을 때 그 개수가 M을 넘지 않으면 그때의 result값을 출력하고 종료\r\n		//M을 넘었을 경우 M - 1하나해서 조합으로 \r\n		sel = new int[M];\r\n		combination(0, 0);\r\n		System.out.println(result);\r\n		\r\n	}\r\n	\r\n	private static void combination(int start, int k) {\r\n		if (k == M) {\r\n			int sum = 0;\r\n			for (int i = 0; i < house.size(); i++) {\r\n				int tmp1 = Integer.MAX_VALUE;\r\n				for (int j = 0; j < M; j++) {\r\n					tmp1 = Math.min(tmp1, (Math.abs(house.get(i)[0] - chicken.get(sel[j])[0]) + Math.abs(house.get(i)[1] - chicken.get(sel[j])[1])));\r\n				}\r\n				sum += tmp1;\r\n			}\r\n			result = Math.min(result, sum);			\r\n			return;\r\n		}\r\n		\r\n		for (int i = start; i < chicken.size(); i++) {\r\n			sel[k] = i;\r\n			combination(i + 1, k + 1);\r\n		}\r\n	}\r\n}\r\n','64920257','2024-01-18',_binary '',1538,1),(65,'6073','Java 11',NULL,'31828','292','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayDeque;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n  static class Info {\r\n    int x, y, num;\r\n\r\n    public Info(int x, int y, int num) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.num = num;\r\n    }\r\n\r\n  }\r\n\r\n  static int M, N;\r\n  static int[][] map;\r\n  static int dx1[] = { -1, 1, 0, 0 };\r\n  static int dy1[] = { 0, 0, 1, -1 };\r\n  static int dx3[][] = { { -1, 0 }, { -1, 0 }, { 1, 0 }, { 1, 0 } };\r\n  static int dy3[][] = { { 0, 1 }, { 0, -1 }, { 0, 1 }, { 0, -1 } };\r\n  static int dx4[][] = { { -1, 1, 0 }, { -1, 1, 0 }, { 1, 0, 0 }, { -1, 0, 0 } };\r\n  static int dy4[][] = { { 0, 0, 1 }, { 0, 0, -1 }, { 0, -1, 1 }, { 0, -1, 1 } };\r\n  static int blankCnt, result = Integer.MAX_VALUE;\r\n  static ArrayList<Info> cctv;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n    cctv = new ArrayList<>();\r\n    map = new int[N][M];\r\n    for (int i = 0; i < N; i++) {\r\n      st = new StringTokenizer(br.readLine());\r\n      for (int j = 0; j < M; j++) {\r\n        map[i][j] = Integer.parseInt(st.nextToken());\r\n        if (map[i][j] != 0 && map[i][j] != 6) {\r\n          cctv.add(new Info(i, j, map[i][j]));\r\n        } else if (map[i][j] == 0) {\r\n          blankCnt++;\r\n        }\r\n      }\r\n    }\r\n    findBlindSpot(0, blankCnt);\r\n    System.out.println(result);\r\n  }\r\n\r\n  private static void findBlindSpot(int idx, int cctvCnt) {\r\n    if (idx == cctv.size()) {\r\n      result = Math.min(result, cctvCnt);\r\n      return;\r\n    }\r\n\r\n    int x = cctv.get(idx).x;\r\n    int y = cctv.get(idx).y;\r\n    Queue<int[]> changeXY = new ArrayDeque<>();\r\n    int nx, ny;\r\n    switch (map[x][y]) {\r\n      case 1:\r\n        for (int d = 0; d < 4; d++) {\r\n          int tmp = 0;\r\n          nx = x;\r\n          ny = y;\r\n          while (true) {\r\n            nx += dx1[d];\r\n            ny += dy1[d];\r\n\r\n            if (nx < 0 || nx >= N || ny < 0 || ny >= M || map[nx][ny] == 6) {\r\n              findBlindSpot(idx + 1, cctvCnt - tmp);\r\n              break;\r\n            }\r\n\r\n            if (map[nx][ny] == 0) {\r\n              tmp++;\r\n            }\r\n            if (map[nx][ny] <= 0) {\r\n              map[nx][ny] -= 1;\r\n              changeXY.add(new int[] { nx, ny });\r\n            }\r\n          }\r\n          while (!changeXY.isEmpty()) {\r\n            int[] p = changeXY.poll();\r\n            map[p[0]][p[1]] += 1;\r\n          }\r\n        }\r\n        break;\r\n      case 2:\r\n        for (int i = 0; i < 4; i += 2) {\r\n          int tmp = 0;\r\n          int d = i;\r\n          nx = x;\r\n          ny = y;\r\n          while (true) {\r\n            nx += dx1[d];\r\n            ny += dy1[d];\r\n\r\n            if (nx < 0 || nx >= N || ny < 0 || ny >= M || map[nx][ny] == 6) {\r\n              if (d++ % 2 == 1) {\r\n                findBlindSpot(idx + 1, cctvCnt - tmp);\r\n                break;\r\n              } else {\r\n                continue;\r\n              }\r\n            }\r\n            if (map[nx][ny] == 0) {\r\n              tmp++;\r\n            }\r\n            if (map[nx][ny] <= 0) {\r\n              map[nx][ny] -= 1;\r\n              changeXY.add(new int[] { nx, ny });\r\n            }\r\n          }\r\n\r\n          while (!changeXY.isEmpty()) {\r\n            int[] p = changeXY.poll();\r\n            map[p[0]][p[1]] += 1;\r\n          }\r\n        }\r\n        break;\r\n      case 3:\r\n        for (int i = 0; i < dx3.length; i++) {\r\n          int tmp = 0;\r\n          for (int d = 0; d < dx3[0].length; d++) {\r\n            nx = x;\r\n            ny = y;\r\n            while (true) {\r\n\r\n              nx += dx3[i][d];\r\n              ny += dy3[i][d];\r\n              if (nx < 0 || nx >= N || ny < 0 || ny >= M || map[nx][ny] == 6) {\r\n                if (d == 1) {\r\n                  findBlindSpot(idx + 1, cctvCnt - tmp);\r\n                }\r\n                break;\r\n              }\r\n\r\n              if (map[nx][ny] == 0) {\r\n                tmp++;\r\n              }\r\n              if (map[nx][ny] <= 0) {\r\n                map[nx][ny] -= 1;\r\n                changeXY.add(new int[] { nx, ny });\r\n              }\r\n            }\r\n          }\r\n          while (!changeXY.isEmpty()) {\r\n            int[] p = changeXY.poll();\r\n            map[p[0]][p[1]] += 1;\r\n          }\r\n        }\r\n        break;\r\n      case 4:\r\n        for (int i = 0; i < dx4.length; i++) {\r\n          int tmp = 0;\r\n          for (int d = 0; d < dx4[0].length; d++) {\r\n            nx = x;\r\n            ny = y;\r\n            while (true) {\r\n\r\n              nx += dx4[i][d];\r\n              ny += dy4[i][d];\r\n\r\n              if (nx < 0 || nx >= N || ny < 0 || ny >= M || map[nx][ny] == 6) {\r\n                if (d == 2) {\r\n                  findBlindSpot(idx + 1, cctvCnt - tmp);\r\n                }\r\n                break;\r\n              }\r\n\r\n              if (map[nx][ny] == 0) {\r\n                tmp++;\r\n              }\r\n              if (map[nx][ny] <= 0) {\r\n                map[nx][ny] -= 1;\r\n                changeXY.add(new int[] { nx, ny });\r\n              }\r\n            }\r\n          }\r\n          while (!changeXY.isEmpty()) {\r\n            int[] p = changeXY.poll();\r\n            map[p[0]][p[1]] += 1;\r\n          }\r\n\r\n        }\r\n        break;\r\n      case 5:\r\n        int tmp = 0;\r\n        int d = 0;\r\n        nx = x;\r\n        ny = y;\r\n        while (true) {\r\n          nx += dx1[d];\r\n          ny += dy1[d];\r\n\r\n          if (nx < 0 || nx >= N || ny < 0 || ny >= M || map[nx][ny] == 6) {\r\n            nx = x;\r\n            ny = y;\r\n            if (d++ == 3) {\r\n              findBlindSpot(idx + 1, cctvCnt - tmp);\r\n              break;\r\n            }\r\n            continue;\r\n          }\r\n          if (map[nx][ny] == 0) {\r\n            tmp++;\r\n          }\r\n          if (map[nx][ny] <= 0) {\r\n            map[nx][ny] -= 1;\r\n            changeXY.add(new int[] { nx, ny });\r\n          }\r\n        }\r\n        while (!changeXY.isEmpty()) {\r\n          int[] p = changeXY.poll();\r\n          map[p[0]][p[1]] += 1;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n}','65650649','2024-01-09',_binary '',1539,1),(66,'504','PyPy3',NULL,'116104','2048','import sys\r\nfrom itertools import combinations\r\ninput = sys.stdin.readline\r\n\r\nn = int(input())\r\np = [list(map(int, input().split())) for _ in range(n)]\r\nans = 10000000\r\n\r\nfor d in range(1, n//2+1):\r\n    for c in combinations(range(n), d):\r\n        rest = set(range(n)) - set(c)\r\n        link, start = 0, 0\r\n        for i in c:\r\n            for j in c:\r\n                link += p[i][j]\r\n        for i in rest:\r\n            for j in rest:\r\n                start += p[i][j]\r\n        ans = min(ans, abs(link-start))\r\nprint(ans)','59379803','2024-02-07',_binary '',1540,1),(67,'128','Python 3',NULL,'30616','140','N = int(input())\r\np = [i for i in range(1,N+1)]\r\n\r\nfor i in range(1, N):\r\n    t = (i**3-1)%len(p)\r\n    p = p[t+1:] + p[0:t]\r\nprint(*p)','52855087','2024-02-08',_binary '',1541,1),(68,'1039','Java 11',NULL,'15592','156','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\n//중복조합\r\npublic class Main {\r\n  static StringBuilder sb = new StringBuilder();\r\n  static int N;\r\n  static int M;\r\n  static int[] sel;\r\n  static int[] num;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n\r\n    num = new int[N];\r\n    for (int i = 0; i < N; i++) {\r\n      num[i] = i + 1;\r\n    }\r\n    sel = new int[M];\r\n    combination(0, 0);\r\n    System.out.println(sb.toString());\r\n\r\n  }\r\n\r\n  private static void combination(int idx, int k) {\r\n    if (k == M) {\r\n      for (int value : sel) {\r\n        sb.append(value).append(\' \');\r\n      }\r\n      sb.append(\"\\n\");\r\n      return;\r\n    }\r\n    for (int i = idx; i < N; i++) {\r\n      sel[k] = num[i];\r\n      combination(i, k + 1);\r\n    }\r\n  }\r\n}\r\n','64421055','2024-02-09',_binary '',1542,1),(69,'839','Python 3',NULL,'46372','276','import sys\r\ninput = sys.stdin.readline\r\n\r\nN = int(input()) #트리의 정점 개수\r\ntree = [[] for _ in range(N+1)] #인접리스트\r\n\r\n#연결된 정점 저장\r\nfor _ in range(N-1):\r\n    a, b = map(int, input().split())\r\n    tree[a].append(b)\r\n    tree[b].append(a)\r\n\r\nq = int(input()) #질의 개수\r\n\r\nfor _ in range(q):\r\n    t, k = map(int, input().split())\r\n    #t가 1일 경우 단절점, 이때 k와 연결된 정점이 0은 나올 수 없고 1개일 경우 끝 쪽에 있는 트리이므로 트리가 나눠지지 않음\r\n    #2개이상 일 경우만 2개 이상의 트리가 나오므로 yes\r\n    if t == 1:\r\n        if len(tree[k]) >= 2:\r\n            print(\'yes\')\r\n        else:\r\n            print(\'no\')\r\n    #t가 2일 경우 단절선, 어느 선이나 끊어도 두개 이상의 트리가 나오므로 언제나 yes\r\n    else:\r\n        print(\'yes\')','58433513','2024-02-09',_binary '',1543,1),(70,'535','Python 3',NULL,'36376','2352','from itertools import permutations\r\n\r\nn = int(input())\r\nnum = list(map(int, input().split()))\r\ntmp = [\'+\', \'-\', \'*\', \'/\']\r\ny = list(map(int, input().split()))\r\no = []\r\nfor i in range(4):\r\n    for _ in range(y[i]):\r\n        o.append(tmp[i])\r\n\r\nminAns = 1000000001\r\nmaxAns = -1000000001\r\nfor p in set(permutations(o, n-1)):\r\n    tmp = int(eval(str(num[0]) + p[0] + str(num[1])))\r\n    for i in range(1, n-1):\r\n        tmp = int(eval(str(tmp) + p[i] + str(num[i+1])))\r\n    minAns = min(minAns, tmp)\r\n    maxAns = max(maxAns, tmp)\r\nprint(maxAns)\r\nprint(minAns)','60508970','2024-01-08',_binary '',1544,1),(71,'766','Python 3',NULL,'38232','1744','N = int(input())\r\nM = N//2\r\nans = []\r\ndata = [list(map(int, input().split())) for _ in range(N)]\r\nresult = []\r\ntalent = [] #각 팀의 능력치 합\r\ndef back():\r\n    if len(ans) == M:\r\n        talent.append(sum(result))\r\n        return\r\n    for i in range(0, N):\r\n        if i not in ans:\r\n            tmp = 0\r\n            if len(ans) == 0 or i > ans[-1]:\r\n                for j in ans:\r\n                    tmp += data[i][j] + data[j][i]\r\n                result.append(tmp)\r\n                ans.append(i)\r\n                back()\r\n                ans.pop()\r\n                result.pop()\r\n\r\nback()\r\ntmp = len(talent)\r\nresult = 20000\r\nfor i in range(tmp):\r\n    tmp4 = abs(talent[i] - talent[tmp-i-1])\r\n    if(tmp4 < result):\r\n        result = tmp4\r\n    if(not result):\r\n        break\r\nprint(result)','52675295','2024-01-08',_binary '',1545,1),(72,'1164','Java 11',NULL,'22840','252','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\n//순열\r\npublic class Main {\r\n  static StringBuilder sb = new StringBuilder();\r\n  static int N;\r\n  static int M;\r\n  static boolean[] visit;\r\n  static int[] sel;\r\n  static int[] num;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n\r\n    num = new int[N];\r\n    for (int i = 0; i < N; i++) {\r\n      num[i] = i + 1;\r\n    }\r\n    sel = new int[M];\r\n    visit = new boolean[N];\r\n    permutation(0);\r\n    System.out.println(sb.toString());\r\n\r\n  }\r\n\r\n  private static void permutation(int idx) {\r\n    if (idx == M) {\r\n      for (int value : sel) {\r\n        sb.append(value).append(\' \');\r\n      }\r\n      sb.append(\"\\n\");\r\n      return;\r\n    }\r\n    for (int i = 0; i < N; i++) {\r\n      if (!visit[i]) {\r\n        visit[i] = true;\r\n        sel[idx] = num[i];\r\n        permutation(idx + 1);\r\n        visit[i] = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n','64411833','2024-01-07',_binary '',1546,1),(73,'1063','Java 11',NULL,'14192','124','import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\n//조합\r\npublic class Main {\r\n  static StringBuilder sb = new StringBuilder();\r\n  static int N;\r\n  static int M;\r\n  static boolean[] visit;\r\n  static int[] sel;\r\n  static int[] num;\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\r\n    N = Integer.parseInt(st.nextToken());\r\n    M = Integer.parseInt(st.nextToken());\r\n\r\n    num = new int[N];\r\n    for (int i = 0; i < N; i++) {\r\n      num[i] = i + 1;\r\n    }\r\n    sel = new int[M];\r\n    combination(0, 0);\r\n    System.out.println(sb.toString());\r\n\r\n  }\r\n\r\n  private static void combination(int idx, int k) {\r\n    if (k == M) {\r\n      for (int value : sel) {\r\n        sb.append(value).append(\' \');\r\n      }\r\n      sb.append(\"\\n\");\r\n      return;\r\n    }\r\n    for (int i = idx; i < N; i++) {\r\n      sel[k] = num[i];\r\n      combination(i + 1, k + 1);\r\n    }\r\n  }\r\n}\r\n','64420992','2024-01-07',_binary '',1547,1),(74,NULL,'python3',NULL,NULL,NULL,'import math\ndef solution(progresses, speeds):\n    answer = [1]\n    idx = 0\n\n    for i in range(len(progresses)):\n        progresses[i] = math.ceil((100 - progresses[i]) / speeds[i])\n    while True:\n        if len(progresses) <=1:\n            break        \n        if progresses[0] >= progresses[1]:\n            answer[idx] +=1\n            progresses.pop(1)\n        else:\n            idx += 1\n            progresses.pop(0)\n            answer.append(1)\n    return answer',NULL,'2024-02-15',_binary '',1548,2),(75,'322','Python 3',NULL,'31256','108',NULL,'67762910','2024-02-15',_binary '',1549,5),(76,'599','C++17',NULL,'2020','0',NULL,'73469140','2024-02-15',_binary '',1549,5),(77,NULL,'java',NULL,NULL,NULL,'class Solution {\n    public int solution(int num1, int num2) {\n        return num1/num2;\n    }\n}',NULL,'2024-02-15',_binary '',1550,1),(78,'402','C++17',NULL,'2020','0',NULL,'72174040','2024-02-15',_binary '\0',1,7),(79,'145','C++17',NULL,'2020','0',NULL,'71222944','2024-02-15',_binary '\0',2,7),(80,'209','C++17',NULL,'2020','0',NULL,'71230920','2024-02-15',_binary '\0',9,7),(81,'1646','C++17',NULL,'2016','20',NULL,'28783150','2024-02-15',_binary '\0',10,7),(82,'843','Python 3',NULL,'31652','52',NULL,'65388740','2024-02-15',_binary '\0',13,7),(83,'508','PyPy3',NULL,'123084','176',NULL,'64549048','2024-02-15',_binary '\0',17,7),(84,'2006','C++17',NULL,'2020','0',NULL,'29871434','2024-02-15',_binary '\0',25,7),(85,'286','PyPy3',NULL,'113112','128',NULL,'64911142','2024-02-15',_binary '\0',38,7),(86,'1658','PyPy3',NULL,'114328','120',NULL,'67007114','2024-02-15',_binary '\0',44,7),(87,'367','PyPy3',NULL,'113112','116',NULL,'63742186','2024-02-15',_binary '\0',53,7),(88,'2101','PyPy3',NULL,'113112','120',NULL,'65707073','2024-02-15',_binary '\0',64,7),(89,'2141','C++17',NULL,'2020','0',NULL,'28779111','2024-02-15',_binary '\0',77,7),(90,'670','Python 3',NULL,'31256','48',NULL,'64084621','2024-02-15',_binary '\0',150,7),(91,'818','PyPy3',NULL,'131372','656',NULL,'67016872','2024-02-15',_binary '\0',198,7),(92,'1163','PyPy3',NULL,'115660','140',NULL,'65286706','2024-02-15',_binary '\0',261,7),(93,'1409','Python 3',NULL,'31256','48',NULL,'63898981','2024-02-15',_binary '\0',362,7),(94,'802','C++17',NULL,'2020','56',NULL,'30970005','2024-02-15',_binary '\0',433,7),(95,'332','PyPy3',NULL,'114328','116',NULL,'57116740','2024-02-15',_binary '\0',436,7),(96,'451','PyPy3',NULL,'131744','152',NULL,'64913326','2024-02-15',_binary '\0',460,7),(97,'2013','C++17',NULL,'2020','0',NULL,'28811822','2024-02-15',_binary '\0',538,7),(98,'401','PyPy3',NULL,'113112','116',NULL,'65127256','2024-02-15',_binary '\0',547,7),(99,'346','PyPy3',NULL,'195756','192',NULL,'63981937','2024-02-15',_binary '',609,7),(100,'833','PyPy3',NULL,'251244','5036',NULL,'62749396','2024-02-15',_binary '',644,7),(101,'402','C++17',NULL,'2020','0',NULL,'73485791','2024-02-15',_binary '\0',1,1),(102,'438','PyPy3',NULL,'114844','164',NULL,'64340502','2024-02-15',_binary '',1551,7),(103,'2263','PyPy3',NULL,'114156','160',NULL,'67828751','2024-02-15',_binary '\0',1534,1),(104,'2263','PyPy3',NULL,'114156','156',NULL,'73488001','2024-02-16',_binary '',1534,2),(105,'132','Python 3',NULL,'240036','896',NULL,'52184782','2024-02-14',_binary '',1552,2),(106,'1428','C++17',NULL,'2020','0',NULL,'28816487','2024-02-13',_binary '',1553,2),(107,'1428','C++17',NULL,'2024','0',NULL,'73488983','2024-02-12',_binary '\0',1553,2),(108,'1353','C++17',NULL,'2292','344',NULL,'34576996','2024-02-11',_binary '\0',1554,2),(109,'402','C++17',NULL,'2020','0',NULL,'73489227','2024-02-15',_binary '\0',1,1),(110,'402','C++17',NULL,'2020','0',NULL,'73489328','2024-02-15',_binary '',1,1),(111,NULL,'python3',NULL,NULL,NULL,'def solution(id_list, reports, k):\n    # reported_users: 유저의 신고(당한) 정보가 저장된 딕셔너리\n    # -> key: 해당유저, value: 해당 유저를 신고한 유저 리스트\n    reported_users = {user: [] for user in id_list}\n    # users_to_receive_mail: 받을 메일의 개수가 저장된 딕셔너리\n    users_to_receive_mail = {user: 0 for user in id_list}\n\n    # 1. 신고 정보 리스트(reports) 를 보고, 유저의 신고 정보 딕셔너리(reported_users) 에 나눠서 저장\n    for report in reports:\n        by_another_user, reported_user = report.split()\n        if by_another_user not in reported_users.get(reported_user):\n            reported_users[reported_user].append(by_another_user)\n    # print(reported_users) -> {\'muzi\': [\'apeach\'], \'frodo\': [\'muzi\', \'apeach\'], \'apeach\': [], \'neo\': [\'frodo\', \'muzi\']}\n\n		# disallowed_users: 사이트 이용이 정지된 유저 리스트\n    disallowed_users = []\n    # 2. reported_users 를 보고 일정 신고 횟수(k) 이상인 경우 사이트 이용을 정지한다.\n    for reported_user, by_another_user in reported_users.items():\n        if len(by_another_user) >= k:\n            disallowed_users.append(reported_user)\n    # print(disallowed_users) -> [\'frodo\', \'neo\']\n\n    # 3. 이용이 정지된 유저들을 신고한 유저를 확인한다.\n    for disallowed_user in disallowed_users:\n        for reported_user, by_another_user in reported_users.items():\n            # 3-1. 정지된 유저와 신고당한 유저가 같다면, 해당 유저를 신고한 유저의 users_to_receive_mail 를 증가한다.\n            if disallowed_user == reported_user:\n                for user in by_another_user:\n                    users_to_receive_mail[user] += 1\n    # print(users_to_receive_mail) -> {\'muzi\': 2, \'frodo\': 1, \'apeach\': 1, \'neo\': 0}\n\n\n    answer = list(users_to_receive_mail.values())\n    return answer',NULL,'2024-02-15',_binary '',1555,1),(112,'735','Python',NULL,'59,828 KB','181 ms','def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n# 최소공배수\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nT = int(input())\nfor testcase in range(1, T+1):\n    N, M = map(int, input().split())\n    LCM = lcm(N,M)                              # N, M의 최소공배수 구하기\n    s_list = list(map(str, input().split()))\n    t_list = list(map(str, input().split()))\n    # 최소공배수만큼 리스트 짜주기\n    gapja = []\n    for i in range(LCM):\n        gapja.append(s_list[i % N] + t_list[i % M])\n    # 찾으려는 연도 계산하기\n    answer = []\n    Q = int(input())\n    for _ in range(Q):\n        what_year = int(input())\n        answer.append(gapja[what_year % LCM -1])\n    ans = \' \'.join(answer)\n    print(f\'#{testcase} {ans}\')',NULL,'2024-02-15',_binary '',1556,1),(113,'735','Python',NULL,'59,828 KB','181 ms','def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n# 최소공배수\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nT = int(input())\nfor testcase in range(1, T+1):\n    N, M = map(int, input().split())\n    LCM = lcm(N,M)                              # N, M의 최소공배수 구하기\n    s_list = list(map(str, input().split()))\n    t_list = list(map(str, input().split()))\n    # 최소공배수만큼 리스트 짜주기\n    gapja = []\n    for i in range(LCM):\n        gapja.append(s_list[i % N] + t_list[i % M])\n    # 찾으려는 연도 계산하기\n    answer = []\n    Q = int(input())\n    for _ in range(Q):\n        what_year = int(input())\n        answer.append(gapja[what_year % LCM -1])\n    ans = \' \'.join(answer)\n    print(f\'#{testcase} {ans}\')',NULL,'2024-02-15',_binary '\0',1556,1),(114,'735','Python',NULL,'59,560 KB','170 ms','def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n# 최소공배수\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nT = int(input())\nfor testcase in range(1, T+1):\n    N, M = map(int, input().split())\n    LCM = lcm(N,M)                              # N, M의 최소공배수 구하기\n    s_list = list(map(str, input().split()))\n    t_list = list(map(str, input().split()))\n    # 최소공배수만큼 리스트 짜주기\n    gapja = []\n    for i in range(LCM):\n        gapja.append(s_list[i % N] + t_list[i % M])\n    # 찾으려는 연도 계산하기\n    answer = []\n    Q = int(input())\n    for _ in range(Q):\n        what_year = int(input())\n        answer.append(gapja[what_year % LCM -1])\n    ans = \' \'.join(answer)\n    print(f\'#{testcase} {ans}\')',NULL,'2024-02-15',_binary '\0',1556,1),(115,'735','Python',NULL,'60,344 KB','167 ms','def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n# 최소공배수\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nT = int(input())\nfor testcase in range(1, T+1):\n    N, M = map(int, input().split())\n    LCM = lcm(N,M)                              # N, M의 최소공배수 구하기\n    s_list = list(map(str, input().split()))\n    t_list = list(map(str, input().split()))\n    # 최소공배수만큼 리스트 짜주기\n    gapja = []\n    for i in range(LCM):\n        gapja.append(s_list[i % N] + t_list[i % M])\n    # 찾으려는 연도 계산하기\n    answer = []\n    Q = int(input())\n    for _ in range(Q):\n        what_year = int(input())\n        answer.append(gapja[what_year % LCM -1])\n    ans = \' \'.join(answer)\n    print(f\'#{testcase} {ans}\')',NULL,'2024-02-15',_binary '\0',1556,1),(116,'735','Python',NULL,'60,344 KB','167 ms','def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n# 최소공배수\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nT = int(input())\nfor testcase in range(1, T+1):\n    N, M = map(int, input().split())\n    LCM = lcm(N,M)                              # N, M의 최소공배수 구하기\n    s_list = list(map(str, input().split()))\n    t_list = list(map(str, input().split()))\n    # 최소공배수만큼 리스트 짜주기\n    gapja = []\n    for i in range(LCM):\n        gapja.append(s_list[i % N] + t_list[i % M])\n    # 찾으려는 연도 계산하기\n    answer = []\n    Q = int(input())\n    for _ in range(Q):\n        what_year = int(input())\n        answer.append(gapja[what_year % LCM -1])\n    ans = \' \'.join(answer)\n    print(f\'#{testcase} {ans}\')',NULL,'2024-02-15',_binary '\0',1556,1),(117,'735','Python',NULL,'60,344 KB','167 ms','def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n# 최소공배수\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nT = int(input())\nfor testcase in range(1, T+1):\n    N, M = map(int, input().split())\n    LCM = lcm(N,M)                              # N, M의 최소공배수 구하기\n    s_list = list(map(str, input().split()))\n    t_list = list(map(str, input().split()))\n    # 최소공배수만큼 리스트 짜주기\n    gapja = []\n    for i in range(LCM):\n        gapja.append(s_list[i % N] + t_list[i % M])\n    # 찾으려는 연도 계산하기\n    answer = []\n    Q = int(input())\n    for _ in range(Q):\n        what_year = int(input())\n        answer.append(gapja[what_year % LCM -1])\n    ans = \' \'.join(answer)\n    print(f\'#{testcase} {ans}\')',NULL,'2024-02-15',_binary '',1556,1),(118,'310','Python',NULL,'256,528 KB','1,098 ms','N = int(input())\nfor i in range(N):\n    M = int(input())\n    answer = 0\n    arr = list(map(int, input().split()))\n    sellPrice = 0\n\n    for val in arr[::-1]:\n        if val >= sellPrice:\n            sellPrice = val\n        else:\n            answer += sellPrice - val\n    print(\"#\", i + 1, \" \", answer, sep=\"\")',NULL,'2024-02-15',_binary '\0',1557,1),(119,'310','Python',NULL,'243,860 KB','1,078 ms','N = int(input())\nfor i in range(N):\n    M = int(input())\n    answer = 0\n    arr = list(map(int, input().split()))\n    sellPrice = 0\n\n    for val in arr[::-1]:\n        if val >= sellPrice:\n            sellPrice = val\n        else:\n            answer += sellPrice - val\n    print(\"#\", i + 1, \" \", answer, sep=\"\")',NULL,'2024-02-15',_binary '\0',1557,1),(120,'310','Python',NULL,'243,332 KB','1,111 ms','N = int(input())\nfor i in range(N):\n    M = int(input())\n    answer = 0\n    arr = list(map(int, input().split()))\n    sellPrice = 0\n\n    for val in arr[::-1]:\n        if val >= sellPrice:\n            sellPrice = val\n        else:\n            answer += sellPrice - val\n    print(\"#\", i + 1, \" \", answer, sep=\"\")',NULL,'2024-02-15',_binary '',1557,1),(121,NULL,'python3',NULL,NULL,NULL,'class Node:\n    def __init__(self, data):\n        self.letter = data\n        self.count = 0\n        self.children = {}\n        self.is_end_of_word = False\n\n\nclass Trie:\n    def __init__(self):\n        self.root = Node(None)\n        self.count = 0\n    def insert(self, string):\n        current_node = self.root\n        self.count += 1\n\n        for char in string:\n            if char not in current_node.children:\n                current_node.children[char] = Node(char)\n            current_node = current_node.children[char]\n            current_node.count += 1\n        current_node.is_end_of_word = True\n\n    def search(self, string):\n        current_node = self.root\n        for char in string:\n            if char != \'?\':\n                if char in current_node.children:\n                    current_node = current_node.children[char]\n                else:\n                    return 0\n            else:\n                break\n\n        return current_node.count\n\n\ndef solution(words, queries):\n    answer = []\n    trie_words, reversed_trie_words = {}, {}\n    for word in words:\n        if len(word) not in trie_words:\n            trie_words[len(word)] = Trie()\n            reversed_trie_words[len(word)] = Trie()\n\n        trie_words[len(word)].insert(word)\n        reversed_trie_words[len(word)].insert(word[::-1])\n\n    for query in queries:\n        if len(query) not in trie_words:\n            answer.append(0)\n        elif len(query) == query.count(\'?\'):\n            answer.append(trie_words[len(query)].count)\n        elif query[0] != \'?\':\n            answer.append(trie_words[len(query)].search(query))\n        else:\n            answer.append(reversed_trie_words[len(query)].search(query[::-1]))\n    return answer',NULL,'2024-02-15',_binary '',1558,1),(122,'1226','Java 11',NULL,'33476','444',NULL,'70555563','2024-02-15',_binary '',1559,1),(123,'2263','Java 11',NULL,'18440','208',NULL,'67855605','2024-02-15',_binary '',1560,1),(124,NULL,'python3',NULL,NULL,NULL,'class Node:\n    def __init__(self, data):\n        self.letter = data\n        self.count = 0\n        self.children = {}\n        self.is_end_of_word = False\n\n\nclass Trie:\n    def __init__(self):\n        self.root = Node(None)\n        self.count = 0\n    def insert(self, string):\n        current_node = self.root\n        self.count += 1\n\n        for char in string:\n            if char not in current_node.children:\n                current_node.children[char] = Node(char)\n            current_node = current_node.children[char]\n            current_node.count += 1\n        current_node.is_end_of_word = True\n\n    def search(self, string):\n        current_node = self.root\n        for char in string:\n            if char != \'?\':\n                if char in current_node.children:\n                    current_node = current_node.children[char]\n                else:\n                    return 0\n            else:\n                break\n\n        return current_node.count\n\n\ndef solution(words, queries):\n    answer = []\n    trie_words, reversed_trie_words = {}, {}\n    for word in words:\n        if len(word) not in trie_words:\n            trie_words[len(word)] = Trie()\n            reversed_trie_words[len(word)] = Trie()\n\n        trie_words[len(word)].insert(word)\n        reversed_trie_words[len(word)].insert(word[::-1])\n\n    for query in queries:\n        if len(query) not in trie_words:\n            answer.append(0)\n        elif len(query) == query.count(\'?\'):\n            answer.append(trie_words[len(query)].count)\n        elif query[0] != \'?\':\n            answer.append(trie_words[len(query)].search(query))\n        else:\n            answer.append(reversed_trie_words[len(query)].search(query[::-1]))\n    return answer',NULL,'2024-02-15',_binary '\0',1558,1),(125,'977','PyPy3',NULL,'210440','11020',NULL,'58624559','2024-02-15',_binary '',325,1),(126,'384','PyPy3',NULL,'113112','116',NULL,'54393448','2024-02-15',_binary '',1561,1),(127,NULL,'python3',NULL,NULL,NULL,'class Node:\n    def __init__(self, data):\n        self.letter = data\n        self.count = 0\n        self.children = {}\n        self.is_end_of_word = False\n\n\nclass Trie:\n    def __init__(self):\n        self.root = Node(None)\n        self.count = 0\n    def insert(self, string):\n        current_node = self.root\n        self.count += 1\n\n        for char in string:\n            if char not in current_node.children:\n                current_node.children[char] = Node(char)\n            current_node = current_node.children[char]\n            current_node.count += 1\n        current_node.is_end_of_word = True\n\n    def search(self, string):\n        current_node = self.root\n        for char in string:\n            if char != \'?\':\n                if char in current_node.children:\n                    current_node = current_node.children[char]\n                else:\n                    return 0\n            else:\n                break\n\n        return current_node.count\n\n\ndef solution(words, queries):\n    answer = []\n    trie_words, reversed_trie_words = {}, {}\n    for word in words:\n        if len(word) not in trie_words:\n            trie_words[len(word)] = Trie()\n            reversed_trie_words[len(word)] = Trie()\n\n        trie_words[len(word)].insert(word)\n        reversed_trie_words[len(word)].insert(word[::-1])\n\n    for query in queries:\n        if len(query) not in trie_words:\n            answer.append(0)\n        elif len(query) == query.count(\'?\'):\n            answer.append(trie_words[len(query)].count)\n        elif query[0] != \'?\':\n            answer.append(trie_words[len(query)].search(query))\n        else:\n            answer.append(reversed_trie_words[len(query)].search(query[::-1]))\n    return answer',NULL,'2024-02-15',_binary '\0',1558,1),(128,'610','PyPy3',NULL,'109108','132',NULL,'73494802','2024-02-15',_binary '',1519,1),(129,NULL,'python3',NULL,NULL,NULL,'def solution(array, commands):\n    return [sorted(array[x-1:y])[z-1] for x, y, z in commands]',NULL,'2024-02-15',_binary '',1562,1),(130,'230','Python',NULL,'43,532 KB','107 ms','T = int(input())\n\nfor t in range(1, T+1) :\n    word = input()\n    for i in range(len(word)//2) :\n        if word[i] == word[-1-i] :\n            answer = 1\n        else :\n            answer = 0\n    print(\"#{} {}\".format(t, answer))',NULL,'2024-02-15',_binary '',1563,1),(131,'614','C++17',NULL,'2020','0',NULL,'73495595','2024-02-15',_binary '',69,1),(132,'219','Python 3',NULL,'35484','3780',NULL,'52121946','2024-02-15',_binary '',1564,1),(133,'265','Python 3',NULL,'34104','88',NULL,'66775653','2024-02-15',_binary '',1565,1),(134,'265','Python 3',NULL,'34016','88',NULL,'73496296','2024-02-16',_binary '\0',1565,1),(135,'203','Python 3',NULL,'31256','40',NULL,'66939947','2024-02-16',_binary '',111,1);
/*!40000 ALTER TABLE `solved_problem` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user` (
  `user_id` int NOT NULL AUTO_INCREMENT,
  `del_date` date DEFAULT NULL,
  `email` varchar(255) NOT NULL,
  `last_solved_date` date DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `reg_date` date DEFAULT NULL,
  `status` bit(1) DEFAULT NULL,
  `tier` int DEFAULT NULL,
  `today_streak_count` int DEFAULT NULL,
  `user_score` int DEFAULT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `UK_ob8kqyqqgmefl0aco34akdtpe` (`email`),
  UNIQUE KEY `UK_n4swgcf30j6bmtb4l4cjryuym` (`nickname`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (1,NULL,'daejeon108@gmail.com',NULL,'ALGO','2024-02-15',_binary '\0',3,0,1564),(2,NULL,'choij2554@gmail.com',NULL,'고요한 코딩곰토끼','2024-02-15',_binary '\0',3,0,1171),(3,NULL,'nionalgo@gmail.com',NULL,'창의적인 정규분포뽀로로','2024-02-15',_binary '\0',0,0,0),(4,NULL,'parkckswn@nate.com',NULL,'격렬한 자율출근닌자','2024-02-15',_binary '\0',0,0,0),(5,NULL,'jwj970802@gmail.com',NULL,'사랑스러운 해커','2024-02-15',_binary '\0',1,0,1),(7,NULL,'tamizy@naver.com',NULL,'Dachae','2024-02-15',_binary '\0',2,0,289),(9,NULL,'odk926@gmail.com',NULL,'즐거운 코딩뽀롱뽀롱','2024-02-15',_binary '\0',0,0,0),(10,NULL,'dbwls6627@gmail.com',NULL,'신비로운 개발자','2024-02-15',_binary '\0',0,0,0),(11,NULL,'ys0403ab@gmail.com',NULL,'웅장한 곰탱이','2024-02-15',_binary '\0',0,0,0);
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_file_info`
--

DROP TABLE IF EXISTS `user_file_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_file_info` (
  `profile_id` int NOT NULL AUTO_INCREMENT,
  `original_file` varchar(255) DEFAULT NULL,
  `save_file` varchar(255) DEFAULT NULL,
  `user_id` int DEFAULT NULL,
  PRIMARY KEY (`profile_id`),
  UNIQUE KEY `UK_gtvb7bv5xu7wr2w3yh1fntjmb` (`user_id`),
  CONSTRAINT `FK1ukcy0w8gsr0savicrvwbshu7` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_file_info`
--

LOCK TABLES `user_file_info` WRITE;
/*!40000 ALTER TABLE `user_file_info` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_file_info` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2024-02-16  9:12:35
